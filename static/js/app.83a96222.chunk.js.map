{"version":3,"sources":["web-build/register-service-worker.js","res/assets/fonts/Nunito-Black.ttf","res/assets/fonts/Nunito-BlackItalic.ttf","res/assets/fonts/Nunito-Bold.ttf","res/assets/fonts/Nunito-BoldItalic.ttf","res/assets/fonts/Nunito-ExtraBold.ttf","res/assets/fonts/Nunito-ExtraBoldItalic.ttf","res/assets/fonts/Nunito-ExtraLight.ttf","res/assets/fonts/Nunito-ExtraLightItalic.ttf","res/assets/fonts/Nunito-Italic.ttf","res/assets/fonts/Nunito-Light.ttf","res/assets/fonts/Nunito-LightItalic.ttf","res/assets/fonts/Nunito-Regular.ttf","res/assets/fonts/Nunito-SemiBold.ttf","res/assets/fonts/Nunito-SemiBoldItalic.ttf","res/assets/images/blender.png","res/assets/images/bolt.png","res/assets/images/calendar.png","res/assets/images/clock.png","res/assets/images/defaultProperty.png","res/assets/images/downArrow.png","res/assets/images/fan.png","res/assets/images/hamburger.png","res/assets/images/icon.png","res/assets/images/roopairsLogo.png","res/assets/images/splash.png","res/assets/images/testLogo.png","res/assets/images/tint.png","res/assets/images/trash.png","res/assets/images/upArrow.png","res/assets/images/servprov.png","node_modules/moment/locale sync /^/.//.*$","res/fonts.web.tsx","src/endpoints/constants.tsx","src/utility/SyntaxVerification.tsx","src/utility/ParameterChecker.tsx","src/utility/OtherUtilities.tsx","src/state/types.ts","res/strings.tsx","src/utility/ApplianceCategories.tsx","src/routes/RouteConstants.web.tsx","src/routes/RouteHandler/ChooseMainPage.web.tsx","src/routes/RouteHandler/NavigationRouteHandler.tsx","src/routes/RouteHandler/GetAccountType.tsx","src/state/account/actions.tsx","src/state/header/actions.tsx","src/state/property-list/actions.tsx","src/state/session/actions.tsx","src/state/service/actions.tsx","src/state/preferred-service-provider/actions.tsx","src/state/settings/actions.tsx","src/endpoints/api-request.tsx","res/Styles/base.ts","src/elements/Forms/InputForm.tsx","src/elements/Forms/SearchForm.tsx","src/elements/LocationItem/LocationItem.tsx","src/elements/Forms/GoogleInputForm.tsx","res/images.tsx","src/elements/Panels/AddressPanel.tsx","src/elements/Panels/ApplianceCategoryPanel.tsx","src/elements/Buttons/ServiceRequestButton.tsx","res/colors.tsx","src/elements/Tiles/styles.web.tsx","src/elements/Tiles/Tiles.tsx","src/elements/Buttons/ServiceProviderButton.tsx","src/elements/Buttons/ThinButton.tsx","src/elements/Buttons/ButtonWithBitmap.tsx","src/elements/Buttons/LoginButton.tsx","src/elements/Panels/AppliancePanel.tsx","src/elements/Panels/ServiceRequestAddressPanel.tsx","src/elements/Panels/ServiceTypePanel.tsx","src/elements/Panels/ApplianceCategorizer/ApplianceCategorizer.tsx","src/elements/Cards/Card.tsx","src/elements/Stickers/Sticker.tsx","src/elements/DatePicker/DatePicker.web.tsx","src/components/auth-pages/AuthPage/WithAuthPage.tsx","src/components/auth-pages/LoginScreen/LoginScreenBase.tsx","src/components/auth-pages/RoopairsLogin/RoopairsLoginBase.tsx","src/components/auth-pages/SignUpScreen/AccounttypeRadioButton/AccountTypeRadioButton.tsx","src/components/auth-pages/SignUpScreen/SignUpScreenBase.tsx","src/components/auth-pages/LoginScreen/LoginScreen.tsx","src/components/auth-pages/SignUpScreen/SignUpScreen.tsx","src/components/auth-pages/RoopairsLogin/RoopairsLogin.tsx","src/components/main-pages/Account/AccountScreen/AuthenticationCards/ConnectCardStyles.tsx","src/components/main-pages/Account/AccountScreen/AuthenticationCards/AccountConnectedCard.tsx","src/components/main-pages/Account/AccountScreen/AuthenticationCards/ConnectAccountCard.tsx","src/components/main-pages/Account/AccountScreen/AccountScreenBase.tsx","src/components/main-pages/Account/AccountScreen/AccountScreen.tsx","src/components/main-pages/Account/account-pages.tsx","src/components/main-pages/Properties/components/CurrentTenantCard/styles.ts","src/components/main-pages/Properties/components/CurrentTenantCard/CurrentTenantCard.tsx","src/components/main-pages/Properties/components/SinglePropertyConnect/withSinglePropertyConnect.tsx","src/components/main-pages/Properties/components/ApplianceInfo/ApplianceInfo.tsx","src/components/main-pages/Properties/components/ServiceRequestCount/ServiceRequestCount.tsx","src/components/main-pages/Properties/components/GeneralHomeInfo/GeneralHomeInfo.tsx","src/components/main-pages/Properties/components/AddressSticker/AddressSticker.tsx","src/components/main-pages/Properties/DetailedPropertiesScreen/DetailedPropertyScreenBase.tsx","src/components/main-pages/Properties/PropertiesScreen/ViewPropertyCard/ViewPropertyCard.tsx","src/components/main-pages/Properties/PropertiesScreen/PropertiesScreenBase.tsx","src/components/main-pages/Properties/PropertiesScreen/PropertiesScreen.tsx","src/components/main-pages/Properties/TenantPropertyScreen/PrimaryContactInfo/PrimaryContactInfo.tsx","src/components/main-pages/Properties/TenantPropertyScreen/TenantPropertyScreenBase.tsx","src/components/main-pages/Properties/TenantPropertyScreen/TenantPropertyScreen.tsx","src/components/main-pages/Properties/property-pages.tsx","src/components/main-pages/ServiceRequest/NewRequest/components/ChooseServiceCategory/ChooseServiceCategory.tsx","src/components/main-pages/ServiceRequest/NewRequest/components/ChooseServiceProvider/ChooseServiceProvider.tsx","src/components/main-pages/ServiceRequest/NewRequest/components/ChooseAppliance/ChooseAppliance.tsx","src/components/main-pages/ServiceRequest/NewRequest/NewRequestScreenBase.tsx","src/components/main-pages/ServiceRequest/ServiceRequestScreen/ServiceRequestScreenBase.tsx","src/components/main-pages/ServiceRequest/NewRequest/NewRequestScreen.tsx","src/components/main-pages/ServiceRequest/service-request-pages.tsx","src/components/main-pages/ServiceRequest/ServiceRequestScreen/ServiceRequestScreen.tsx","src/components/main-pages/components/SceneHeader/SceneHeader.tsx","src/components/main-pages/components/SceneHeader/PreferredProviderFlatList/PreferredProviderFlatList.tsx","src/components/main-pages/components/SceneHeader/WithSceneHeader.tsx","src/components/main-pages/components/withHeaderUpdate.tsx","src/components/main-pages/main-pages.tsx","src/components/nav-header/HamburgerButton/styles.web.tsx","src/components/nav-header/HamburgerButton/HamburgerButton.tsx","src/components/nav-header/HomePairsHeaderTitle/styles.web.tsx","src/components/nav-header/HomePairsHeaderTitle/HomePairsHeaderTitle.tsx","src/components/nav-header/HomePairsHeaderMenu/styles.web.tsx","src/components/nav-header/HomePairsHeaderMenu/HomePairsHeaderMenu.tsx","src/components/nav-header/styles.web.tsx","src/components/nav-header/HomePairsHeaderBase.tsx","src/components/nav-header/HomePairsHeader.tsx","src/components/modals/LoadingModal/LoadingModal.tsx","src/components/modals/LoadingModal/AuthenticationModals.tsx","src/components/modals/PreferredProviderModal/PreferredProviderModalBase.tsx","src/components/modals/PreferredProviderModal/styles.web.tsx","src/components/modals/property-modals/CommonDispatchProps.tsx","src/components/modals/property-modals/EditTenantModal/EditTenantModal.tsx","src/components/modals/property-modals/AddTenantModal/AddTenantModal.tsx","src/components/modals/property-modals/AddNewPropertyModal/AddNewPropertyModalBase.tsx","src/components/modals/property-modals/AddNewPropertyModal/AddNewPropertyModal.tsx","src/components/modals/property-modals/EditPropertyModal/EditPropertyModalBase.tsx","src/components/modals/property-modals/EditPropertyModal/EditPropertyModal.tsx","src/components/modals/property-modals/AddApplianceModal/AddApplianceModal.tsx","src/components/modals/property-modals/EditApplianceModal/EditApplianceModal.tsx","src/components/modals/AddServiceProviderModal/AddServiceProviderModalBase.tsx","src/components/modals/AddServiceProviderModal/styles.web.tsx","src/components/modals/AddServiceProviderModal/AddServiceProviderModal.tsx","src/components/modals/PreferredProviderModal/PreferredProviderModal.tsx","src/components/modals/ServiceRequestModal/ServiceRequestModal.tsx","src/components/AppNavigation.web.tsx","src/state/property-list/reducer.tsx","src/state/account/reducer.tsx","src/state/header/reducer.tsx","src/state/service/reducer.tsx","src/state/settings/reducer.tsx","src/state/session/reducer.tsx","src/state/preferred-service-provider/reducer.tsx","src/state/store.ts","App.tsx"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","HomePairFonts","BaseURL","HOMEPAIRS_PROPERTY_ENDPOINT","HOMEPAIRS_PREFERRED_PROVIDER_ENDPOINT","isPhoneNumberValid","phone","RegExp","test","isPasswordValid","input","isEmptyOrSpaces","str","isPositiveWholeNumber","isEmailSyntaxValid","email","isAlphaCharacterOnly","toString","isNullOrUndefined","arg","convertObjectValuesToArray","dict","arrayVals","entries","length","nestedFilter","search","item","foundMatch","itemArray","i","includes","trim","ApplianceType","AccountTypes","ServiceRequestCompletionStatus","ServiceRequestStatusEnums","HomePairsDimensions","HOMEPAIRS_ACCOUNT_KEYS","HOMEPAIRS_LOGIN_STATUS","HOMEPAIRS_PROPERTY_KEYS","HomepairsPropertyAttributes","Dimensions","get","height","propertyMutationForm","address","maxTenants","bedrooms","bathrooms","city","state","strings","title","serviceRequestPage","button","tabA","tabB","tabA1","tabA2","tabA3","tabB1","tabB2","tabB3","serviceRequestModal","status","serviceType","technician","startDate","poc","details","appliance","connectAccountPage","tokenFailed","accountConnected","accountConnectedCard","subtitle","accountNotConnected","connectAccountCard","propertiesPage","addProperty","inputForm","viewPropertyCardButton","detailedPropertyPage","navigationParams","propertyIndex","generalHomeInfo","tenants","editProperty","primaryContact","name","serviceRequestCount","pending","scheduled","inProgress","signInPage","inputForms","password","signUpHighlight","newUserText","modal","signUpPage","accountTypeRadioButton","tenant","propertyManager","firstName","lastName","confirmPassword","companyName","numBed","numBath","currentUserText","logOut","applianceInfo","categories","HVAC","PLUMBING","GA","LE","applianceModal","addTitle","editTitle","category","manufacturer","modelNum","serialNum","location","add","editSave","lastServiceBy","lastServiceDate","addServiceProvider","phoneNumber","preferredProviderModal","overview","companyEmail","phoneNum","license","skills","categoryStrings","categoryToString","appType","Plumbing","GeneralAppliance","LightingAndElectric","stringToCategory","selected","None","LOGIN","SIGNUP","LOGIN_MODAL","PROPERTY_LIST","PROPERTY","SERVICE_REQUEST","NEW_SERVICE_REQUEST","navigationPages","MainAppStack","navigate","MainAppStackTenant","ChooseMainPage","accountType","navigation","Tenant","replace","NavigationObjects","ServiceRequestScreen","AccountSettings","BASE_ROUTES","PropertyStack","ServiceRequestStack","AccountSettingStack","prepareRoute","route","params","log","passedParams","sortedItems","sort","a","b","localeCompare","fullRoute","forEach","value","JSON","stringify","NavigationRouteHandler","type","Platform","OS","Router","Navigator","this","props","history","match","navObject","pathname","key","routeName","asBackground","push","background","goBack","amount","pop","go","param","getParam","parse","pathName","withNavigationRouteHandler","Component","createFromProps","prepareNavigationHandlerComponent","NavigableComponent","withRouter","withNavigation","getAccountType","accountJSON","role","PropertyManager","FETCH_PROFILE_ACTION_TYPES","FETCH_PROFILE","REHYDRATE_PROFILE","parsePropertyManagerAccount","pmObject","pm","roopairsToken","token","HEADER_ACTION_TYPES","parseAccount","profile","tenantObject","properties","pmId","streetAddress","propId","parseTenantAccount","PROPERTY_LIST_ACTION_TYPES","toggleMenu","showMenu","TOGGLE_MENU","switchDropdownNavbar","isDropDown","SWITCH_DROPDOWN_NAVBAR","showGoBackButton","showBackButton","SHOW_GOBACK_BUTTON","updateSelectedPage","selectedPage","UPDATE_SELECTED_PAGE","onGoBack","ON_GO_BACK","SESSION_ACTION_TYPES","setSelectedProperty","SET_SELECTED_PROPERTY","newProperty","ADD_PROPERTY","userData","updateProperty","updatedProperty","UPDATE_PROPERTY","removeProperty","REMOVE_PROPERTY","fetchPropertyAndPropertyManager","linkedProperties","linkedPropertyManager","linkedProperty","fetchedPropertyManager","fetchedProperties","fetchedProperty","FETCH_PROPERTY_AND_PROPERTY_MANAGER","property","fetchProperties","parsedProperty","FETCH_PROPERTIES","storePropertyApplianceAndTenants","appliances","STORE_APPLIANCES_AND_TENANTS","SERVICES_ACTION_TYPES","REQUEST_SERVICE","ACCEPT_SERVICE","DENY_SERVICE","CANCEL_SERVICE","COMPLETE_SERVICE","requestServiceAction","serviceProvider","newRequest","provider","ServiceRequestStatus","Pending","request","acceptServiceAction","denyServiceAction","cancelServiceAction","service","completeServiceAction","PREFERRED_SERVICE_PROVIDER_ACTION_TYPES","setAccountAuthenticationState","authed","SET_AUTH_STATE","refreshServiceProviders","serviceProviders","REFRESH_SERVICE_PROVIDERS","preferredServiceProviders","removeServiceProvider","REMOVE_SERVICE_PROVIDER","SETTINGS_ACTION_TYPES","PropertyListActions","HomePairsStateActions","SessionActions","PreferredProviderActions","SUCCESS","SingleProperty","parsePreferredProviders","preferredServiceProviderJSON","provId","prefId","contractLic","founded","rate","timesHired","earliestHire","logo","payRate","undefined","Date","fetchPreferredProviders","endpoint","dispatch","async","axios","result","providers","data","parsedProviders","Promise","reject","updateTenant","post","fetchServiceRequests","completedEndpoint","results","fetchPropertyAppliancesAndTenants","tenantInfo","appId","applianceId","appName","fetchAccount","Email","Password","modalSetOffCallBack","response","pmAccountType","postNewAppliance","newAppliance","setInitialState","displayError","resolveModalReplaceNavigation","postUpdatedAppliance","editAppliance","put","newName","newManufacturer","newCategory","newModelNum","newSerialNum","newLocation","postNewServiceRequest","newServiceRequest","isPm","providerId","serviceCategory","serviceDate","pocName","changeServiceRequestStatus","reqId","setTimeout","reload","err","LightColorTheme","primary","secondary","tertiary","space","transparent","red","darkGray","gray","lightGray","veryLightGray","shadow","roopairs","FontTheme","xlg","lg","reg","small","xsmal","MAX_CONTENT_SIZE","MarginPadding","ContentWidth","BorderRadius","initialState","DefaultInputFormStyle","StyleSheet","create","container","marginBottom","paddingTop","paddingHorizontal","borderRadius","width","opacity","formTitle","marginVertical","fontFamily","color","alignItems","alignSelf","margin","minWidth","borderColor","borderWidth","hide","display","errorStyle","fontSize","InputForm","setError","bind","setState","text","parentCallBack","formTitleStyle","Text","style","secureTextEntry","containerStyle","inputStyle","placeholder","errorMessage","numberOfLines","multiline","maxLength","View","renderName","TextInput","testID","underlineColorAndroid","autoCapitalize","onChangeText","passInputValue","visible","padding","React","defaultProps","ref","child","SearchForm","invokeSearchFromInputForm","prevProps","objects","filteredArray","list","originalList","newList","filter","isMatched","filterList","colors","BaseStyles","styles","borderBottomColor","borderBottomWidth","itemText","LocationItem","description","clearSearch","TouchableOpacity","onPress","PureComponent","apiKey","locationsContainers","maxHeight","borderLeftColor","borderLeftWidth","borderRightColor","borderRightWidth","GoogleInputForm","fetchApiKey","AsyncStorage","getItem","locationsContainer","components","handleTextChange","locationResults","Fragment","ScrollView","el","String","blender","require","bolt","clock","defaultProperty","downArrow","fan","hamburger","roopairsLogo","tint","upArrow","expanded","selectedIndex","selectedString","animation","minHeight","clicked","ApplianceCategoryPanel","backgroundColor","marginHorizontal","paddingBottom","overflow","titleContainer","flexDirection","justifyContent","infoRowContainer","paddingVertical","titleText","textContainer","buttonImage","body","Animated","Value","toggle","setMaxHeight","setMinHeight","icons","up","down","event","nativeEvent","layout","initialValue","finalValue","setValue","spring","toValue","start","onLayout","TouchableHighlight","underlayColor","selectAddress","detail","icon","Image","source","renderBody","selectedCategoryIndex","selectedCategoryString","bodyPadding","alignContent","setStyles","initialCategory","selectCategory","buttonStyle","paddingLeft","marginLeft","companyDetailsText","dateContainer","dateText","ServiceRequestButton","onClick","active","serviceRequest","Moment","locale","date","format","HomePairColors","LightModeColors","primaryText","seconaryText","headerText","greyCardDivider","blueButton","blueButtonText","greyButton","greyButtonText","editInformation","overShade","imageOverShade","headerShadow","primaryImageOverlayText","secondaryImageOverlayText","shadowColor","DarkModeColors","textStyleBase","textAlign","imageTileContainer","aspectRatio","imageTileContainerLarge","imageStyle","resizeMode","textTileContainer","ImageTile","image","enlarge","TextTile","adjustFontSizeToFit","textStyle","styleSheet","adjustsFontSizeToFit","textAlignVertical","payRateText","Colors","leftColumnStyle","flex","MAX_BUTTON_WIDTH","rightColumnStyle","imageContainer","companyAddress","position","bottom","starting","ServiceProviderButton","uri","renderLogo","toUpperCase","ThinButton","onPressIn","onPressOut","buttonTextStyle","DefaultThinButtonStyles","maxWidth","buttonText","shadowRadius","shadowOffset","shadowOpacity","elevation","marginTop","ButtonWithBitmap","LoginButton","DefaultLoginButtonStyles","signUpButtonText","applianceInfoStrings","AppliancePanel","thinButtonProps","MIN_BUTTON_WIDTH","editButton","editButtonText","detailName","detailContainer","val","hasButton","buttonName","checkEmpty","renderThinButton","ServiceRequestAddressPanel","hasBeenClicked","serviceTypes","ServiceTypePanel","option","selectServiceType","ApplianceCategorizer","colorTheme","categoryContainer","categoryText","emptyText","locations","Map","finalApps","app","homeLocation","set","locationKey","defaultStyles","generalIndexContainer","wrapper","closeButton","closeButtonContainer","right","top","zIndex","titleCloseButtonContainer","closeButtonWrapper","Card","children","wrapperStyle","titleStyle","subtitleStyle","titleContainerStyle","closeButtonStyle","showCloseButton","closeButtonPressedCallBack","closeButtonContainerStyle","Sticker","DatePickerWeb","getFormDate","maxDate","setHours","setDate","getDate","dropDown","onChange","min","step","time","momentLocalizer","initalState","clickThinButton","clickHighlightedText","withAuthPage","WrappedComponent","defaultAuthPassProps","buttonColor","pallet","MIN_CONTENT_SIZE","scrollStyle","StatusBar","currentHeight","scrollContentContainerStyle","flexGrow","cardContainerStyle","cardTitleStyle","cardTitleContainerStyle","cardWrapperStyle","errorText","modalText","thinButtonContainer","thinButton","thinButtonText","subTitleText","DROP_MENU_WIDTH","submitSection","signUpSection","standardText","setThinButtonClick","setHighlightedClick","setErrorFlag","isShown","message","underButtonText","highlightedText","showError","clickButton","setErrorState","renderSignInButton","renderUnderButtonText","contentContainerStyle","directionalLockEnabled","automaticallyAdjustContentInsets","renderContents","signInStrings","username","LoginScreenBase","getFormUsername","getFormPassword","setModalOff","loginRef","createRef","passwordRef","childData","check","current","onFetchAccount","resetForms","validateForms","index","RoopairsLoginBase","inputFormStyle","setInputStyles","accountRadioStrings","buttonContainer","selectedLeftButton","borderTopLeftRadius","borderBottomLeftRadius","selectedRightButton","borderTopRightRadius","borderBottomRightRadius","selectedText","unselectedLeftButton","unselectedRightButton","unselectedText","AccountTypeRadioButton","onPressPropertyManager","onPressTenant","propertyManagerSelected","leftButtonStyle","rightButtonStyle","baseState","cPassword","errorCheck","errorMsg","signUpScreenStrings","errorFormTitle","errorInput","SignUpScreenBase","clickSignIn","clickSignUp","generateHomePairsAccount","toRoopairsLogin","getFormFirstName","getFormLastName","getFormEmail","getFormCPassword","getFormAddress","getFormPhoneNumber","resetState","firstNameRef","lastNameRef","emailRef","cPasswordRef","addressRef","phoneNumberRef","msg","maxDividerWidth","dividerWidth","renderRoopairsLoginButton","renderAddressForm","renderInputForms","renderError","authPageParam","loadingModalText","AuthPage","connect","modalSetOff","signUpStrings","NavigableAuthPage","accountDetails","generateAccountForPM","pmInfo","generateAccountForTenant","roopairsSubtitle","cardTitle","cardDescription","accountContainer","cardStrings","AccountConnectedCard","disconnectAccountCallBack","alert","ConnectAccountCard","connectAccountCallBack","AccountScreenBase","handleConnectResults","arg0","handleDisconnectResults","accountProfile","AccountPage","onConnectRoopairsAccount","onDisconnectRoopairsAccount","CircleShapeView","initialsContainer","tenantContact","tenantInfoContainer","livingSpaceContainer","addressContainer","cityStateText","addButton","addButtonText","addButtonContainer","CurrentTenantCard","hasEdit","useState","numTenants","renderTenantInfo","tenantInitals","concat","navigateToEditTenantModal","renderContent","mapStateToProps","settings","mapDispatchToProps","onUpdateHeader","setAppliancesAndTenants","withSinglePropertyConnect","InnerComponent","ApplianceInfo","onAddApplianceModal","onEditApplianceModal","serviceRequestStrings","renderDetailBox","arg1","ServiceRequestCount","prepareServiceRequests","reqs","Scheduled","InProgress","renderLivingSpace","generalHomeStrings","GeneralHomeInfo","streetText","AddressSticker","imageWrapper","scrollViewContentContainer","addBottomMargin","homePairsPropertiesImage","homePairsPropertiesImageWeb","getPropIdAndProperty","DetailedPropertyScreenBase","openEditPropertyModal","openEditApplianceModal","openAddApplianceModal","SafeAreaView","cityText","propertyAddressContainer","remainingContainer","viewPropertyButtonText","ViewPropertyCard","viewButtonSelectedCallBack","ImageBackground","onError","PropertiesScreenBase","navigateToDetailedProperty","onSelectProperty","onRevealGoBack","pair","propImage","fetchPropertyImage","propertyState","FlatList","initialNumToRender","renderItem","renderViewPropertyCard","keyExtractor","header","HeaderActions","selectedPropertyId","primaryContactStrings","PrimaryContactInfo","primaryContactContainer","cardContainer","detailsLabel","detailsValue","detailsWrapperStyle","contactWrapperStyle","labeledItem","label","TenantPropertyScreenBase","renderProperty","DetailedPropertyPage","PropertiesPage","PropertiesScreen","TenantPropertyPage","TenantPropertyScreen","leftButtonContainer","paddingRight","rightButtonContainer","ChooseServiceCategory","selectedOption","setOptionString","setServiceCategory","networkText","networkErrorText","preferredProvidersSelected","networkProvidersFound","networkError","providerName","ChooseServiceProvider","onPressNetwork","onPressGetNetworkProviders","onPressPreferred","selectProvider","buttonProps","renderPreferredProviders","renderNetworkProviders","renderProviderTypeRadioButton","renderServiceProviders","resultContainerStyle","ChooseAppliance","setSelectedAppliance","applianceType","addressState","serviceCategoryState","applianceState","providerState","serviceTypeState","detailsState","dateState","pocState","pocNameState","scrollContainer","datePickerContainer","iconImage","NewServiceRequestBase","formProps","fetchAppliances","fetchServiceProviders","providerInfo","getFormCategory","getFormAppliance","getFormServiceType","getFormServiceProvider","getFormDescription","getPOC","getPOCName","serviceCategoryRef","applianceIdRef","serviceProviderRef","serviceTypeRef","descriptionRef","serviceDateRef","pocRef","pocNameRef","tenantProperty","toISOString","clickSubmitButton","currentArchivedButtonText","textDecorationLine","currentButtonStyle","archivedButtonStyle","selectedLeftThirdButton","selectedMiddleThirdButton","selectedRightThirdButton","unselectedLeftThirdButton","unselectedMiddleThirdButton","unselectedRightThirdButton","underline","initialRadioState","currentRequestsSelected","requestSelected","serviceRequests","waitingApproval","completed","canceled","declined","filterTabbedObjects","unfilteredServiceRequests","requestStatus","sr","ServiceRequestScreenBase","onPressInactiveRequests","onPressActiveRequests","onPressPendingRequests","onPressScheduledRequests","onPressInProgressRequests","onPressCompletedRequests","onPressCanceledRequests","onPressDeclinedRequests","openServiceRequestModal","callFetchServiceRequests","populateServiceRequests","countServiceRequestStatus","renderCompletionStatusRadioButton","renderActiveStatusRadioButton","renderInactiveStatusRadioButton","renderServiceRequests","renderFilteredServiceRequests","renderFilteredServiceRequestsWaitingApproval","renderFilteredServiceRequestsSubtitles","render","Current","parentCallBack2","Archived","Completed","Canceled","Declined","appFixed","serviceCompany","WaitingApproval","requestsSelected","leftThirdButtonStyle","middleThirdButtonStyle","rightThirdButtonStyle","filtered","renderActive","renderInactive","filteredServiceRequests","printActive","printInactive","childData2","ServiceRequestPage","serviceRequestsState","NewRequestPage","pageTitle","SceneHeader","buttonTitle","onButtonPress","AddServiceProviderModal","PreferredProviderModal","flatListTileContainer","PreferredProviderFlatList","preferredProviders","currentPage","ServiceRequestNavigation","shouldRender","renderTiles","tiles","tile","prepareRenderTiles","renderProperTile","renderProviderTiles","horizontal","MIN_PALLET","viewStyle","withSceneHeader","Page","withScrollView","ReduxComponent","onPressButton","onNavButtonClick","onSetNavHeaderGoBackButton","onCloseNavHeaderMenu","renderChosenView","isSet","WithSceneHeaderComponent","withHeaderUpdate","page","withRef","UpdateHeaderComponent","propertySceneParams","doesButtonUseNavigate","sceneParam","newRequestSceneParam","DetailedProperty","Properties","TenantProperty","ServiceRequest","NewRequest","Account","marginRight","HamburgerButton","colorScheme","homePairsTitleContainer","homePairsTitleContainerNavSet","homePairsTitle","HomePairsHeaderTitle","containerDropDown","menuText","menuSelectedText","selectable","HomePairsMenu","navigatePages","setSelected","closeMenu","buttonFormat","displayCorrectMenu","MainAppStackManager","first","setAuthenticatedState","auth","titleBackContainer","goBackSymbol","goBackButton","goBackButtonEnd","hamburgerContainer","dropDownFlexDirection","navBarFlexDirection","HeaderNavigators","HomePairsHeaderBase","handleChange","changePage","renderHamburger","onSwitchNavBar","removeEventListener","onUpdateSelected","onToggleMenu","onClickBackButton","onLogOut","onShowGoBackbutton","switchNavBar","loadingCardContents","LoadingModal","ActivityIndicator","barStyle","LoggingInModal","CreatingAccountModal","preferredProviderStrings","PreferredProvidertModalBase","submitButton","clickRemoveButton","subContainer","modalContainer","MAX_PALLET","cardTitleContainer","detailText","horizontalLine","payRateContainer","fontWeight","companyImage","tileContainer","servicePhoneNum","preferredProvider","onRemoveServiceProvider","dateFounded","toDateString","showsHorizontalScrollIndicator","renderHeader","DetailedPropertyDispatchProps","DetailedPropertyMutatorModal","SmartComponent","editTenantButtonStyle","editTenantButtonTextStyle","removeTenantButtonStyle","removeTenantButtonTextStyle","editButtonContainerStyle","removeButtonContainerStyle","goBackToPreviousPage","currentTenant","newTenantInfo","generateNewTenantInfo","postValues","inputFormProp","renderThinButtons","buttonContainerStyle","addPropertyStrings","inputFormStrings","AddNewPropertyModalBase","getFormNumBed","getFormNumBath","getFormMaxTenants","bedRef","bathRef","tenantRef","onCreateProperty","Number","newProp","postNewProperty","editPropertyStrings","EditNewPropertyModalBase","oldProp","onEditProperty","postUpdatedProperty","EditPropertyModalBase","addApplianceStrings","menuStyle","getFormName","getFormManufacturer","getFormModelNum","getFormSerialNum","getFormLocation","categoryRef","nameRef","manufacturerRef","modelNumRef","serialNumRef","locationRef","editApplianceStrings","DefaultMessage","oldAppliance","appNameRef","updateAppliance","primaryErrorMessage","addServiceProviderStrings","AddServiceProviderModalBase","resetForm","getFormPhoneNum","phoneNumRef","show","onAddServiceProvider","validatePhoneNumber","postPreferredProvider","delete","deletePreferredProvider","ServiceRequestModalBase","acceptButton","denyButton","buttonsContainer","routeContainer","left","withNavHeader","withScrollTop","ScrollComponent","scrollTo","withModal","ModalComponent","ScrollableComponent","useHistory","PrivateRoute","rest","useLocation","to","from","LoginModal","RegisterModal","AddPropertyModal","AddNewPropertyModal","EditPropertyReadyModal","EditPropertyModal","AddApplianceReadyModal","AddApplianceModal","EditApplianceReadyModal","EditApplianceModal","AddTenantReadyModal","AddTenantModal","EditTenantReadyModal","EditTenantModal","AddServiceProviderReadyModal","PreferredProviderReadyModal","ServiceRequestInfoReadyModal","ServiceRequestModal","NavPropertyList","NavDetailedProperty","NavTenantProperty","NavAccountPage","NavServiceRequest","NavNewRequestPage","LoginModalSwitch","path","exact","SignUpModalSwitch","RoopairsLoginModalSwitch","TenantAccountPropertySwitch","matches","AccountSettingsSwitch","ServiceRequestSwitch","SERVICE_REQUEST_INFO_MODAL","PREFERRED_PROVIDER_MODAL","SinglePropertySwitch","EDIT_PROPERTY_MODAL","ADD_TENANT_MODAL","EDIT_TENANT_MODAL","ADD_APPLIANCE_MODAL","EDIT_APPLIANCE_MODAL","PropertiesSwitch","previousPagesStack","menu","isDarkModeActive","areNotificationsActive","arrayToDictionary","newDict","removeKey","updatedServiceProviders","rootReducer","combineReducers","action","newState","updatePropId","updatedPropertyDict","modalOpen","authenticated","newServiceProviders","updatedProviders","persistConfig","storage","blacklist","persistedReducer","persistReducer","checkSession","Font","ConnectedApp","basename","process","App","dataLoaded","setDataLoaded","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","initializeStore","setItem","apikey","loading","AppLoading","startAsync","onFinish","registerRootComponent"],"mappings":"oHAEI,kBAAmBA,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,8BAA+B,CAAEC,MAAO,UACjDC,MAAK,SAASC,OAGdC,OAAM,SAASC,GACdC,QAAQH,KAAK,oCAAqCE,U,oBCV1DE,EAAOC,QAAU,IAA0B,4B,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,2B,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,gC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,6B,oBCA3CD,EAAOC,QAAU,IAA0B,4B,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,8B,oBCA3CD,EAAOC,QAAU,IAA0B,+B,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3C,IAAIC,EAAM,CACT,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,gBAAiB,IACjB,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,U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","file":"static/js/app.83a96222.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/2.0/expo-service-worker.js', { scope: '/2.0/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/Nunito-Black.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-BlackItalic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-Bold.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-BoldItalic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-ExtraBold.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-ExtraBoldItalic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-ExtraLight.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-ExtraLightItalic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-Italic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-Light.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-LightItalic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-SemiBold.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Nunito-SemiBoldItalic.ttf\";","module.exports = __webpack_public_path__ + \"static/media/blender.d948a69f.png\";","module.exports = __webpack_public_path__ + \"static/media/bolt.f645d3ed.png\";","module.exports = __webpack_public_path__ + \"static/media/calendar.15f6ce85.png\";","module.exports = __webpack_public_path__ + \"static/media/clock.7bb411a8.png\";","module.exports = __webpack_public_path__ + \"static/media/defaultProperty.b0627cef.png\";","module.exports = __webpack_public_path__ + \"static/media/downArrow.e6b2927c.png\";","module.exports = __webpack_public_path__ + \"static/media/fan.65dbc9ae.png\";","module.exports = __webpack_public_path__ + \"static/media/hamburger.81c42269.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.f82b34f9.png\";","module.exports = __webpack_public_path__ + \"static/media/roopairsLogo.6fb8ba21.png\";","module.exports = __webpack_public_path__ + \"static/media/splash.f4d2d347.png\";","module.exports = __webpack_public_path__ + \"static/media/testLogo.20c70117.png\";","module.exports = __webpack_public_path__ + \"static/media/tint.fbd4656d.png\";","module.exports = __webpack_public_path__ + \"static/media/trash.ff197dc9.png\";","module.exports = __webpack_public_path__ + \"static/media/upArrow.b8d8110c.png\";","module.exports = __webpack_public_path__ + \"static/media/servprov.2cfe8025.png\";","var map = {\n\t\"./af\": 348,\n\t\"./af.js\": 348,\n\t\"./ar\": 349,\n\t\"./ar-dz\": 350,\n\t\"./ar-dz.js\": 350,\n\t\"./ar-kw\": 351,\n\t\"./ar-kw.js\": 351,\n\t\"./ar-ly\": 352,\n\t\"./ar-ly.js\": 352,\n\t\"./ar-ma\": 353,\n\t\"./ar-ma.js\": 353,\n\t\"./ar-sa\": 354,\n\t\"./ar-sa.js\": 354,\n\t\"./ar-tn\": 355,\n\t\"./ar-tn.js\": 355,\n\t\"./ar.js\": 349,\n\t\"./az\": 356,\n\t\"./az.js\": 356,\n\t\"./be\": 357,\n\t\"./be.js\": 357,\n\t\"./bg\": 358,\n\t\"./bg.js\": 358,\n\t\"./bm\": 359,\n\t\"./bm.js\": 359,\n\t\"./bn\": 360,\n\t\"./bn.js\": 360,\n\t\"./bo\": 361,\n\t\"./bo.js\": 361,\n\t\"./br\": 362,\n\t\"./br.js\": 362,\n\t\"./bs\": 363,\n\t\"./bs.js\": 363,\n\t\"./ca\": 364,\n\t\"./ca.js\": 364,\n\t\"./cs\": 365,\n\t\"./cs.js\": 365,\n\t\"./cv\": 366,\n\t\"./cv.js\": 366,\n\t\"./cy\": 367,\n\t\"./cy.js\": 367,\n\t\"./da\": 368,\n\t\"./da.js\": 368,\n\t\"./de\": 369,\n\t\"./de-at\": 370,\n\t\"./de-at.js\": 370,\n\t\"./de-ch\": 371,\n\t\"./de-ch.js\": 371,\n\t\"./de.js\": 369,\n\t\"./dv\": 372,\n\t\"./dv.js\": 372,\n\t\"./el\": 373,\n\t\"./el.js\": 373,\n\t\"./en-SG\": 374,\n\t\"./en-SG.js\": 374,\n\t\"./en-au\": 375,\n\t\"./en-au.js\": 375,\n\t\"./en-ca\": 376,\n\t\"./en-ca.js\": 376,\n\t\"./en-gb\": 377,\n\t\"./en-gb.js\": 377,\n\t\"./en-ie\": 378,\n\t\"./en-ie.js\": 378,\n\t\"./en-il\": 379,\n\t\"./en-il.js\": 379,\n\t\"./en-nz\": 380,\n\t\"./en-nz.js\": 380,\n\t\"./eo\": 381,\n\t\"./eo.js\": 381,\n\t\"./es\": 382,\n\t\"./es-do\": 383,\n\t\"./es-do.js\": 383,\n\t\"./es-us\": 384,\n\t\"./es-us.js\": 384,\n\t\"./es.js\": 382,\n\t\"./et\": 385,\n\t\"./et.js\": 385,\n\t\"./eu\": 386,\n\t\"./eu.js\": 386,\n\t\"./fa\": 387,\n\t\"./fa.js\": 387,\n\t\"./fi\": 388,\n\t\"./fi.js\": 388,\n\t\"./fo\": 389,\n\t\"./fo.js\": 389,\n\t\"./fr\": 390,\n\t\"./fr-ca\": 391,\n\t\"./fr-ca.js\": 391,\n\t\"./fr-ch\": 392,\n\t\"./fr-ch.js\": 392,\n\t\"./fr.js\": 390,\n\t\"./fy\": 393,\n\t\"./fy.js\": 393,\n\t\"./ga\": 394,\n\t\"./ga.js\": 394,\n\t\"./gd\": 395,\n\t\"./gd.js\": 395,\n\t\"./gl\": 396,\n\t\"./gl.js\": 396,\n\t\"./gom-latn\": 397,\n\t\"./gom-latn.js\": 397,\n\t\"./gu\": 398,\n\t\"./gu.js\": 398,\n\t\"./he\": 399,\n\t\"./he.js\": 399,\n\t\"./hi\": 400,\n\t\"./hi.js\": 400,\n\t\"./hr\": 401,\n\t\"./hr.js\": 401,\n\t\"./hu\": 402,\n\t\"./hu.js\": 402,\n\t\"./hy-am\": 403,\n\t\"./hy-am.js\": 403,\n\t\"./id\": 404,\n\t\"./id.js\": 404,\n\t\"./is\": 405,\n\t\"./is.js\": 405,\n\t\"./it\": 406,\n\t\"./it-ch\": 407,\n\t\"./it-ch.js\": 407,\n\t\"./it.js\": 406,\n\t\"./ja\": 408,\n\t\"./ja.js\": 408,\n\t\"./jv\": 409,\n\t\"./jv.js\": 409,\n\t\"./ka\": 410,\n\t\"./ka.js\": 410,\n\t\"./kk\": 411,\n\t\"./kk.js\": 411,\n\t\"./km\": 412,\n\t\"./km.js\": 412,\n\t\"./kn\": 413,\n\t\"./kn.js\": 413,\n\t\"./ko\": 414,\n\t\"./ko.js\": 414,\n\t\"./ku\": 415,\n\t\"./ku.js\": 415,\n\t\"./ky\": 416,\n\t\"./ky.js\": 416,\n\t\"./lb\": 417,\n\t\"./lb.js\": 417,\n\t\"./lo\": 418,\n\t\"./lo.js\": 418,\n\t\"./lt\": 419,\n\t\"./lt.js\": 419,\n\t\"./lv\": 420,\n\t\"./lv.js\": 420,\n\t\"./me\": 421,\n\t\"./me.js\": 421,\n\t\"./mi\": 422,\n\t\"./mi.js\": 422,\n\t\"./mk\": 423,\n\t\"./mk.js\": 423,\n\t\"./ml\": 424,\n\t\"./ml.js\": 424,\n\t\"./mn\": 425,\n\t\"./mn.js\": 425,\n\t\"./mr\": 426,\n\t\"./mr.js\": 426,\n\t\"./ms\": 427,\n\t\"./ms-my\": 428,\n\t\"./ms-my.js\": 428,\n\t\"./ms.js\": 427,\n\t\"./mt\": 429,\n\t\"./mt.js\": 429,\n\t\"./my\": 430,\n\t\"./my.js\": 430,\n\t\"./nb\": 431,\n\t\"./nb.js\": 431,\n\t\"./ne\": 432,\n\t\"./ne.js\": 432,\n\t\"./nl\": 433,\n\t\"./nl-be\": 434,\n\t\"./nl-be.js\": 434,\n\t\"./nl.js\": 433,\n\t\"./nn\": 435,\n\t\"./nn.js\": 435,\n\t\"./pa-in\": 436,\n\t\"./pa-in.js\": 436,\n\t\"./pl\": 437,\n\t\"./pl.js\": 437,\n\t\"./pt\": 438,\n\t\"./pt-br\": 439,\n\t\"./pt-br.js\": 439,\n\t\"./pt.js\": 438,\n\t\"./ro\": 440,\n\t\"./ro.js\": 440,\n\t\"./ru\": 441,\n\t\"./ru.js\": 441,\n\t\"./sd\": 442,\n\t\"./sd.js\": 442,\n\t\"./se\": 443,\n\t\"./se.js\": 443,\n\t\"./si\": 444,\n\t\"./si.js\": 444,\n\t\"./sk\": 445,\n\t\"./sk.js\": 445,\n\t\"./sl\": 446,\n\t\"./sl.js\": 446,\n\t\"./sq\": 447,\n\t\"./sq.js\": 447,\n\t\"./sr\": 448,\n\t\"./sr-cyrl\": 449,\n\t\"./sr-cyrl.js\": 449,\n\t\"./sr.js\": 448,\n\t\"./ss\": 450,\n\t\"./ss.js\": 450,\n\t\"./sv\": 451,\n\t\"./sv.js\": 451,\n\t\"./sw\": 452,\n\t\"./sw.js\": 452,\n\t\"./ta\": 453,\n\t\"./ta.js\": 453,\n\t\"./te\": 454,\n\t\"./te.js\": 454,\n\t\"./tet\": 455,\n\t\"./tet.js\": 455,\n\t\"./tg\": 456,\n\t\"./tg.js\": 456,\n\t\"./th\": 457,\n\t\"./th.js\": 457,\n\t\"./tl-ph\": 458,\n\t\"./tl-ph.js\": 458,\n\t\"./tlh\": 459,\n\t\"./tlh.js\": 459,\n\t\"./tr\": 460,\n\t\"./tr.js\": 460,\n\t\"./tzl\": 461,\n\t\"./tzl.js\": 461,\n\t\"./tzm\": 462,\n\t\"./tzm-latn\": 463,\n\t\"./tzm-latn.js\": 463,\n\t\"./tzm.js\": 462,\n\t\"./ug-cn\": 464,\n\t\"./ug-cn.js\": 464,\n\t\"./uk\": 465,\n\t\"./uk.js\": 465,\n\t\"./ur\": 466,\n\t\"./ur.js\": 466,\n\t\"./uz\": 467,\n\t\"./uz-latn\": 468,\n\t\"./uz-latn.js\": 468,\n\t\"./uz.js\": 467,\n\t\"./vi\": 469,\n\t\"./vi.js\": 469,\n\t\"./x-pseudo\": 470,\n\t\"./x-pseudo.js\": 470,\n\t\"./yo\": 471,\n\t\"./yo.js\": 471,\n\t\"./zh-cn\": 472,\n\t\"./zh-cn.js\": 472,\n\t\"./zh-hk\": 473,\n\t\"./zh-hk.js\": 473,\n\t\"./zh-tw\": 474,\n\t\"./zh-tw.js\": 474\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 815;","import * as Font from 'expo-font';\n\n/** \n * NOTICE: We are required to call the loadAsync multiple times. This is due to a bug in how non-Chrome \n * web browsers appear to call this async function. If more than one asset is loaded, the function \n * never does completed. Therefore, this is a hack-around for the problem. \n * \n * I may report this issue to expo.\n*/\nexport const LoadFonts = async () => {\n\tawait Font.loadAsync({\n\t\t'nunito-black': require('./assets/fonts/Nunito-Black.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-blackitalic': require('./assets/fonts/Nunito-BlackItalic.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-bold': require('./assets/fonts/Nunito-Bold.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-bolditalic': require('./assets/fonts/Nunito-BoldItalic.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-extrabold': require('./assets/fonts/Nunito-ExtraBold.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-extrabolditalic': require('./assets/fonts/Nunito-ExtraBoldItalic.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-extralight': require('./assets/fonts/Nunito-ExtraLight.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-extralightitalic': require('./assets/fonts/Nunito-ExtraLightItalic.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-italic': require('./assets/fonts/Nunito-Italic.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-light': require('./assets/fonts/Nunito-Light.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-lightitalic': require('./assets/fonts/Nunito-LightItalic.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-regular': require('./assets/fonts/Nunito-Regular.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-semibold': require('./assets/fonts/Nunito-SemiBold.ttf')\n\t});\n\tawait Font.loadAsync({\n\t\t'nunito-semibolditalic': require('./assets/fonts/Nunito-SemiBoldItalic.ttf')\n\t});\n}\n\nexport const HomePairFonts = {\n\tnunito_black: 'nunito-black',\n\tnunito_blackitalic: 'nunito-blackitalic',\n\tnunito_bold: 'nunito-bold',\n\tnunito_bolditalic: 'nunito-bolditalic',\n\tnunito_extrabold: 'nunito-extrabold',\n\tnunito_extrabolditalic: 'nunito-extrabolditalic',\n\tnunito_extralight: 'nunito-extralight',\n\tnunito_extralightitalic: 'nunito-extralightitalic',\n\tnunito_italic: 'nunito-italic',\n\tnunito_light: 'nunito-light',\n\tnunito_lightitalic: 'nunito-lightitalic',\n\tnunito_regular: 'nunito-regular',\n\tnunito_semibold: 'nunito-semibold',\n\tnunito_semibolditalic: 'nunito-semibolditalic'\n};\n","const BaseURL = `https://homepairs-mytest.herokuapp.com/`;\n\nexport const HOMEPAIRS_LOGIN_ENDPOINT = `${BaseURL}login/`;\nexport const HOMEPAIRS_REGISTER_TENANT_ENDPOINT = `${BaseURL}tenant/register/`;\nexport const HOMEPAIRS_REGISTER_PM_ENDPOINT = `${BaseURL}pm/register/`;\nexport const HOMEPAIRS_PROPERTY_ENDPOINT = `${BaseURL}property/`;\nexport const HOMEPAIRS_APPLIANCE_ENDPOINT = `${BaseURL}appliances/`;\nexport const HOMEPAIRS_TENANT_EDIT_ENDPOINT = `${BaseURL}tenant/update/`;\nexport const HOMEPAIRS_SERVICEPROVIDER_GET_ENDPOINT = `${BaseURL}serviceprovider/`;\nexport const HOMEPAIRS_SERVICE_REQUEST_ENDPOINT = `${BaseURL}servicerequest/`;\nexport const HOMEPAIRS_PREFERRED_PROVIDER_ENDPOINT = `${BaseURL}serviceprovider/prefprov/`;\nexport const GOOGLE_API_KEY = `${BaseURL}apikey/`;\n","/* eslint-disable no-useless-escape */\n/* eslint-disable no-control-regex */\n\n/**\n * -------------------------------------------------\n * Phone Number Verfication\n * -------------------------------------------------\n * @param {string} phone \n * \n * Test to see if the string is in the a valid telephone \n * number format. This is global and not specific to the US\n * \n * Valid formats:\n * (123) 456-7890\n * (123)456-7890\n * 123-456-7890\n * 123.456.7890\n * 1234567890\n * +31636363634\n * 075-63546725\n */\nexport function isPhoneNumberValid(phone:string){\n    const expression = new RegExp(/^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im);\n    return expression.test(phone);\n}\n\n/**\n * -------------------------------------------------\n * Password Verification\n * -------------------------------------------------\n * @param {string} input \n * Test to see if the string fulfils password constraints. \n * Passwords for homepairs only be alphanumeric with some special characters and they are \n * between 6 and 50 characters long. This is subject to change in the future\n */\nexport function isPasswordValid(input:string) : boolean {\n    const reg = new RegExp(\"^([a-zA-Z0-9!@#$%^&*\\-]{6,32})$\");\n    return reg.test(input);\n}\n\n/**\n * -------------------------------------------------\n * isEmptyString\n * -------------------------------------------------\n * @param {string} str\n * Test to see if the string has no visible characters. \n * Strings of empty spaces characters, tabs, and strings \n * with not values all fall under this category\n * \n */\nexport function isEmptyOrSpaces(str:string) : boolean {\n    const expr = /^\\s*$/ ;\n    return expr.test(str);\n}\n\n\n/**\n * -------------------------------------------------\n * isPositiveWholeNumber\n * -------------------------------------------------\n * @param {string} str\n * Test to see if the string is a string of digits. \n * Returns a boolean based on the results\n * \n */\nexport function isPositiveWholeNumber(str: string) : boolean {\n    const expr = /^[0-9]*$/;\n    return expr.test(str);\n}\n\n/**\n * -------------------------------------------------\n * Email Syntax Valid \n * -------------------------------------------------\n * @param {string} email \n * Returns a boolean dependant of whether a string matches the \n * valid email format. \n * \n * Examples: \n * aaa@gmail.com \n * 394;0@gmail.com\n * jimBrown@hotmail.live.com\n * \n */\nexport function isEmailSyntaxValid(email: string) : Boolean {\n    // how to work with strings in JS https://www.digitalocean.com/community/tutorials/how-to-work-with-strings-in-javascript\n    const expression = /(?!.*\\.{2})^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i;\n    return expression.test(email);\n}\n\n/**\n * -------------------------------------------------\n * Alpha Character Verification \n * -------------------------------------------------\n * @param {string} input\n * Test to see if the string is on contains alphabetical characters \n * \n */\nexport function isAlphaCharacterOnly(input: string){\n    const expression = /^[A-Za-z]+$/;\n    return expression.test(input.toString());\n}","/**\n * ------------------------------------------------------------\n * Is Null or Undefined \n * ------------------------------------------------------------\n * @param any\n * Takes in a single argument and returns if that have has been \n * assigned null or has been undefined. \n */\nexport function isNullOrUndefined(arg: any): boolean {\n    return typeof arg === 'undefined' || arg == null;\n}\n\n/** \n * ------------------------------------------------------------\n * Parameter Checkers\n * ------------------------------------------------------------\n * These functions are intended to be helper functions for the \n * use of comparison operations.  \n * \n * Methods:\n *      isNullOrUndefined( arg: any ) => boolean \n*/\nconst ParameterCheckers = {isNullOrUndefined};\nexport default ParameterCheckers;","\nimport { isNullOrUndefined } from './ParameterChecker';\n\n/**\n * ----------------------------------------------------\n * convertObjectValuesToArray\n * ----------------------------------------------------\n * Converts an object into a list of its values. It removes the \n * key from each pair. \n * @param {[key: string] : any} dict -The object to remove the \n * keys from and make a list out of.\n */\nexport function convertObjectValuesToArray<T>(dict: {[val:string] : T}) : T[]{\n  const arrayVals: T[] = Object.entries(dict).map(([,value]) => {\n    return value;\n  });\n  return arrayVals.length === 0 ? [] : arrayVals;\n}\n\n/**\n * ----------------------------------------------------\n * nested Filter\n * ----------------------------------------------------\n * Helper function used to search within nested objects. \n * @param {string} search - The parameter used to filter indicate if a object contains something with the substring\n * @param {any} item - The object to compare to. If it is an object, recursively call this function \n * but if it is a primitive, convert it into a string and compare. \n */\nfunction nestedFilter(search: string, item : any) : boolean {\n  // Check if the value is an object\n  const isObject : boolean = typeof item === 'object' && item !== null;\n  let foundMatch : boolean = false;\n\n  if(isObject){\n    // If the item is an object, get all its key value pairs\n    const itemArray : any[] = Object.entries(item);\n    // Iterate through each item and return if the result has been passed \n    for(let i: number = 0; i < itemArray.length; i++){\n      const [, value] = itemArray[i];\n      foundMatch = nestedFilter(search, value);\n      if(foundMatch){\n        // Break from the loop and return true for the entire function\n        break;\n      }\n    }\n  }else if (!isNullOrUndefined(item)){\n    // Otherwise the object may be null or a primitive. Check to see if it matches the search condition\n    foundMatch = item.toString().includes(search.trim());\n  }\n  return foundMatch;\n}\n\n/**\n * ----------------------------------------------------\n * filterList \n * ----------------------------------------------------\n * Takes in an array of any type and returns a list of items in the array \n * that match the search parameter. This function will search for the specified keys \n * in an object defined by the keys parameter. If keys is not defined, the function will \n * recursively go through key objects in the list.  \n * @param {string} search - The parameter used to filter values from the result. \n * @param {T[]} list - This list of objects to filter from. Consider this the original list \n * @param {string[]} keys - Optional parameter that limits to search to specified keys within object of T, this does \n * NOT support searching for specific keys within nested objects.\n */\nexport function filterList<T>(search: string, list: T[], keys?: string[]) : T[]{\n  const originalList : T[] = list;\n  let newList: T[] = [];\n\n  // Case 1: Keys is undefined, null, or empty then simply pass the original list and conduct a nested search\n  if(isNullOrUndefined(keys) || keys.length === 0){\n    newList = originalList.filter((item) => nestedFilter(search, item));\n  }\n  // Case 2: Keys is defined or null, all key,value pairs that match the search criteria \n  else {\n    // Loop through entire list of potential items \n    originalList.forEach(item => {\n      // Only check if the keys per item matches, the nestedFilter object should take care of this\n      let isMatched : boolean = false;\n      for(let i: number = 0; i < keys.length; i++){\n        const key: string = keys[i];\n        isMatched = nestedFilter(search, item[key]);\n        if(isMatched){\n          break;\n        }\n      };\n      // If a match is found, add it to the results\n      if(isMatched)\n        newList.push(item);  \n    });\n  }\n  \n  return newList;\n}\n\n\n","import { Dimensions } from 'react-native';\nimport { NavigationSwitchProp } from 'react-navigation';\nimport { NavigationStackProp } from 'react-navigation-stack';\n\n\n/* *-------------------Appliances-------------------* */\n\nexport enum ApplianceType {\n    Plumbing, LightingAndElectric, HVAC, GeneralAppliance, None\n};\n\nexport type Appliance = {\n    applianceId: string,\n    category: ApplianceType,\n    appName: string,\n    manufacturer: string, \n    modelNum: number, \n    serialNum: number, \n    location: string,\n};\n\n/* *-------------------Appliances-------------------* */\n\n/* *-------------------Property Types-------------------* */\n\nexport type TenantInfo = {\n    firstName: string,\n    lastName: string,\n    email: string,\n    phoneNumber: string,\n}\n\nexport type Property = {\n    propId: string, \n    address: string, \n    tenants: number,\n    bedrooms: number,\n    bathrooms: number,\n}\n\n/**\n * A type alias that defines a property with a string attached. This is intended \n * to be its propId\n */\nexport type PropertyDict = {[propId:string]:Property}\n\nexport type PropertyListState = \n{\n    selectedPropertyId: string, \n    properties: PropertyDict,\n    appliances: Appliance[],\n    tenants: TenantInfo[],\n    propertyManager?: Contact,\n};\n\nexport type AddPropertyAction = {\n    type: string;\n    userData: Property;\n};\n\nexport type AddApplianceAction = {\n    type: string;\n    userData: Appliance;\n};\n\nexport type UpdateApplianceAction = {\n    type: string;\n    propId: string;\n    userData: Appliance;\n};\n\nexport type SetSelectedPropertyAction = {\n    type: string;\n    propId: string;\n};\nexport type UpdatePropertyAction = {\n    type: string;\n    propId: string;\n    userData: Property;\n};\nexport type RemovePropertyAction = {\n    type: string;\n    propId: string;\n};\nexport type FetchPropertyAction = {\n    type: string;\n    property: PropertyDict;\n};\n/* fetch the property along with the property manager that owns a given property (used for tenant login to fill PrimaryContactInfo) */\nexport type FetchPropertyAndPropertyManagerAction = {\n    type: string;\n    property: PropertyDict;\n    propertyManager: Contact;\n};\nexport type FetchPropertiesAction = {\n    type: string;\n    properties: PropertyDict;\n};\n\nexport type StorePropertyApplianceAndTenantAction = {\n    type: string,\n    tenants: TenantInfo[],\n    appliances: Appliance[],\n}\n\n/* Union type for the Property Lists. This will be used for the reducer. */\nexport type PropertyListAction =\n    | AddPropertyAction\n    | AddApplianceAction\n    | UpdateApplianceAction\n    | UpdatePropertyAction\n    | RemovePropertyAction\n    | SetSelectedPropertyAction\n    | FetchPropertyAction\n    | FetchPropertiesAction\n    | StorePropertyApplianceAndTenantAction;\n/* *-------------------Property Types-------------------* */\n\n\n/* *-------------------Account Types-------------------* */\n\nexport enum AccountTypes {\n    Tenant = 'tenant',\n    PropertyManager = 'pm'\n}\n\nexport type Account = {\n    accountType: AccountTypes;\n    firstName: string;\n    lastName: string;\n    email: string;\n    pmId: number;\n};\n\nexport type PropertyManagerAccount = Account & {\n    roopairsToken: string;\n};\n\nexport type TenantAccount = Account & {\n    address: string;\n    phoneNumber: string;\n    propId: number;\n};\n\nexport type AccountState = PropertyManagerAccount | TenantAccount;\n\nexport type FetchUserAccountAction = {\n    type: string;\n    username: string;\n    password: string;\n};\n\nexport type FetchUserAccountProfileAction = {\n    type: string;\n    profile: AccountState;\n};\n\nexport type AccountStateAction =\n    | FetchUserAccountProfileAction\n    | FetchUserAccountProfileAction;\n\nexport type Contact = {\n    accountType: AccountTypes;\n    firstName: string;\n    lastName: string;\n    email: string;\n    pmId?: string;\n}\n/* *-------------------Account Types-------------------* */\n\n/* *-------------------Service Types-------------------* */\n\nexport type ServiceRequest = {\n    reqId: number,\n    address: string, \n    technician?: string, \n    startDate: string, \n    poc?: string, \n    pocName?: string, \n    companyName: string, \n    details: string, \n    appliance: Appliance, \n    status: ServiceRequestStatus\n};\n\nexport type NewServiceRequest = {\n    token: string, \n    propId: string, \n    appId: string, \n    providerId?: number, \n    serviceType: string,\n    serviceCategory: string, \n    serviceDate: string, \n    details: string,\n\n    /**\n     * Id for when tenant makes a service request \n     */\n    phoneNumber: string,\n    \n    poc: string, \n    pocName: string,\n}\n\nexport type ServiceProvider = {\n    provId: number,\n    prefId?: string, // Optional param if preferred service provider\n    name: string,\n    email: string,\n    address: string,\n    phoneNum: string,\n    contractLic: string, // contract license\n    skills: string,\n    founded: string, // date founded\n    payRate: number, // amount per hour \n    timesHired: number, \n    earliestHire?: Date, // date of first job completed\n    logo?: string, // optional image uri\n};\n\nexport enum ServiceRequestCompletionStatus {\n    Current = 'Current',\n    Archived = 'Archived',\n}\n\nexport enum ServiceRequestStatusEnums {\n    WaitingApproval = 'WaitingApproval',\n    Pending = 'Pending',\n    Scheduled = 'Scheduled',\n    InProgress = 'InProgress',\n    Completed = 'Completed',\n    Canceled = 'Canceled',\n    Declined = 'Declined'\n}\n\nexport type ServiceRequestStatus = ServiceRequestStatusEnums;\n\nexport type ServiceState = {\n    serviceRequests: ServiceRequest[],\n}\n\nexport type RequestServiceAction = {\n    type: string;\n    request: ServiceRequest;\n};\n\nexport type AcceptServiceAction = {\n    type: string;\n    request: ServiceRequest;\n};\n\nexport type DenyServiceAction = {\n    type: string;\n    request: ServiceRequest;\n};\n\nexport type CancelServiceAction = {\n    type: string;\n    service: ServiceRequest;\n};\n\nexport type CompleteServiceAction = {\n    type: string;\n    service: ServiceRequest;\n};\n\nexport type ServiceAction =\n    | RequestServiceAction\n    | CompleteServiceAction\n    | AcceptServiceAction\n    | DenyServiceAction\n    | CancelServiceAction;\n\n/* *-------------------Service Types-------------------* */\n\n/* *-------------------Preferred Service Provider Types-------------------* */\nexport type ProviderDictionary = {[phoneNum : string] : ServiceProvider}\n\nexport type RefreshServiceProvidersAction = {\n    type: string;\n    preferredServiceProviders: ServiceProvider[];\n}\n\nexport type RemoveServiceProviderAction = {\n    type: string;\n    serviceProvider: ServiceProvider;\n}\n\nexport type PreferredServiceProviderAction = \n    | RefreshServiceProvidersAction\n    | RemoveServiceProviderAction;\n\n\nexport type PreferredServiceProviderState = {\n    serviceProviders: { [phoneNum:string] : ServiceProvider}\n}\n/* *-------------------Preferred Service Provider Types-------------------* */\n\n\n\n/* *-------------------Header Types-------------------* */\nexport type MainAppStackType = {\n    /**\n     * Text that will be presented in the header\n     */\n    title: string;\n\n    /**\n     * Value that allows the navigator to navigate to this page if \n     * a collection of these pages were to be stored.\n     */\n    navigate: string;\n\n    /**\n     * Name of the button in the header. If none is defined, a button will not \n     * be rendered.\n     */\n    button?: string;\n\n    /**\n     * Callback method for when the button is clicked. This callback is intended for \n     * page navigation when the button is clicked as opposed to revealing a modal. \n     * To override modal visibility, set the doesButtonUseNavigate prop to true\n     */\n    onNavButtonClick?: (arg0?: any) => any;\n\n    /**\n     * Value that indicates to the page that a defined button should use onNavButtonClick\n     * instead of onChangeModalVisibility\n     */\n    doesButtonUseNavigate?: boolean;\n};\n\nexport type Header = {\n    showMenu: boolean;\n    isDropDown: boolean;\n    currentPage: MainAppStackType;\n    previousPagesStack: MainAppStackType[];\n    showBackButton: boolean;\n    menu: string[];\n};\n\nexport type HeaderState = Header;\n\nexport type ToggleMenuAction = {\n    type: string;\n    showMenu: boolean;\n};\n\nexport type SwitchDropDownNavBarAction = {\n    type: string;\n    isDropDown: boolean;\n};\n\nexport type ShowGoBackOnButtonClick = {\n    type: string;\n    showBackButton: boolean;\n};\n\nexport type UpdateSelectedPageAction = {\n    type: string;\n    selected: MainAppStackType;\n};\n\nexport type OnGoBackAction = {\n    type: string;\n};\n\nexport type HeaderAction =\n    | ToggleMenuAction\n    | SwitchDropDownNavBarAction\n    | ShowGoBackOnButtonClick\n    | UpdateSelectedPageAction\n    | OnGoBackAction;\n/* *-------------------Header Types-------------------* */\n\n/* *-------------------Setting Types-------------------* */\nexport type ConfigurationSettings = {\n    areNotificationsActive: boolean;\n    isDarkModeActive: boolean;\n    apiKey: string | null;\n};\n\nexport type SettingsState = ConfigurationSettings;\n\nexport type ToggleNotificationActivationAction = {\n    type: string;\n    areNotificationsActive: boolean;\n};\n\nexport type ToggleDarkModeActivationAction = {\n    type: string;\n    isDarkModeActive: boolean;\n};\n\nexport type AddGoogleApiKeyAction = {\n    type: string;\n    apiKey: string;\n};\n\nexport type SettingsActions = ToggleDarkModeActivationAction &\n    ToggleNotificationActivationAction & AddGoogleApiKeyAction;\n/* *-------------------Setting Types-------------------* */\n\n/* *-------------------SessionTypes-------------------* */\nexport type AuthenticationState = {\n    authed: boolean,\n};\n\nexport type SetAccountAuthenticationStateAction = {\n    type: string;\n    authed: boolean;\n};\n\nexport type SessionAction = SetAccountAuthenticationStateAction;\n/* *-------------------SessionTypes-------------------* */\n\n\n/* *-------------------App State-------------------* */\nexport type AppState = {\n    properties: PropertyListState;\n    accountProfile: AccountState;\n    header: HeaderState;\n    serviceRequests: ServiceState;\n    settings: SettingsState;\n    authenticated: AuthenticationState;\n    preferredProviders: PreferredServiceProviderState;\n    // add future state slices here\n}\n/* *-------------------App State-------------------* */\n\n\n/* *-------------------Misc Types-------------------* */\nexport type NavigationPropType = NavigationSwitchProp | NavigationStackProp\n\nexport type AddNewPropertyState = {\n    email: string;\n    roopairsToken: string;\n}\n\nexport type EditPropertyState = {\n    email: string;\n    propId: string;\n    oldProp: Property;\n    roopairsToken: string;\n}\n\nexport type AddApplianceState = {\n    property: Property;\n    token: string;\n}\n\nexport type EditApplianceState = {\n    oldAppliance: Appliance;\n    // propId: number;d\n}\n\nexport enum HomePairsDimensions {\n    DROP_MENU_WIDTH = 700,\n    MAX_PALLET = 700,\n    MIN_PALLET = 360,\n    MAX_CONTENT_SIZE = 500,\n    MIN_CONTENT_SIZE = 300,\n    MAX_BUTTON_WIDTH = 300,\n    MIN_BUTTON_WIDTH = 200,\n    MIN_PALLET_HEIGHT = Dimensions.get('window').height\n}\n\nenum HOMEPAIRS_ACCOUNT_KEYS {\n    TYPE = 'accountType',\n    PM = 'pm',\n    TENANT = 'tenant',\n    FIRSTNAME = 'firstName',\n    LASTNAME = 'lastName',\n    EMAIL = 'email',\n    PM_ID = 'pmId',\n    PASSWORD = 'password',\n    ADDRESS = 'address',\n    PLACE = 'place',\n    PROPID = 'propId',\n    TENANTID = 'tenantID',\n}\n\nenum HOMEPAIRS_LOGIN_STATUS {\n    SUCCESS = 'success',\n    FAILURE = 'failure',\n}\n\nenum HOMEPAIRS_PROPERTY_KEYS {\n    PROPERTYID = 'propId',\n    ADDRESS = 'streetAddress',\n    TENANTS = 'maxTenants',\n    BEDROOMS = 'numBed',\n    BATHROOMS = 'numBath',\n}\n\nexport enum HomepairsPropertyAttributes {\n    ADDRESS = 'address',\n    TENANTS = 'tenants',\n    BEDROOMS = 'bedrooms',\n    BATHROOMS = 'bathrooms',\n    CITY = 'city',\n    STATE = 'state',\n}\n\nexport const HomePairsResponseKeys = {\n    DATA: 'data',\n    ACCOUNT_KEYS: HOMEPAIRS_ACCOUNT_KEYS,\n    PROPERTIES: 'properties',\n    PROPERTY_KEYS: HOMEPAIRS_PROPERTY_KEYS,\n    ROLE: 'role',\n    ROOPAIRS_TOKEN: 'token',\n    STATUS: 'status',\n    STATUS_RESULTS: HOMEPAIRS_LOGIN_STATUS,\n    ERROR: 'error',\n    ID: 'id',\n    PROPID: 'propId',\n};\n\nexport type DarkModeProperties = {\n    isDarkModeActive?: boolean;\n};\n","const propertyMutationForm = {\n        address: 'ADDRESS',\n        maxTenants: 'MAX TENANTS',\n        bedrooms: 'BEDROOMS',\n        bathrooms: 'BATHROOMS',\n        city: 'CITY',\n        state: 'STATE',\n};\n\nconst strings = {\n    title: 'HomePairs',\n    serviceRequestPage: {\n        title: 'Service Requests',\n        button: 'New Request',\n        tabA: 'View Current Requests',\n        tabB: 'View Archived Requests',\n        tabA1: 'Pending',\n        tabA2: 'Scheduled',\n        tabA3: 'In Progress',\n        tabB1: 'Completed',\n        tabB2: 'Canceled',\n        tabB3: 'Declined',\n    },\n    serviceRequestModal: {\n        title: 'Service Request',\n        status: 'STATUS',\n        address: 'ADDRESS', \n        serviceType: 'SERVICE TYPE',\n        technician: 'ASSIGNED TECHNICIAN', \n        startDate: 'STARTED ON',\n        poc: 'POINT OF CONTACT', \n        details: 'DETAILS', \n        appliance: 'APPLIANCE',\n    },\n    connectAccountPage: {\n        title: 'Account Settings',\n        tokenFailed: 'failure',\n        accountConnected: {\n            accountConnectedCard: {\n                title: 'Account Connected',\n                subtitle:\n                    'Your roopairs account is ready for on-demand service',\n                button: 'Disconnect Account',\n            },\n        },\n        accountNotConnected: {\n            connectAccountCard: {\n                title: 'Connect Roopairs Account',\n                subtitle: 'Connect your roopairs account for on-demand service',\n                button: 'Connect Account',\n            },\n        },\n    },\n    propertiesPage: {\n        title: 'Properties',\n        button: 'Add Property',\n        addProperty: {\n            title: 'Add Property',\n            inputForm: propertyMutationForm,\n            button: 'Add',\n        },\n        viewPropertyCardButton: 'View Property',\n    },\n    detailedPropertyPage: {\n        navigationParams: {\n            propertyIndex: 'propertyIndex',\n        },\n        generalHomeInfo: {\n            button: 'Edit Property',\n            tenants: 'Max Tenants',\n            bedrooms: 'Bedrooms',\n            bathrooms: 'Bathrooms',\n        },\n        editProperty: {\n            title: 'Edit Property',\n            inputForm: propertyMutationForm,\n            button: 'Save',\n        },\n        primaryContact: {\n            title: 'Primary Contact',\n            subtitle: 'Questions about this property? Contact the landlord:',\n            name: 'NAME',\n            email: 'EMAIL',\n            phone: 'PHONE',\n        },\n        serviceRequestCount: {\n            title: 'Service Requests',\n            pending: 'Pending',\n            scheduled: 'Scheduled',\n            inProgress: 'In Progress', \n            button: 'View Requests',\n        },\n    },\n    signInPage: {\n        subtitle: 'Sign in to your Account',\n        inputForms: {\n            email: 'EMAIL',\n            password: 'PASSWORD',\n        },\n        button: 'Sign In',\n        signUpHighlight: 'Sign Up',\n        newUserText: 'New to HomePairs? ',\n        modal: 'Logging In...',\n    },\n    signUpPage: {\n        subtitle: 'Create your account',\n        accountTypeRadioButton: {\n            name: 'ACCOUNT TYPE',\n            tenant: 'Tenant',\n            propertyManager: 'Property Manager',\n        },\n        inputForms: {\n            firstName: 'FIRST NAME',\n            lastName: 'LAST NAME',\n            email: 'EMAIL',\n            phone: 'PHONE NUMBER',\n            password: 'PASSWORD',\n            confirmPassword: 'CONFIRM PASSWORD',\n            address: 'ADDRESS',\n            city: 'CITY',\n            state: 'STATE',\n            companyName: 'COMPANY NAME',\n            maxTenants: 'MAX NUMBER OF TENANTS',\n            numBed: 'NUMBER OF BEDS',\n            numBath: 'NUMBER OF BATHS',\n        },\n        button: 'Sign Up',\n        currentUserText: 'Already have an account? ',\n        signUpHighlight: 'Sign In',\n        modal: 'Signing Up...',\n    },\n    logOut: 'Log Out',\n    applianceInfo: {\n        title: 'Appliances', \n        categories: {\n            HVAC: 'Heating, Ventilation, and AC', \n            PLUMBING: 'Plumbing', \n            GA: 'General Appliance', \n            LE: 'Lighting and Electric',\n        },\n        applianceModal: {\n            addTitle: 'Add Appliance',\n            editTitle: 'Edit Appliance',\n            category: 'CATEGORY', \n            name: 'DISPLAY NAME', \n            manufacturer: 'MANUFACTURER (optional)', \n            modelNum: 'MODEL NUMBER (optional)', \n            serialNum: 'SERIAL NUMBER (optional)', \n            location: 'LOCATION',\n            add: 'Add', \n            editSave: 'Save', \n            \n        },\n        button: {\n            title: 'Add Appliance',\n        },\n        details: {\n            manufacturer: 'MANUFACTURER', \n            modelNum: 'MODEL NUMBER', \n            location: 'LOCATION', \n            serialNum: 'SERIAL NUMBER', \n            lastServiceBy: 'LAST SERVICE BY', \n            lastServiceDate: 'LAST SERVICE DATE',\n        },\n    },\n    addServiceProvider: {\n        title: \"Add Preferred Provider\",\n        add: \"Add\", \n        phoneNumber: \"PHONE NUMBER\",\n    },\n    preferredProviderModal: {\n        title: 'Preferred Provider', \n        overview: 'OVERVIEW', \n        companyEmail: 'COMPANY EMAIL', \n        phoneNum: 'COMPANY PHONE NUMBER', \n        license: 'CONTRACTOR\\'S LICENCE',\n        skills: 'SKILLS', \n    },\n};\n\nexport default strings;\n","import {ApplianceType} from 'homepairs-types';\nimport strings from 'homepairs-strings';\n\nconst categoryStrings = strings.applianceInfo.categories;\nexport function categoryToString(appType: ApplianceType) {\n    let appTypeString: string;\n    if (appType === ApplianceType.Plumbing) {\n        appTypeString = categoryStrings.PLUMBING;\n    } else if (appType === ApplianceType.GeneralAppliance) {\n        appTypeString = categoryStrings.GA;\n    } else if (appType === ApplianceType.HVAC) {\n        appTypeString = categoryStrings.HVAC;\n    } else if (appType === ApplianceType.LightingAndElectric) {\n        appTypeString = categoryStrings.LE;\n    } else {\n        appTypeString = '';\n    }\n    return appTypeString;\n}\n\nexport function stringToCategory(selected: string) {\n    let appType = ApplianceType.None;\n    if (selected === categoryStrings.PLUMBING) {\n        appType = ApplianceType.Plumbing;\n    } else if (selected === categoryStrings.GA) {\n        appType = ApplianceType.GeneralAppliance;\n    } else if (selected === categoryStrings.HVAC) {\n        appType = ApplianceType.HVAC;\n    } else if (selected === categoryStrings.LE) {\n        appType = ApplianceType.LightingAndElectric;\n    }\n    return appType;\n}\n\nconst ApplianceCategoryStrings = {categoryToString, stringToCategory};\nexport default ApplianceCategoryStrings;","import { MainAppStackType } from 'homepairs-types';\n\nexport const LOGIN = '/authentication/login';\nexport const SIGNUP = '/authentication/sign-up';\nexport const ROOPAIRS_LOGIN = '/authentication/roopairs-login';\nexport const LOGIN_MODAL = '/authentication/logging-in';\nexport const CREATE_ACCOUNT_MODAL = '/authentication/creating-account';\nexport const ROOPAIRS_LOGIN_MODAL = '/authentication/logging-in-roopairs';\n\nexport const PROPERTY_LIST = '/admin/properties';\nexport const TENANT_PROPERTY = '/tenant/home';\nexport const PROPERTY = '/admin/property';\n\nexport const ADD_PROPERTY_MODAL = '/admin/properties/add-property';\nexport const EDIT_PROPERTY_MODAL = '/admin/property/edit-property';\nexport const ADD_TENANT_MODAL = '/admin/property/add-tenant';\nexport const EDIT_TENANT_MODAL = '/admin/property/edit-tenant';\nexport const ADD_APPLIANCE_MODAL = '/admin/property/add-appliance';\nexport const EDIT_APPLIANCE_MODAL = '/admin/property/edit-appliance';\n\n\nexport const SERVICE_REQUEST = '/admin/service-requests';\nexport const NEW_SERVICE_REQUEST = '/admin/service-requests/new-service-requests';\nexport const SERVICE_REQUEST_INFO_MODAL = '/admin/service-requests/information';\nexport const ADD_SERVICE_PROVIDER_MODAL = '/admin/service-requests/add-service-provider';\nexport const PREFERRED_PROVIDER_MODAL = '/admin/service-requests/preferred-provider';\n\nexport const ACCOUNT_SETTINGS = '/admin/account-settings';\n\n\n/**\n * These are were all leaves will be stored for quick reference. This should be used when \n * directly navigating to a page. These leaves should also be stored in the navigationKeys \n * object as well. \n */\nexport const navigationPages = {\n    // Property Pages\n    PropertiesScreen: PROPERTY_LIST,\n    TenantProperty: TENANT_PROPERTY,\n    SingleProperty: PROPERTY,\n    // Property Stack Modals \n    AddNewPropertyModal: ADD_PROPERTY_MODAL,\n    EditPropertyModal: EDIT_PROPERTY_MODAL,\n    AddTenantModal: ADD_TENANT_MODAL,\n    EditTenantModal: EDIT_TENANT_MODAL,\n    AddApplianceModal: ADD_APPLIANCE_MODAL, \n    EditApplianceModal: EDIT_APPLIANCE_MODAL,\n    AddServiceProviderModal: ADD_SERVICE_PROVIDER_MODAL,\n    PreferredProviderModal: PREFERRED_PROVIDER_MODAL,\n\n    // Service Request Pages\n    ServiceRequestScreen: SERVICE_REQUEST,\n    NewRequest: NEW_SERVICE_REQUEST,\n    ServiceRequestModal: SERVICE_REQUEST_INFO_MODAL,\n\n    // Account Settings Pages \n    AccountSettings: ACCOUNT_SETTINGS, \n\n    // Authentication Pages\n    LoginScreen: LOGIN,\n    RoopairsLogin: ROOPAIRS_LOGIN,\n    SignUpScreen: SIGNUP,\n\n    // Authentication Modals\n    RoopairsLoggingInModal: ROOPAIRS_LOGIN_MODAL,\n    CreatingAccountModal: CREATE_ACCOUNT_MODAL,\n    LoggingInModal: LOGIN_MODAL, \n\n};\n\n/**\n * All keys that can be mapped to any page in the react navigator should \n * be stored here. This is so there changes to one key can be affect by all\n * files instead of use having to go and individually changing keys. \n */\nexport const navigationKeys: {[id:string]: string} = {\n    AccountPropertiesStack: 'AccountPropertiesStack',\n    AddNewPropertyModal: 'AddNewPropertyModal',\n    Loading: 'Loading',\n    Main: 'Main',\n    Auth: 'Auth',\n    AuthStack: 'AuthStack',\n    LoadingScreen: 'LoadingScreen',\n    PropertiesScreen: 'PropertiesScreen',\n    Login: 'Login',\n    SignUp: 'SignUp',\n    Connect: 'Connect',\n    Properties: 'Properties',\n    PropertyStack: 'PropertyStack',\n    ServiceRequest: 'ServiceRequest',\n    ServiceRequestScreen: 'ServiceRequestScreen',\n    AccountSettings: 'AccountSettings', \n    Account: 'AccountStack',\n    NewRequest: 'NewRequest',\n    TenantProperty: 'TenantProperty',\n    AccountProperties: 'AccountProperties',\n    DetailedProperty: 'DetailedProperty',\n    SingleProperty: 'SingleProperty',\n    EditPropertyModal: 'EditPropertyModal',\n    AddApplianceModal: 'AddApplianceModal', \n    EditApplianceModal: 'EditApplianceModal',\n    AddServiceProviderModal: 'AddServiceProviderModal',\n    PreferredProviderModal: 'PreferredProviderModal',\n\n\n    RoopairsLogin: 'RoopairsLogin',\n    RoopairsLoggingInModal: 'RoopairsLoggingInModal',\n\n    SignUpScreen: 'SignUpScreen',\n    CreatingAccountModal: 'CreatingAccountModal',\n\n    LoginScreen: 'LoginScreen',\n    LoggingInModal: 'LoggingInModal',\n\n    ModalStack: 'ModalStack',\n\n    AddTenantModal: 'AddTenantModal',\n    EditTenantModal: 'EditTenantModal',\n};\n\n/* * Indices used to reference the MainAppStack * */\nexport const NOMAP_INDEX = -1;\nexport const HOME_INDEX = 0;\nexport const SERVICE_INDEX = 1;\nexport const SETTING_INDEX = 2;\nexport const LOGOUT_INDEX = 3;\n\nexport const MainAppStack: Array<MainAppStackType> = [\n    {\n        title: 'My Properties',\n        navigate: PROPERTY_LIST,\n        button: 'Add Property',\n    },\n    {\n        title: 'Service Requests',\n        navigate: navigationPages.ServiceRequestScreen,\n        button: 'Request Service',\n    },\n    {\n        title: 'Account Settings',\n        navigate: navigationPages.AccountSettings,\n    },\n    {\n        title: 'Sign Out',\n        navigate: LOGIN,\n    },\n];\n\nexport const MainAppStackTenant: Array<MainAppStackType> = [\n    {\n        title: 'My Home',\n        navigate: TENANT_PROPERTY,\n    },\n    {\n        title: 'Service Requests',\n        navigate: navigationPages.ServiceRequestScreen,\n        button: 'Request Service',\n    },\n    {\n        title: 'Sign Out',\n        navigate: navigationPages.LoginScreen,\n    },\n];\n","import { AccountTypes } from \"homepairs-types\";\nimport { navigationPages } from '../RouteConstants';\nimport NavigationRouteHandler from './NavigationRouteHandler';\n\n/**\n * ----------------------------------------------------\n * ChooseMainPage\n * ----------------------------------------------------\n * This function navigates to a specific page based on the Account Type passed in.  \n * @param {AccountTypes} accountType - Type passed in\n * @param {NavigationRouteHandler} navigation -navigator passed from calling component */\nexport default function ChooseMainPage(accountType: AccountTypes, navigation: NavigationRouteHandler) {\n    if(accountType === AccountTypes.Tenant){\n      navigation.replace(navigationPages.TenantProperty);\n      return;\n    }\n    navigation.replace(navigationPages.PropertiesScreen);  \n  }","/* eslint-disable react/jsx-props-no-spreading */\nimport { NavigationStackProp } from 'react-navigation-stack';\nimport { RouteProps, withRouter} from 'react-router-dom';\nimport { NavigationSwitchProp, withNavigation} from 'react-navigation';\nimport { isNullOrUndefined } from 'src/utility';\nimport { Platform } from 'react-native';\nimport React from 'react';\nimport {navigationPages, MainAppStack} from '../RouteConstants';\n\ntype Navigators = NavigationStackProp | RouteProps | NavigationSwitchProp\nenum NavigationObjects {\n    Navigator = 'Navigator',\n    Router = 'Router',\n}\nconst {PropertiesScreen, TenantProperty, ServiceRequestScreen, AccountSettings} = navigationPages;\nconst BASE_ROUTES: string[] = [PropertiesScreen, TenantProperty, ServiceRequestScreen, AccountSettings];\nconst [PropertyStack, ServiceRequestStack, AccountSettingStack] = MainAppStack;\n\nexport type NavigationRouteScreenProps = {\n    /**\n     * navigation object that is able to handle navigating for react-routes and react-navigation. \n     * Is meant to be used for components that are wrapped with a withNavigationRouteHandler HOC\n     */\n    navigation: NavigationRouteHandler,\n}\n\n/**\n * ---------------------------------------------------\n * Prepare Route Helper\n * ---------------------------------------------------\n * A helper function that takes in the parameters passed into the navigator and appends these \n * objects into url string. It first sorts the object into alphabetical order and then adds the \n * values to the string.This function is intended to be used for react-router-dom objects\n * @param route -the base route passed \n * @param params -values to be appended to the route\n */\nexport function prepareRoute(route:string, params?:any){\n    // We need to proccess any potential params passed in via web router. This is achieved through sorting and \n    // appending the value of the params through the string. All values are sorted in ASCII order. \n    console.log(params)\n    const passedParams = isNullOrUndefined(params) ? {} : params;\n    const sortedItems = Object.entries(passedParams).sort((a, b) => b[0].localeCompare(a[0]));\n    let fullRoute = `${route}`;\n\n    // TODO: adjust for properties and other strings to allow \"\\\" characters\n\n    sortedItems.forEach(item => {\n        const [, value] = item;\n        if(!isNullOrUndefined(value)){\n            fullRoute = `${fullRoute}/${typeof value === 'object' ? JSON.stringify(value) : value}`;\n        }\n    });\n    return fullRoute;\n}\n\n/**\n * ---------------------------------------------------\n * Navigation-Route Handler  \n * ---------------------------------------------------\n * Since the Homepairs application is going to be a PWA, it is necessary for the application to be able to run on \n * both mobile and webdevices. Using expo, we initially decided that it would be wise to use react-navigation. This \n * works perfectly for mobile, however, this does not allow us to navigate the web application with its fullest potential.\n * Therefore, we are forced to use both navigation-stack and react-router to achieve the full functionality of what is needed.\n * This will take the types provided from withNavigation or withRouter and property define an object that has the functionality \n * to invoke actions based on what is passed. \n * @param {NavigationStackProp | RouteProps | NavigationSwitchProp} navigation -a router that allows the application \n * to navigate across endpoints/paths/screens of mobile and web apps \n */\nexport default class NavigationRouteHandler{\n\n    /**\n     * Object that will hold the instance of the router or navigation objects \n     */\n    navigation;\n\n    static type: NavigationObjects;\n\n    /**\n     * ---------------------------------------------------\n     * createFromProps \n     * ---------------------------------------------------\n     * A helper method that renders a navigation Route Handler object from props passed/injected into a react component. \n     * This function assumes that the user is passing in the correct property for the platform that they are using. Otherwise, \n     * a instance of the NavigationRouteHandler object will be built with an undefined object \n     * @param {any} props \n     */\n    static createFromProps(props:any){\n        const {navigation, history, match, location } = props;\n        const navObject = Platform.OS === 'web' ? {history, match, location} : navigation;\n        NavigationRouteHandler.type = Platform.OS === 'web' ? NavigationObjects.Router : NavigationObjects.Navigator;\n\n        // Case if the navigation has already been converted to a NavigationRouteHandler.\n        if(!isNullOrUndefined(navigation) && navigation instanceof NavigationRouteHandler){\n            return navigation;\n        }\n        \n        return new NavigationRouteHandler(navObject);\n    }\n\n    constructor(navigation: Navigators){\n        NavigationRouteHandler.type = Platform.OS === 'web' ? NavigationObjects.Router : NavigationObjects.Navigator;\n        this.navigation = navigation; \n    }\n\n    /**\n     * Reloads the page if the navigation object is a router. Otherwise nothing is done. \n     */\n    getLocationPathnameAndKey(){\n        if(NavigationRouteHandler.type === NavigationObjects.Router){\n            const {location} = this.navigation;\n            const {pathname, key} = location;\n            return [pathname, key];\n        }\n        const{key, routeName} = this.navigation.state;\n        return [routeName, key];   \n    }\n\n    /**\n     * Invokes a forward navigation to a page on the navigation route stack. \n     * @param {string} route -the route a navigator should go to\n     * @param {any} params -the data to be stored into the url for proper rendering\n     * @param {boolean} asBackground -Indicates if the state of the navigation object should be a modal only \n     * works for react-router\n     */\n    navigate(route:string, params?:any, asBackground?:boolean){\n        if(NavigationRouteHandler.type === NavigationObjects.Router){\n            const {location, history} = this.navigation;\n            const fullRoute = prepareRoute(route, params);\n            if(asBackground)\n                history.push(fullRoute, {background: location});\n            else\n                history.push(fullRoute);\n        } else {\n          this.navigation.navigate(route, params);  \n        }\n    }\n\n    /**\n     * Invokes a standard push to the navigation route stack. On switch navigators, it simply navigates\n     * @param {string} route -the route a navigator should go to\n     * @param {any} params -the data to be stored into the url for proper rendering\n     * @param {boolean} asBackground -Indicates if the state of the navigation object should be a modal only \n     */\n    push(route:string, params?:any, asBackground?:boolean){\n        if(NavigationRouteHandler.type === NavigationObjects.Router){\n            const fullRoute = prepareRoute(route, params);\n            const {location, history} = this.navigation;\n            if(asBackground){\n                history.push(fullRoute, {background: location});\n            }\n            else{\n                history.push(fullRoute);\n            }\n        } else if(!isNullOrUndefined(this.navigation.push)){\n            this.navigation.push(route, {params});\n        } else {\n            this.navigation.navigate(route);\n        }\n    }\n\n    /**\n     * Invokes the goBack function. All possible router objects have built in goBack Functions. \n     */\n    goBack(){\n        if(NavigationRouteHandler.type === NavigationObjects.Router){\n            this.navigation.history.goBack();\n            return;\n        }\n        this.navigation.goBack();\n    }\n\n    /**\n     * Invokes the pop action an a navigation stack object or goes back the equivalent amount on a router object \n     * If this is invoked on a navigation switch object, an error is printed\n     * @param {number} amount -Amount of pages to navigate backwards from \n     * @param {any} params -Parameters to passed when navigating backward\n     */\n    pop(amount:number = 1, params?:any){\n        if(!isNullOrUndefined(this.navigation.pop)){\n            (this.navigation as NavigationStackProp).pop(amount);\n        } else if(isNullOrUndefined(this.navigation.navigate)){\n            (this.navigation.history as RouteProps).go(amount * -1);\n        } else {\n            console.log('Error: Will not call prop on an undefined function. Most likely you are attempting to pop a navigationSwitch object');\n        }\n    }\n\n    /**\n     * Retrieves a value from the navigation state or url. This is initally passed before navigation\n     * @param {string} param -key of the parameter stored \n     */\n    getParam(param:string){\n        if(NavigationRouteHandler.type === NavigationObjects.Navigator)\n            return this.navigation.getParam(param);\n        let value = this.navigation.match.params[param];\n        try{\n            value = JSON.parse(value);\n        }catch(error){\n            console.log('This is not a valid object');\n            console.log(error);\n        }\n        return value;\n    }\n\n    /**\n     * A function that changes the current location to a different location found in the navigation stack or \n     * history stack. If a switch navigator object is the used, then an error message will print to the console \n     * instead. \n     * @param {string} route -Path intended to replace the current location with \n     * @param {any} params -parameters pass for the new url of the object \n     * @param {boolean} asBackground -Indicates if the state of the navigation object should be a modal, only \n     * works for react-router\n     */\n    replace(route:string, params?:any, asBackground?:boolean){\n        if(NavigationRouteHandler.type === NavigationObjects.Router){\n            const {location, history} = this.navigation;\n            const fullRoute = prepareRoute(route, params);\n            if(asBackground)\n                history.replace(fullRoute, {background: location});\n            else\n                history.replace(fullRoute);\n        } else {\n          (this.navigation as NavigationStackProp).replace(route, params);  \n        }\n    }\n\n    /**\n     * Forces a router page to reload.\n     */\n    reload(){\n        if(NavigationRouteHandler.type === NavigationObjects.Router){\n            const {history} = this.navigation;\n            history.go(0);\n        }\n    }\n\n    /**\n     * Retrieves the current Router/Stack location and returns the MainAppStack \n     * object for the location. This is intended to be used by the header. \n     */\n    getCurrentRouteStack(){\n        if(NavigationRouteHandler.type === NavigationObjects.Router){\n            const {location} = this.navigation;\n            const {pathname} = location;\n            if(pathname.match(`${ServiceRequestScreen}*`)){\n                return ServiceRequestStack;\n            } \n            if(pathname.match(`${AccountSettings}*`)){\n                return AccountSettingStack;\n            } \n            return PropertyStack;\n        }\n        return undefined;\n    }\n\n    /**\n     * Checks to see if the base homepairs route is the current location of the navigator. Returns a \n     * boolean value based on the result. The Base Routes are pre-defined. \n     */\n    isNavigatorAtBaseRoute(){\n        let route: string;\n        if(NavigationRouteHandler.type === NavigationObjects.Router)\n            route = this.navigation.location.pathName;\n        else \n            route = this.navigation.state.routeName;\n        return BASE_ROUTES.includes(route);\n    };\n\n    /**\n     * A helper method that returns the proper function for navigating backwards from a modal. Web routes \n     * use the replace method overwrite the route history while navigation has no such route history so it \n     * simply will need to navigate backwards. \n     */\n    resolveModalReplaceNavigation(route:string, params?:any, asBackground?:boolean){\n        if(NavigationRouteHandler.type === NavigationObjects.Router){\n            return this.navigation.history.goBack();\n            //this.replace(route, params, asBackground);\n        } \n        return this.goBack();\n    }\n}\n\n/**\n * ---------------------------------------------------\n * With Navigation-Route Handler  \n * ---------------------------------------------------\n * A high order component that injects a NavigationRouteHandler object into a component. This should be called \n * first and expects itself to be passed a NavigationSwitch, NavigationStack, or Route object. \n * @param {any} Component \n */\nexport function withNavigationRouteHandler(Component: any){\n    return function BaseComponent(props:any){\n        const navigation = NavigationRouteHandler.createFromProps(props);\n        return(\n            <Component {...props} navigation={navigation} />\n        );\n    };\n}\n\n/**\n * ---------------------------------------------------\n * Prepare Navigation Handler Component\n * ---------------------------------------------------\n * A helper function that prepares a component for navigation whether is it render for website or mobile \n * applications. This function is only intended to be used with components that will actually use these \n * objects.\n * @param {any} Component -the component that will be able to use router or navigation objects \n */\nexport function prepareNavigationHandlerComponent(Component: any){\n    const NavigableComponent = withNavigationRouteHandler(Component);\n    return Platform.OS === 'web' ? withRouter(NavigableComponent) : withNavigation(NavigableComponent);\n} \n\n\n/**\n * ---------------------------------------------------\n * Prepare Navigation Handler Component\n * ---------------------------------------------------\n * A utility function that checks to see if a component has been navigated back to. This function should often \n * be called after a component has been updated and navigated backward to especially from modal components. \n * NOTE: This function will on properly invoke within a stateful component.\n * @param {any} props -the passed in parameters of the component. This should include a navigation object\n * @param {any} state -the state of the component. This should store the pathname and key of the navigator object of\n * the previous render. \n */\nexport function hasPageBeenReloaded(props: any, state:any){\n    const {navigation} = props;\n    const {pathname, key}= state;\n    const [newPath, newKey] = navigation.getLocationPathnameAndKey();\n    return (pathname === newPath && key !== newKey);\n}\n","\nimport {AccountTypes} from 'homepairs-types';\n\nconst PM = 'pm';\n/**\n * ----------------------------------------------------\n * getAccountType\n * ----------------------------------------------------\n * Determines if the response given by the Homepairs server is \n * a PropertyManger or a Landlord. Assummed the correct format as \n * been submitted \n * @param {any} accountJSON -data object returned by the api request\n * */\n\n// eslint-disable-next-line import/prefer-default-export\nexport function getAccountType(accountJSON : any): AccountTypes{\n    const {role} = accountJSON;\n    if(role === PM){ \n      return AccountTypes.PropertyManager;\n    }\n      return AccountTypes.Tenant; \n}","import { getAccountType} from 'src/routes';\nimport { \n  FetchUserAccountProfileAction, \n  PropertyManagerAccount, \n  TenantAccount, \n  AccountTypes,\n} from '../types';\n\n\nexport const FETCH_PROFILE_ACTION_TYPES = {\n    FETCH_PROFILE: 'ACCOUNT/FETCH_PROFILE',\n    REHYDRATE_PROFILE: 'ACCOUNT/REHYDRATE_PROFILE',\n};\n\n/**\n * Helper function that handles getting the proper data from the backend into \n * the correct profile information. This method assumes that the object passed \n * is for that of a Property Manager.\n * @param pmObject -Object to be parsed\n */\nfunction parsePropertyManagerAccount(pmObject : any): PropertyManagerAccount{\n    const {pm, token} = pmObject;\n    return {...pm, roopairsToken: token, accountType: AccountTypes.PropertyManager };\n}\n\n/**\n * Helper function that handles getting the proper data from the backend into \n * the correct tenant profile information. This method assumes that the object \n * passed for a tenant account. \n * @param tenantObject -tenant object to be parsed\n */\nfunction parseTenantAccount(tenantObject : any): TenantAccount{\n    const {tenant, properties} = tenantObject;\n    // Gather the information for the tenant account \n    const {email, firstName, lastName, phoneNumber, pm} = tenant;\n    const {pmId} = pm[0]; \n\n    // Get the address and propId from single property returned from the \n    // repsonse.\n    const {streetAddress, propId} = properties[0];\n    return {\n        accountType: AccountTypes.Tenant,\n        email,\n        firstName,\n        lastName, \n        phoneNumber,\n        pmId,\n        address: streetAddress,\n        propId,\n    };\n}\n\n/**\n * ----------------------------------------------------\n * parseAccount\n * ----------------------------------------------------\n * This function parses a json object returned from the homepairs backend into \n * an AccountState object. This object is either a Tenant Account or a \n * Property Manager Account. The object is stored as a reducer action with the \n * FETCH_PROFILE type.\n * \n * @param {any} accountJSON -Json Object from backend response\n * */\nexport const parseAccount = (accountJSON : any): FetchUserAccountProfileAction => {\n    const isTenant: boolean = getAccountType(accountJSON) === AccountTypes.Tenant;\n    const profile = isTenant \n        ? parseTenantAccount(accountJSON) \n        : parsePropertyManagerAccount(accountJSON);\n    return {\n        type: FETCH_PROFILE_ACTION_TYPES.FETCH_PROFILE,\n        profile,\n    };\n};\n","import { \n    ToggleMenuAction,\n    SwitchDropDownNavBarAction,\n    ShowGoBackOnButtonClick,\n    UpdateSelectedPageAction,\n    OnGoBackAction,\n    MainAppStackType,\n} from '../types';\n\nexport enum HEADER_ACTION_TYPES {\n    TOGGLE_MENU = 'HEADER/TOGGLE_MENU',\n    SWITCH_DROPDOWN_NAVBAR = 'HEADER/SWITHC_DROPDOWN_NAVBAR',\n    SHOW_GOBACK_BUTTON = 'HEADER/SHOW_GOBACK_BUTTON',\n    UPDATE_SELECTED_PAGE = 'HEADER/UPDATE_SELECTED_PAGE',\n    ON_GO_BACK = ' HEADER/ON_GO_BACK'\n}\n\n/**\n * ----------------------------------------------------\n * toggleMenu\n * ----------------------------------------------------\n * A simple action that sets header drop down state. This persists even \n * if the header is not in dropdown view.\n * @param {boolean} showMenu -sets header to render the drop down menu or to hide it.\n */\nexport const toggleMenu = (showMenu: boolean): ToggleMenuAction => {\n    return {\n      type: HEADER_ACTION_TYPES.TOGGLE_MENU,\n      showMenu,\n    };\n};\n\n/**\n * ----------------------------------------------------\n * switchDropdownNavbar\n * ----------------------------------------------------\n * Indicates to the header if the menu should be rendered as a dropdown or a wide menu\n * @param {boolean} isDropDown -sets header to drop down or wide menus \n */\nexport const switchDropdownNavbar = (isDropDown: boolean): SwitchDropDownNavBarAction =>{\n    return {\n      type : HEADER_ACTION_TYPES.SWITCH_DROPDOWN_NAVBAR,\n      isDropDown,\n    };\n};\n\n/**\n * ----------------------------------------------------\n * showBackButton\n * ----------------------------------------------------\n * Indicates to the header if the menu should render a goBack button \n * @param {boolean} showBackButton -sets header to show back button\n */\nexport const showGoBackButton = (showBackButton: boolean): ShowGoBackOnButtonClick =>{\n    return {\n      type : HEADER_ACTION_TYPES.SHOW_GOBACK_BUTTON,\n      showBackButton,\n    };\n};\n\n/**\n * ----------------------------------------------------\n * updateSelectedPage\n * ----------------------------------------------------\n * Indicates to the header which selection should be rendered a slightly different color \n * than the other options. This is intended to indicate to the user what page they are on.\n * @param {MainAppStackType} selectedPage - current page that will be highlighted for the menu \n */\nexport const updateSelectedPage = (selectedPage: MainAppStackType): UpdateSelectedPageAction =>{\n    return {\n      type : HEADER_ACTION_TYPES.UPDATE_SELECTED_PAGE,\n      selected: selectedPage,\n    };\n};\n\n/**\n * ----------------------------------------------------\n * onGoBack\n * ----------------------------------------------------\n * Updates the store to reflect that a page has been navigated backwards \n */\nexport const onGoBack = (): OnGoBackAction =>{\n  return {\n    type : HEADER_ACTION_TYPES.ON_GO_BACK,\n  };\n};","import {\n    AddPropertyAction,\n    UpdatePropertyAction,\n    RemovePropertyAction,\n    FetchPropertiesAction,\n    Property,\n    SetSelectedPropertyAction,\n    FetchPropertyAndPropertyManagerAction,\n    AccountTypes,\n    Contact,\n    PropertyDict,\n    TenantInfo,\n    Appliance,\n    StorePropertyApplianceAndTenantAction,\n} from '../types';\n\n\n/**\n * ----------------------------------------------------\n * Property List Action Types\n * ----------------------------------------------------\n * A enumeration of values used to help the reducer distinguish between\n * the different changes it should make to the store. Every potential\n * mutation to the Property List Store should contain a unique value\n * in.\n */\nexport enum PROPERTY_LIST_ACTION_TYPES {\n  ADD_PROPERTY = 'PROPERTY_LIST/ADD_PROPERTY',\n  REMOVE_PROPERTY = 'PROPERTY_LIST/REMOVE_PROPERTY',\n  UPDATE_PROPERTY = 'PROPERTY_LIST/UPDATE_PROPERTY',\n  FETCH_PROPERTY = 'PROPERTY_LIST/FETCH_PROPERTY',\n  FETCH_PROPERTY_AND_PROPERTY_MANAGER = 'PROPERTY_LIST/FETCH_PROPERTY_AND_PROPERTY_MANAGER',\n  FETCH_PROPERTIES = 'PROPERTY_LIST/FETCH_PROPERTIES',\n  SET_SELECTED_PROPERTY = 'PROPERTY_LIST/SET_SELECTED_PROPERTY',\n  UPDATE_TENANT = 'PROPERTY_LIST/UPDATE_TENANT',\n  STORE_APPLIANCES_AND_TENANTS = 'PROPERTY_LIST/STORE_APPLIANCES_AND_TENANTS' \n}\n\n/**\n * ----------------------------------------------------\n * setSelectedProperty\n * ----------------------------------------------------\n * Action whom indicates to the reducer what property is currently selected\n * to be viewed by the user. This is set to null//undefined if none is currently\n * being view\n * @param {number} index -position of the property in the array of the state\n */\nexport const setSelectedProperty = (propId: string): SetSelectedPropertyAction => {\n  // Set the store the selectedProperty in the local state for useage after the app falls asleep\n  return {\n    type: PROPERTY_LIST_ACTION_TYPES.SET_SELECTED_PROPERTY,\n    propId,\n  };\n};\n\n/**\n * ----------------------------------------------------\n * addProperty\n * ----------------------------------------------------\n * Action used to add a property to the store. This should be called after postNewProperty\n * @param {Property} newProperty -property that has been added to the database\n * waiting to be added to the store\n */\nexport const addProperty = (newProperty: Property): AddPropertyAction => {\n  return {\n    type: PROPERTY_LIST_ACTION_TYPES.ADD_PROPERTY,\n    userData: newProperty,\n  };\n};\n\n/**\n * ----------------------------------------------------\n * updateProperty\n * ----------------------------------------------------\n * Action intended to mutate a specified property after it has been updated\n * in the homepairs servers. Should be called after postUpdatedProperty.\n * @param {number} propertyIndex -location of the updated property in the redux-store\n * @param {Property} updatedProperty -the new contents of the selected property\n */\nexport const updateProperty = (updatedProperty: Property): UpdatePropertyAction => {\n  return {\n    type: PROPERTY_LIST_ACTION_TYPES.UPDATE_PROPERTY,\n    propId: updatedProperty.propId,\n    userData: updatedProperty,\n  };\n};\n\n/**\n * ----------------------------------------------------\n * removeProperty\n * ----------------------------------------------------\n * Action intended to remove a Property from the list of managed properties\n * for a pm. TODO: create a function that removes a property from the database\n * @param {number} propertyIndex -location of the property to remove from the store\n */\nexport const removeProperty = (\n  propertyIndex: string,\n): RemovePropertyAction => ({\n  type: PROPERTY_LIST_ACTION_TYPES.REMOVE_PROPERTY,\n  propId: propertyIndex,\n});\n\n/**\n * ----------------------------------------------------\n * fetchPropertyManager\n * ----------------------------------------------------\n * Function used to extract a single property and its owner from fetching an account profile. \n * This should be called after generating a new account or authentication for specifically\n * Tenants \n * @param {Contact} linkedPropertyManager -Property Manager recieved from the homepairs servers  \n */\nexport const fetchPropertyAndPropertyManager = (linkedProperties: any[], linkedPropertyManager: any): FetchPropertyAndPropertyManagerAction => {\n  const linkedProperty = linkedProperties[0];\n  const {email, firstName, lastName, pmId} = linkedPropertyManager;\n  const fetchedPropertyManager: Contact = {\n    email,\n    firstName,\n    lastName,\n    accountType: AccountTypes.PropertyManager,\n    pmId,\n  };\n\n  const fetchedProperties: PropertyDict = {};\n  \n  const {propId, streetAddress, maxTenants, numBed, numBath} = linkedProperty;\n  const fetchedProperty = {\n    propId,\n    address: streetAddress,\n    tenants: maxTenants,\n    bedrooms: numBed,\n    bathrooms: numBath,\n  };\n\n  fetchedProperties[fetchedProperty.propId] = fetchedProperty;\n  return {\n    type: PROPERTY_LIST_ACTION_TYPES.FETCH_PROPERTY_AND_PROPERTY_MANAGER,\n    property: fetchedProperties,\n    propertyManager: fetchedPropertyManager,\n  };\n};\n\n/**\n * ----------------------------------------------------\n * fetchProperties\n * ----------------------------------------------------\n * Function used to extract an array of properties from the fetching of an account profile.\n * This should be called after generating a new account or authentication for specifically\n * PROPERTY MANAGERS\n * @param linkedProperties -Array of objects that contain the data for properties\n */\nexport const fetchProperties = (linkedProperties: Array<any>): FetchPropertiesAction => {\n  const fetchedProperties: PropertyDict = {};\n  linkedProperties?.forEach(linkedProperty => {\n    const {propId, streetAddress, maxTenants, numBed, numBath} = linkedProperty;\n    const parsedProperty: Property = {\n      propId,\n      address: streetAddress,\n      tenants: maxTenants,\n      bedrooms: numBed,\n      bathrooms: numBath,\n    };\n    fetchedProperties[propId] = parsedProperty;\n  });\n  return {\n    type: PROPERTY_LIST_ACTION_TYPES.FETCH_PROPERTIES,\n    properties: fetchedProperties,\n  };\n};\n\n/**\n * ----------------------------------------------------\n * Store Property Appliance and Tenants\n * ----------------------------------------------------\n * Simple function for updating the reducer for when a single property has been selected. It will provide \n * the reducer the information of appliances and tenant information needed for a single property\n * \n * @param {TenantInfo[]} tenants -Array of objects that contain the data for Tenants of a single property\n * @param {Appliance[]} appliances -Array of objects that contain the data for Appliance of a single property\n */\nexport const storePropertyApplianceAndTenants = (tenants: TenantInfo[],\n   appliances: Appliance[]): StorePropertyApplianceAndTenantAction => {\n  return {\n    type: PROPERTY_LIST_ACTION_TYPES.STORE_APPLIANCES_AND_TENANTS,\n    tenants,\n    appliances,\n  };\n};\n\n","import { SetAccountAuthenticationStateAction } from '../types';\n\n\n/**\n * ----------------------------------------------------\n * Session Action Types\n * ----------------------------------------------------\n * A enumeration of values used to help the reducer distinguish between\n * the different changes it should make to the store. Every potential\n * mutation to the Session Store should contain a unique value\n * in.\n */\nexport enum SESSION_ACTION_TYPES {\n    SET_AUTH_STATE = 'SESSION/SET_AUTH_STATE',\n};\n\n\n  /**\n   * ----------------------------------------------------\n   * setAccountAuthenticationState\n   * ----------------------------------------------------\n   * Action whom indicates to the reducer whether or not the application is running on an authenticated \n   * account. \n   * @param {boolean} authed -value used to determine if the app is authenticated\n   */\n  export const setAccountAuthenticationState = (authed: boolean): SetAccountAuthenticationStateAction => {\n    return {\n      type: SESSION_ACTION_TYPES.SET_AUTH_STATE,\n      authed,\n    };\n  };","import { \n    RequestServiceAction,\n    AcceptServiceAction,\n    DenyServiceAction,\n    CancelServiceAction,\n    CompleteServiceAction,\n    RequestedService,\n    ServiceProvider,\n    Service,\n    AcceptedService,\n    ServiceRequestStatus,\n} from '../types';\n\n\nexport const SERVICES_ACTION_TYPES = {\n    REQUEST_SERVICE: 'SERVICES/REQUEST_SERVICE',\n    ACCEPT_SERVICE: 'SERVICES/ACCEPT_SERVICE',\n    DENY_SERVICE: 'SERVICES/DENY_SERVICE',\n    CANCEL_SERVICE: 'SERVICES/CANCEL_SERVICE',\n    COMPLETE_SERVICE: 'SERVICES/COMPLETE_SERVICE',\n};\n\nexport const requestServiceAction = (serviceProvider : ServiceProvider) : RequestServiceAction => {\n    // TODO: Define this action \n    const newRequest : RequestedService = {\n        provider : serviceProvider,\n        status : ServiceRequestStatus.Pending,\n    } ;\n\n    return({\n        type: SERVICES_ACTION_TYPES.REQUEST_SERVICE,\n        request: newRequest,     \n    });\n};\n\nexport const acceptServiceAction = (request : RequestedService) : AcceptServiceAction => {\n    // TODO: Define this function \n    return({\n        type : SERVICES_ACTION_TYPES.ACCEPT_SERVICE,\n        request,\n    });\n};\n\nexport const denyServiceAction = (request : RequestedService) : DenyServiceAction => {\n    // TODO: Define this function \n    return({\n        type : SERVICES_ACTION_TYPES.DENY_SERVICE,\n        request,\n    });\n};\n\nexport const cancelServiceAction = (service : Service) : CancelServiceAction => {\n    // TODO: Define this function \n    return ({\n        type : SERVICES_ACTION_TYPES.CANCEL_SERVICE,\n        service,\n    });\n};\n\nexport const completeServiceAction = (service : AcceptedService) : CompleteServiceAction => {\n    // TODO: Define this function \n    return ({\n        type : SERVICES_ACTION_TYPES.COMPLETE_SERVICE,\n        service,\n    });\n};\n","import { \n    RefreshServiceProvidersAction, \n    RemoveServiceProviderAction,\n    ServiceProvider,\n } from '../types';\n\n/**\n * ----------------------------------------------------\n * Preffered Service Provider Action Types\n * ----------------------------------------------------\n * A enumeration of values used to help the reducer distinguish between\n * the different changes it should make to the store. Two types exists. \n * 1. Refresh Action -should be used when any get requests to the \n * backend is invoked. This should also be used after a successful put \n * request adding to the list has been invoked.\n * \n * 2. Remove Service Provider Action -should be used when a successful remove \n * (as verified from the backend) has been invoked.\n */\nexport enum PREFERRED_SERVICE_PROVIDER_ACTION_TYPES {\n  REFRESH_SERVICE_PROVIDERS = 'PREFERRED_SERVICE_PROVIDER_ACTION_TYPES/REFRESH_SERVICE_PROVIDERS',\n  REMOVE_SERVICE_PROVIDER = 'PREFERRED_SERVICE_PROVIDER_ACTION_TYPES/REMOVE_SERVICE_PROVIDER',\n}\n\n\n/**\n * ----------------------------------------------------\n * Refresh Service Providers\n * ----------------------------------------------------\n * A small action that will be dispatched to the store after a get request to the backend \n * has been successful. \n * It will recieve a list of prefferred service provides that will overwrite the current \n * list. \n */\nexport const refreshServiceProviders = (serviceProviders: ServiceProvider[]): RefreshServiceProvidersAction => {\n    return {\n        type: PREFERRED_SERVICE_PROVIDER_ACTION_TYPES.REFRESH_SERVICE_PROVIDERS,\n        preferredServiceProviders: serviceProviders,\n    };\n};\n\n/**\n * ----------------------------------------------------\n * Remove Service Provider\n * ----------------------------------------------------\n * A small action that will be dispatched to remove a specific service Provider from the store. \n */\nexport const removeServiceProvider = (serviceProvider: ServiceProvider): RemoveServiceProviderAction => {\n    return {\n        type: PREFERRED_SERVICE_PROVIDER_ACTION_TYPES.REMOVE_SERVICE_PROVIDER,\n        serviceProvider,\n    };\n};\n\n\n\n","import { \n    ToggleDarkModeActivationAction,\n    ToggleNotificationActivationAction,\n    AddGoogleApiKeyAction,\n} from '../types';\n\nexport const SETTINGS_ACTION_TYPES = {\n    TOGGLE_DARKMODE_ACTIVATION: 'SETTINGS/TOGGLE_DARKMODE_ACTIVATION',\n    TOGGLE_NOTIFICATION_ACTIVATION: 'SETTINGS/TOGGLE_NOTIFICATION_ACTIVATION',   \n    ADD_GOOGLE_API_KEY: 'SETTINGS/ADD_GOOGLE_API_KEY', \n};\n\nexport const toggleDarkModeActivation = (isActive : boolean) : ToggleDarkModeActivationAction => {\n    return({\n        type: SETTINGS_ACTION_TYPES.TOGGLE_DARKMODE_ACTIVATION,\n        isDarkModeActive: isActive,     \n    });\n};\n\nexport const toggleNotificationActivation = (isActive : boolean) : ToggleNotificationActivationAction => {\n    return({\n        type: SETTINGS_ACTION_TYPES.TOGGLE_NOTIFICATION_ACTIVATION,\n        areNotificationsActive: isActive,     \n    });\n};\n\nexport const addGoogleApiKey = (apiKey: string) : AddGoogleApiKeyAction => {\n    return ({\n        type: SETTINGS_ACTION_TYPES.ADD_GOOGLE_API_KEY, \n        apiKey,\n    });\n};","/**\n * Here, we will define all endpoints of the different API's that the \n * application will be connecting to. Any, endpoint that this application will be \n * using should be put and referenced from this file.  \n */\nimport axios from 'axios';\nimport {AsyncStorage} from 'react-native';\nimport { categoryToString, isNullOrUndefined, stringToCategory } from 'src/utility';\nimport { NavigationRouteHandler, ChooseMainPage, navigationPages, getAccountType} from 'src/routes';\nimport * as HomePairsStateActions from 'homepairs-redux-actions';\nimport { \n    AccountTypes, \n    Account, \n    Property, \n    AddNewPropertyState, \n    EditPropertyState, \n    Appliance, \n    AddApplianceState, \n    NewServiceRequest, \n    ServiceProvider,\n    TenantInfo,\n    Contact,\n    TenantAccount,\n} from 'homepairs-types';\nimport { addGoogleApiKey } from 'src/state/settings/actions';\nimport {\n    HOMEPAIRS_APPLIANCE_ENDPOINT, \n    HOMEPAIRS_LOGIN_ENDPOINT, \n    HOMEPAIRS_PROPERTY_ENDPOINT, \n    HOMEPAIRS_REGISTER_PM_ENDPOINT, \n    HOMEPAIRS_REGISTER_TENANT_ENDPOINT,\n    HOMEPAIRS_SERVICEPROVIDER_GET_ENDPOINT,\n    HOMEPAIRS_SERVICE_REQUEST_ENDPOINT,\n    HOMEPAIRS_TENANT_EDIT_ENDPOINT,\n    HOMEPAIRS_PREFERRED_PROVIDER_ENDPOINT,\n    GOOGLE_API_KEY,\n} from './constants';\n\nconst {AccountActions, PropertyListActions, SessionActions, PreferredProviderActions} = HomePairsStateActions;\nconst {parseAccount} = AccountActions;\nconst {fetchProperties, fetchPropertyAndPropertyManager, addProperty, updateProperty} = PropertyListActions;\nconst {setAccountAuthenticationState} = SessionActions;\nconst {refreshServiceProviders, removeServiceProvider} = PreferredProviderActions;\n\n/* * JSON KEYS * */\nconst SUCCESS = 'success';\nconst PM = 'pm';\n/* * JSON KEYS * */\n\nconst {SingleProperty, ServiceRequestScreen} = navigationPages;\n\n/**\n * ----------------------------------------------------\n * parsePreferredProviders\n * ---------------------------------------------------- \n * A helper function that takes in a json array that is intended to have the information recieved \n * from the fetch request for preferred providers. \n * @param {any[]} preferredServiceProviderJSON -The array of json objects\n */\nexport const parsePreferredProviders: (preferredServiceProviderJSON: any[]) => ServiceProvider[] = \n(preferredServiceProviderJSON: any[]) => {\n    return preferredServiceProviderJSON.map(serviceProvider => {\n        const {provId, name, email, phoneNum, prefId,contractLic, skills, \n            founded, rate, timesHired, earliestHire, logo, address} = serviceProvider;\n        return {\n            provId, name, email, prefId,\n            phoneNum, contractLic, skills, \n            founded, payRate: rate, timesHired, \n            earliestHire: isNullOrUndefined(earliestHire) ? undefined : new Date(earliestHire), \n            logo, address,\n        };\n    });\n};\n\n// Grab Google API Key from the database\nexport const fetchGoogleApiKey = () => {\n    return async (dispatch: (func: any) => void) => {\n        await axios.get(GOOGLE_API_KEY)\n            .then(async (response) => {\n                await AsyncStorage.setItem('googleAPIKey', response.data.apikey);\n                dispatch(addGoogleApiKey(response.data.apikey));\n        }).catch(err => {\n            console.log(err);\n        });\n    };\n};\n\n\n/** \n* ----------------------------------------------------\n* fetchPreferredProviders\n* ---------------------------------------------------- \n* Makes a get request to the homepairs backend retrieving all preferred provider from the account \n* associatted with the account. This function calls the dispatch method and updates the store \n* upon success.\n* \n* @param {string} pmID - The id of the associated account. This is used to by the backend to \n* determine which account needs the specified provider to be removed\n*/\nexport const fetchPreferredProviders = (pmId: string) => {\n    const endpoint = `${HOMEPAIRS_PREFERRED_PROVIDER_ENDPOINT}${pmId}/`;\n    return async (dispatch: (func: any) => void) => {\n        await axios.get(endpoint)\n        .then(result => {\n            const {data} = result;\n            const {providers} = data;\n            const parsedProviders = parsePreferredProviders(providers);\n            console.log(parsedProviders);\n            dispatch(refreshServiceProviders(parsedProviders as ServiceProvider[]));\n            return result;\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        });\n    };\n};\n\n/** \n* ----------------------------------------------------\n* fetchNetworkProviders\n* ---------------------------------------------------- \n* Makes a get request to the homepairs backend retrieving all network providers from the account \n* associatted with the account email. This function calls the dispatch method and updates the store \n* upon success.\n* \n* @param {string} accountEmail -The email of the associated account. This is used to by the backend to \n* determine which account needs the specified provider to be removed\n*/\nexport const fetchNetworkProviders = (accountEmail: string) => {\n    const endpoint = `${HOMEPAIRS_SERVICEPROVIDER_GET_ENDPOINT}${accountEmail}/`;\n    return async (dispatch: (func: any) => void) => {\n        await axios.get(endpoint)\n        .then(result => {\n            const {data} = result;\n            const {status, serviceProviders, error} = data;\n            if(status === SUCCESS){\n                const parsedProviders = parsePreferredProviders(serviceProviders);\n                dispatch(refreshServiceProviders(parsedProviders as ServiceProvider[]));\n            } else {\n                console.log(error);\n                return Promise.reject(error);\n            } \n            return result;\n        })\n        .catch(error => {\n            console.log(error);\n            return Promise.reject(error);\n        });\n    };\n};\n\n/**\n * ----------------------------------------------------\n * postPreferredProvider\n * ---------------------------------------------------- \n * Makes a post request to the homepairs backend adding a preferred provider from the account \n * associatted with the account Email. Returns the result of the request upon completion. \n * \n * @param {string} pmId  -The id of the associated account. This is used to by the backend to \n * determine which account needs the specified provider to be added.\n * @param {ServiceProvider} phoneNum - The string used to resolve the provider. Each service provider \n * will have a unique phone number\n * @param {(error:string) => any} onError -An optional callback function that will handle an error \n * thrown if the api request fails.\n */\nexport const postPreferredProvider = async (\n    pmId: number, phoneNum: string,  onError: (error:string) => any = console.log) => {\n    const endpoint = `${HOMEPAIRS_PREFERRED_PROVIDER_ENDPOINT}`;\n    await axios.post(endpoint, {phoneNum, pmId: String(pmId)})\n    .then(response => {\n        const {data} = response;\n        const {status} = data;\n        if(status !== SUCCESS){\n            const {error} = data;\n            onError(error);\n            throw Error(error);\n        }\n        return response;\n    });\n};\n\n \n/**\n * ----------------------------------------------------\n * deletePreferredProvider\n * ---------------------------------------------------- \n * Makes a delete request to the homepairs backend removing a preferred provider from the account \n * associatted with the account Email. Returns the result upon completion. This function calls \n * a dispatch method and removes the service provider from the store upon success and handles the \n * error upon failure.\n * \n * @param {string} accountEmail -The email of the associated account. This is used to by the backend to \n * determine which account needs the specified provider to be removed\n * @param {ServiceProvider} serviceProvider -The object holding in the service provider to be removed\n * @param {(error:string) => any} onError -An optional callback function that will handle an error \n * thrown if the api request fails\n */\nexport const deletePreferredProvider = (\n    serviceProvider: ServiceProvider, \n    displayError: (error:string) => void,\n    navigation: NavigationRouteHandler) => {\n    const {prefId} = serviceProvider;\n    const endpoint = `${HOMEPAIRS_PREFERRED_PROVIDER_ENDPOINT}`;\n    // Simply print the error if no error function was defined, otherwise use the defined function\n    return async (dispatch: (func: any) => void) => { \n        await axios.delete(endpoint, {data: {prefId}})\n        .then(response => {\n            const {data} = response;\n            const {status} = data;\n            if(status === SUCCESS) {\n                dispatch(removeServiceProvider(serviceProvider));\n                navigation.resolveModalReplaceNavigation(ServiceRequestScreen);\n            } else {\n                const {error} = data;\n                displayError(error);\n            }\n        }).catch(error => {\n            console.log(error);\n        });\n    };\n};\n\n\n/**\n * ----------------------------------------------------\n * updateTenant\n * ---------------------------------------------------- \n * Makes an POST request to the homepairs backend overwriting a tenants information.\n * Upon completion the result of the request is printed to the console.\n * \n * @param {object} props -List of information used to define the tenant. Expected \n * information follows: propId, email, firstName, lastName, phoneNumber\n */\nexport const updateTenant = async ({...props}) => {\n    const {propId, email, firstName, lastName, phoneNumber} = props;\n    await axios.post(HOMEPAIRS_TENANT_EDIT_ENDPOINT, \n        {email, propId, firstName, lastName, phoneNumber}).then((result) =>{\n        console.log(result);\n    }).catch(error =>{\n        console.log(error);\n    });\n};\n\n/**\n * ----------------------------------------------------\n * fetchServiceRequests\n * ---------------------------------------------------- \n * Makes a GET request to the homepairs backend and retrieves as list of service \n * request objects for a specified property\n * \n * @param {string} propId -Identity of the the property service request will fetch\n */\nexport const fetchServiceRequests = async (propId: string) => {\n    const completedEndpoint = `${HOMEPAIRS_SERVICE_REQUEST_ENDPOINT}${propId}/`;\n    const results = await axios.get(completedEndpoint);\n    return results;\n};\n\n/**\n * ----------------------------------------------------\n * fetchPropertyAppliancesAndTenants\n * ---------------------------------------------------- \n * Makes a fetch requests to the homepairs server retrieving the data for the tenants \n * and appliances related to a specific property. Upon failure, this function will\n * throw an error.\n * \n * @param propId -Identity of the property to fetch the information from\n */\nexport const fetchPropertyAppliancesAndTenants = async (propId: string) => {\n    const results = await axios.get(`${HOMEPAIRS_PROPERTY_ENDPOINT}${propId}`).then((result) =>{\n        const {tenants, appliances} = result.data;\n        const tenantInfo: TenantInfo[] = [];\n        const applianceInfo: Appliance[] = [];\n\n        tenants.forEach(tenant => {\n            const {firstName, lastName, email, phoneNumber} = tenant;\n            tenantInfo.push({\n                firstName,\n                lastName,\n                email,\n                phoneNumber,\n            });\n        });\n\n        appliances.forEach(appliance => {\n            const {appId, category, name, manufacturer, modelNum, serialNum, location} = appliance;\n\n            applianceInfo.push({\n                applianceId: appId,\n                category: stringToCategory(category), \n                appName: name, manufacturer, modelNum, serialNum, location,\n            });\n        });\n\n        return {\n            tenants: tenantInfo,\n            appliances: applianceInfo,\n        };\n\n    }).catch(error => console.log(error));\n    return results;\n};\n\n\n/**\n * ----------------------------------------------------\n * fetchAccount\n * ----------------------------------------------------\n * Sends a post requests to the homepairs login endpoint. Upon success, this \n * function will dispatch the parseAccount action and then navigate to a \n * different page. If not, it will call the the modalSetOffCallBack method if \n * defined and return to the parent component.\n * \n * Dispatches to redux store. No need to make it async!!\n * \n * @param {string} Email -Credential passed to the endpoint\n * @param {string} Password -Credential passed to the endpoint\n * @param {NavigationRouteHandler} navigation -Navigator passed from the component\n * @param {modalSetOffCallBack} modalSetOffCallBack -Optional callback that will close \n * the calling modal if it exists\n * */\nexport const fetchAccount = (\n    Email: string, Password: string, navigation: NavigationRouteHandler, \n    modalSetOffCallBack: (error?:String) => void = (error: String) => {}) => \n    {\n        return async (dispatch: (arg0: any) => void) => {\n        await axios.post(HOMEPAIRS_LOGIN_ENDPOINT, {\n            email: Email,\n            password: Password,\n            })\n            .then((response) => {\n            const {data} = response;\n            const {status, role} = data;\n            const accountType = getAccountType(data);\n            if(status === SUCCESS){\n                console.log(data)\n                // Set the login state of the application to authenticated\n                dispatch(setAccountAuthenticationState(true));\n                dispatch(parseAccount(data));\n                \n                if(role === PM){\n                    const {properties, pm} = data;\n                    const {pmId} = pm; \n                    dispatch(fetchProperties(properties));\n                    dispatch(fetchPreferredProviders(pmId));\n                } else { // Assume role = tenant\n                    const {properties, tenant} = data;\n                    const {pm} = tenant;\n                    const {email, firstName, lastName, pmId} = pm[0];\n                    const pmAccountType = AccountTypes.PropertyManager;\n                    const pmContact = {accountType:pmAccountType, firstName, lastName, email };\n                    dispatch(fetchPropertyAndPropertyManager(properties, pmContact));\n                    dispatch(fetchPreferredProviders(pmId));\n\n                }\n                // Navigate page based on the Account Type\n                ChooseMainPage(accountType, navigation);\n            }else{\n                modalSetOffCallBack(\"Home Pairs was unable to log in. Please try again.\");\n            }\n            })\n            .catch((error) => {\n                modalSetOffCallBack(\"Unable to establish a connection with HomePairs servers\");\n                console.log(error);\n            });\n        }; \n};\n\n/**\n * ----------------------------------------------------\n * generateAccountForTenant\n * ----------------------------------------------------\n * Takes in information from the component and sends a request to the \n * homepairs django api. This specifically will generate a tenant account and \n * then return a response allowing the user access to the API.\n * \n * Dispatches to redux store. No need to make it async!!\n * \n * @param {Account} accountDetails -Details passed from user input \n * @param {String} password - Password input that the user want for their account\n * @param {NavigationPropType} navigation -Navigation prop passed from component\n * @param {modalSetOffCallBack} modalSetOffCallBack - *Optional callback that will close \n * the calling modal if it exists\n */\nexport const generateAccountForTenant = (accountDetails: TenantAccount, password: String, \n    navigation: NavigationRouteHandler, modalSetOffCallBack?: (error?:String) => void) => {\n    const {firstName, lastName, email, address, phoneNumber} = accountDetails;\n    return async (dispatch: (arg0: any) => void) => {\n        await axios.post(HOMEPAIRS_REGISTER_TENANT_ENDPOINT, {\n          firstName, \n          lastName,\n          email, \n          address, \n          password, \n          phoneNumber,\n        })\n        .then((response) => {\n          const {data} = response;\n          const {status} = data;\n          if(status === SUCCESS){\n            dispatch(setAccountAuthenticationState(true));\n            dispatch(parseAccount(data));\n            /* same as \n               dispatch(fetchProperty(response[responseKeys.DATA][TENANT][responseKeys.PROPERTIES]));\n            */\n            const {properties, tenant} = response.data;\n            const {pm} = tenant;\n            const pmInfo = pm[0];\n  \n            dispatch(fetchPropertyAndPropertyManager(properties, pmInfo));\n            ChooseMainPage(AccountTypes.Tenant, navigation);\n          } else {\n            modalSetOffCallBack(\"Home Pairs was unable create the account. Please try again.\");\n          }\n        })\n        .catch(error => {\n          modalSetOffCallBack(\"Connection to the server could not be established.\");\n        });\n    };\n  };\n  \n  /**\n   * ----------------------------------------------------\n   * generateAccountForPM\n   * ----------------------------------------------------\n   * Takes in information from the component and sends a request to the \n   * homepairs django api. This specifically will generate a property \n   * manager account and then return a response allowing the user access \n   * to the API.\n   * \n   * Dispatches to redux store. No need to make it async!!\n   * \n   * @param {Account} accountDetails - Details passed from user input \n   * @param {String} password - Password input that the user want for their account\n   * @param {NavigationPropType} navigation - Navigation prop passed from component\n   * @param {modalSetOffCallBack} modalSetOffCallBack - *Optional callback to \n   * close/navigate from the modal\n   */\n  export const generateAccountForPM = (\n      accountDetails: Account, \n      password: String, \n      navigation: NavigationRouteHandler, \n      modalSetOffCallBack?: (error?:String) => void, \n      displayError?: (msg: string) => any) => {\n      return async (dispatch: (arg0: any) => void) => {\n        await axios.post(HOMEPAIRS_REGISTER_PM_ENDPOINT, {\n            firstName: accountDetails.firstName, \n            lastName: accountDetails.lastName,\n            email: accountDetails.email, \n            password,\n          })\n          .then((response) => {\n            const {data} = response;\n            const {status, properties} = data;\n            if(status === SUCCESS){\n              dispatch(setAccountAuthenticationState(true));\n              dispatch(parseAccount(data));\n              dispatch(fetchProperties(properties));\n              ChooseMainPage(AccountTypes.PropertyManager, navigation);\n            } else {\n              displayError(response.data);\n              modalSetOffCallBack(\"Home Pairs was unable create the account. Please try again.\");\n            }\n          })\n          .catch((error) => {\n            displayError(error);\n            modalSetOffCallBack(\"Connection to the server could not be established.\");\n          });\n      };\n  };\n\n  /**\n * ----------------------------------------------------\n * postNewProperty\n * ----------------------------------------------------\n * Sends an request to the homepairs backend attempting to mutate the data of an exisiting property. It takes in\n * the previous property (TODO: Update this to be propId when backend resolves properties from propId) and sends this \n * data to backend in order for it to resolve which property is to be updated. The intitial state of the component is invoked \n * and the modal navigates to back to the previous page upon a success. \n *  \n * Dispatches to redux store. No need to make it async!!\n * \n * @param {Property} newProperty -Property to add to the homepairs database\n * @param {AddNewPropertyState} info -Information used to indicate the property manager of the property\n * @param {setIntialState} setInitialState -Sets state of calling component to its original state. Should be used for forms\n * @param {onChangeModalVisibility} onChangeModalVisibility -Changes the visibility of the modal of the calling component\n */\nexport const postNewProperty = (\n    newProperty: Property,\n    info: AddNewPropertyState,\n    setInitialState: () => void,\n    displayError: (msg: string) => void,\n    navigation: NavigationRouteHandler,\n) => {\n    return async (dispatch: (arg0: any) => void) => {\n        await axios\n            .post( HOMEPAIRS_PROPERTY_ENDPOINT,\n                {\n                    streetAddress: newProperty.address,\n                    numBed: newProperty.bedrooms,\n                    numBath: newProperty.bathrooms,\n                    maxTenants: newProperty.tenants,\n                    pm: info.email,\n                    token: info.roopairsToken,\n                },\n            )\n            .then(response => {\n                const {data} = response;\n                const {status, propId} = data;\n                if ( status === SUCCESS ) {\n                    const newProp : Property = {\n                      propId,\n                      address: newProperty.address,\n                      bedrooms: newProperty.bedrooms, \n                      bathrooms: newProperty.bathrooms, \n                      tenants: newProperty.tenants,\n                    };\n                    dispatch(addProperty(newProp));\n                    setInitialState();\n                    navigation.resolveModalReplaceNavigation(navigationPages.PropertiesScreen);\n                } else {\n                    const {error} = data;\n                    displayError(error);\n                }\n            })\n            .catch(error => console.log(error));\n    };\n};\n\n/**\n * ----------------------------------------------------\n * postUpdatedProperty\n * ----------------------------------------------------\n * Sends a request to the homepairs API to update a selected property. On success,\n * it updates the redux-store and invokes a callback intended to close the modal\n * of the calling component. Upon failure, an error message should be sent.\n * \n * Dispatches to redux store. No need to make it async!!\n * \n * @param {Property} editProperty -Contents of the property to be updated\n * @param {EditPropertyState} info -Information passed to the api to help determine which property in the\n * servers to update\n * @param {onChangeModalVisibility} onChangeModalVisibility -Changes the visibility of the modal\n * of the calling component\n */\nexport const postUpdatedProperty = (\n    editProperty: Property,\n    info: EditPropertyState,\n    displayError: (msg: string) => void,\n    navigation: any,\n) => {\n    return async (dispatch: (arg0: any) => void) => {\n        return axios\n            .put( HOMEPAIRS_PROPERTY_ENDPOINT,\n                {\n                  propId: editProperty.propId,\n                  streetAddress: editProperty.address,\n                  numBed: editProperty.bedrooms,\n                  numBath: editProperty.bathrooms,\n                  maxTenants: editProperty.tenants,\n                  pm: info.email,\n                  token: info.roopairsToken,\n                },\n            )\n            .then(response => {\n                const {data} = response;\n                const {status} = data;\n                if ( status === SUCCESS) {\n                    navigation.resolveModalReplaceNavigation(SingleProperty, \n                        {propId: editProperty.propId});\n                    dispatch(updateProperty(editProperty));\n                } else {\n                    const {error} = data;\n                    displayError(error);\n                }\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n    };\n};\n\n/**\n * Callback is intended to set the input forms of the component used to send\n * the request back to the base values. This could be empty or predetermined.\n * @callback setInitialState */\n/**\n * Callback is intended to change the state of a modal of the calling component\n * after the request has been sent. This should be optional.\n * @callback onChangeModalVisibility\n * @param {boolean} check -Determines if the components modal should be visible */\n\n// make docs\nexport const postNewAppliance = async (\n    newAppliance: Appliance,\n    info: AddApplianceState,\n    setInitialState: () => void,\n    displayError: (msg: string) => void,\n    navigation: NavigationRouteHandler,\n) => {\n    await axios\n        .post(HOMEPAIRS_APPLIANCE_ENDPOINT,\n            {\n                propId: info.property.propId,\n                token: info.token,\n                name: newAppliance.appName, \n                manufacturer: newAppliance.manufacturer, \n                category: categoryToString(newAppliance.category),\n                modelNum: newAppliance.modelNum, \n                serialNum: newAppliance.serialNum, \n                location: newAppliance.location, \n            },\n        )\n        .then(response => {\n            const {data} = response;\n            const {status} = data;\n            if (status === SUCCESS) {\n                const {property} = info;\n                const {propId} = property;\n                setInitialState();\n                navigation.resolveModalReplaceNavigation(SingleProperty, {propId});\n            } else {\n                const {error} = data;\n                displayError(error);\n            }\n        })\n        .catch(error => console.log(error));\n};\n\n/**\n * ----------------------------------------------------\n * postUpdatedProperty\n * ----------------------------------------------------\n * Sends a request to the homepairs API to update a selected property. On success,\n * it updates the redux-store and invokes a callback intended to close the modal\n * of the calling component. Upon failure, an error message should be sent.\n * @param {Property} editProperty -contents of the property to be updated\n * @param {EditPropertyState} info -information passed to the api to help \n * determine which property in the servers to update\n * @param {onChangeModalVisibility} onChangeModalVisibility -changes the \n * visibility of the modal of the calling component\n */\nexport const postUpdatedAppliance = async (\n    propId: string,\n    editAppliance: Appliance,\n    displayError: (msg: string) => void,\n    navigation: NavigationRouteHandler,\n) => {\n        await axios\n            .put( HOMEPAIRS_APPLIANCE_ENDPOINT,\n                {\n                    appId: editAppliance.applianceId,\n                    newName: editAppliance.appName, \n                    newManufacturer: editAppliance.manufacturer, \n                    newCategory: categoryToString(editAppliance.category),\n                    newModelNum: editAppliance.modelNum, \n                    newSerialNum: editAppliance.serialNum, \n                    newLocation: editAppliance.location,\n                },\n            )\n            .then(response => {\n                const {data} = response;\n                const {status} = data;\n                if (status === SUCCESS) {\n                  navigation.resolveModalReplaceNavigation(SingleProperty, {propId});\n                } else {\n                    const {error} = data;\n                    displayError(error);\n                }\n            })\n            .catch(error => console.log(error));\n};\n\n/**\n* ----------------------------------------------------\n * postNewServiceRequest\n * ----------------------------------------------------\n * @param newServiceRequest \n * @param displayError \n * @param navigation \n * @param isPm \n */\nexport const postNewServiceRequest = async (\n    newServiceRequest: NewServiceRequest, \n    displayError: (msg: string) => void, \n    navigation: NavigationRouteHandler,\n    isPm: boolean,\n) => {\n        console.log(newServiceRequest);\n        await axios\n        .post(HOMEPAIRS_SERVICE_REQUEST_ENDPOINT, \n        {\n            token: newServiceRequest.token, \n            propId: newServiceRequest.propId, \n            phoneNumber : newServiceRequest.phoneNumber,\n            appId: newServiceRequest.appId, \n            provId: newServiceRequest.providerId, \n            serviceType: newServiceRequest.serviceType,\n            serviceCategory: newServiceRequest.serviceCategory, \n            serviceDate: newServiceRequest.serviceDate, \n            details: newServiceRequest.details,\n            poc: newServiceRequest.poc, \n            pocName: newServiceRequest.pocName,\n            isPm,\n        })\n        .then(response => {\n            console.log(response);\n            const {data} = response;\n            const {status} = data;\n            if (status === SUCCESS) {\n                navigation.resolveModalReplaceNavigation(ServiceRequestScreen);\n            } else {\n                const {error} = data;\n                console.log(error)\n                displayError(error);\n            }\n        }).catch(error => {\n            console.log(error);\n            displayError(error);\n        });\n};\n\n\n// For accepting or denying a service request from the PM perspective\nexport const changeServiceRequestStatus = async (\n    status: string,\n    reqId: number,\n    token: string,\n    navigation: NavigationRouteHandler,\n    ) => {\n        await axios.put(HOMEPAIRS_SERVICE_REQUEST_ENDPOINT, { reqId, status, token })\n        .then((response) => {\n            console.log(response);\n            if (response.data.status === \"success\") {\n                navigation.resolveModalReplaceNavigation(ServiceRequestScreen);\n                setTimeout(() => navigation.reload(), 1000);\n            }\n        })\n        .catch(err => console.log(err));\n\n};","import { HomePairsDimensions } from 'homepairs-types';\nimport { HomePairFonts } from '../fonts';\n\nexport type ColorTheme = {\n    primary: string,\n    secondary: string,\n    tertiary: string,\n    space: string,\n    transparent: string,\n    red: string,\n    darkGray: string,\n    gray: string,\n    lightGray: string,\n    veryLightGray: string,\n    shadow: string,\n    roopairs: string,\n}\nexport const LightColorTheme : ColorTheme = {\n    primary: '#00ADE9',\n    secondary: 'white',\n    tertiary: '#374245',\n    space: '#1177B0',\n    transparent: 'transparent',\n    red: '#C70000',\n    darkGray: '#737A7C',\n    gray: 'rgba(0,0,0,.5)',\n    lightGray: 'rgba(55,66,69,.5)',\n    veryLightGray: '#E9ECEF',\n    shadow: 'black',\n    roopairs: '#40D7A7',\n};\n\nexport const DarkColorTheme : ColorTheme = {\n    primary: '#00ADE9',\n    secondary: '#1E1F21',\n    tertiary: 'white',\n    space: '#1177B0',\n    transparent: 'transparent',\n    red: '#C70000',\n    gray: 'rgba(255,255,255,.75)',\n    lightGray: 'rgba(255,255,255,.9)',\n    veryLightGray: 'rgba(100,100,100, .50)',\n    shadow: 'white',\n    roopairs: '#40D7A7',\n};\n\nexport const FontTheme = {\n    title: 40,\n    xlg: 32,\n    lg: 24,\n    reg: 16,\n    small: 14,\n    xsmal: 12,\n    button: HomePairsDimensions.MAX_CONTENT_SIZE > 300 ? 22 : 18,\n    subtitle: 20,\n    \n    primary: HomePairFonts.nunito_regular,\n    secondary: HomePairFonts.nunito_bold,\n    tertiary: HomePairFonts.nunito_light,\n};\n\nexport const MarginPadding = {\n    xsmall: '0.5%',\n    small: '1%',\n    medium: '2.5%',\n    statusTitle: '3.0%',\n    inputForm: '3.5%',\n    large: '5%',\n    statusButton: '6.0%',\n    xlarge: '10%',\n\n    xsmallConst: 2.5,\n    smallConst: 5,\n    mediumConst: 10,\n    largeConst: 20,\n    xlargConst: 25,\n    xxlargConst: 40,\n};\n\nexport const ContentWidth = {\n    almostThird: '27.3333333%',\n    third: '33.3333333%',\n    half: '50%',\n    thin: '90%',\n    reg: '95%',\n    wide: '97.5%',\n    max: '100%',\n    buttonWide: '20%',\n    buttonReg: '15%',\n    buttonThin: '10%',\n};\n\nexport const BorderRadius = {\n    medium: 6,\n    large: 8,\n    small: 4,\n};\n","import React from 'react';\nimport { Text, View, TextInput, ViewStyle, StyleSheet } from 'react-native';\nimport {HelperText} from 'react-native-paper';\nimport {FontTheme} from 'homepairs-base-styles';\n\nexport type InputFormProps = {\n    key?: any;\n    name?: string;\n    ref?: any;\n    testID?: string;\n    parentCallBack?: (child: string) => any;\n    secureTextEntry?: boolean;\n    formTitleStyle?: ViewStyle;\n    containerStyle?: ViewStyle;\n    inputStyle?: ViewStyle;\n    errorStyle?: any;\n    placeholder?: string;\n    value?: string;\n    errorMessage?: string;\n    numberOfLines?: number;\n    multiline?: boolean;\n    trim?: boolean;\n    maxLength?: number;\n};\n\ntype InputFormState = {\n    value?: string;\n    error?: boolean;\n};\nconst initialState: InputFormState = { value: '', error: false};\n\nconst DefaultInputFormStyle = StyleSheet.create({\n    container: {\n        marginBottom: '3.5%',\n        paddingTop: 1,\n        paddingHorizontal: 3,\n        borderRadius: 4,\n        width: '100%',\n        opacity: 50,\n    },\n    formTitle: {\n        marginVertical: '3.5%',\n        fontFamily: 'nunito_regular',\n        color: '#AFB3B5',\n    },\n    input: {\n        alignItems: 'center',\n        alignSelf: 'center',\n        margin: 1,\n        minWidth: 40,\n        width: '100%',\n        height: 40,\n        borderColor: '#AFB3B5',\n        borderWidth: 1,\n        borderRadius: 4,\n        paddingHorizontal: 10,\n    },\n    hide: {\n        display: 'none',\n    },\n    errorStyle: {\n        fontFamily: FontTheme.secondary, \n        fontSize: 14,\n    },\n});\n\n\n/**\n * ------------------------------------------------------------\n * Input Form\n * ------------------------------------------------------------\n * Renders an area where the user is able to input keyboard data.\n * It inherits most of its functionality from the TextInput state but\n * allows for a stylized version of it. It also is capable of rendering\n * title for the state for UI clarity through the name property.\n *\n * \n * */\nexport class InputForm extends React.Component<InputFormProps, InputFormState> {\n\n    textInput;\n\n    static defaultProps: InputFormProps;\n\n    constructor(props){\n        super(props);\n        this.state = {...initialState};\n        this.setError = this.setError.bind(this);\n    }\n\n    setError(input: boolean) {\n        this.setState({error: input});\n    }\n\n    passInputValue(text: string): void {\n        const {parentCallBack, trim} = this.props;\n        parentCallBack( trim ? text.trim() : text);\n    }\n\n    renderName() {\n        const {name, formTitleStyle} = this.props;\n        if (name == null) return <></>;\n        return <Text style={formTitleStyle}>{name}</Text>;\n    }\n    \n    render(){\n        const {\n            secureTextEntry,\n            containerStyle,\n            inputStyle,\n            errorStyle,\n            placeholder,\n            value,\n            errorMessage,\n            numberOfLines,\n            multiline,\n            maxLength,\n        } = this.props;\n        const {error} = this.state;\n\n        return (\n            <View style={containerStyle}>\n                {this.renderName()}\n                <TextInput\n                    testID='user-text-input'\n                    style={inputStyle}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                    value={value}\n                    placeholder={placeholder}\n                    secureTextEntry={secureTextEntry}\n                    numberOfLines={numberOfLines}\n                    multiline={multiline}\n                    maxLength={maxLength}\n                    onChangeText={text => {this.passInputValue(text);}}\n                />\n                <HelperText\n                    testID= 'helper-text'\n                    type= 'error'\n                    visible={error}\n                    style={error ? errorStyle : DefaultInputFormStyle.hide}\n                    padding='none'\n                >\n                {errorMessage}\n                </HelperText>\n            </View>\n        );\n    }\n}\n\nInputForm.defaultProps = {\n    ref: undefined,\n    key: null,\n    name: null,\n    parentCallBack: (child: string) => {\n        return child;\n    },\n    testID: null,\n    secureTextEntry: false,\n    formTitleStyle: DefaultInputFormStyle.formTitle,\n    containerStyle: DefaultInputFormStyle.container,\n    inputStyle: DefaultInputFormStyle.input,\n    errorStyle: DefaultInputFormStyle.errorStyle,\n    value: undefined,\n    placeholder: null,\n    numberOfLines: 1,\n    multiline: false,\n    trim: false,\n    maxLength: 200,\n    errorMessage: 'Placeholder error message',\n};\n","import React from 'react';\nimport {filterList, isNullOrUndefined} from 'src/utility';\nimport { InputForm, InputFormProps} from './InputForm';\n\n\nexport type SearchFormProps<T> = InputFormProps & {\n    /**\n     * The list of items that the component will filter through. Pass this value into the \n     * component every time an update list or new list has been instantiated. \n     */\n    objects: T[];\n\n    /**\n     * Callback method for whenever the filteredArray is updated. This will typically be \n     * used to set/return the results back to the parent component. \n     */\n    parentCallBack: (filtredArray: T[], ...rest) => any;\n\n    /**\n     * A optional parameter that can be used to define which keys to search while filtering \n     * a list of objects. Currently, the search function used only examines keys at the \n     * highest level.\n     */\n    keys?: string[];\n};\n\ntype State = {\n    /**\n     * The input text state is saved into this component since it will be needed for new \n     * new objects are passed into. This can occur during a refresh, or an async fetch \n     * request. The text allows access to the inputform text for filtering as soon as \n     * an update has occured.\n     */\n    text: string;\n}\n\nconst initialState: State = { text: \"\" };\n\n\n/**\n * ----------------------------------------------------\n * Search Form\n * ----------------------------------------------------\n * A component that wraps around the Input Form as a base. It queries all values that \n * include the text passed into the Input Form and returns a filtered array as the \n * result. To use the component you must define a type as it is a generic function. \n * \n * EX: \n *  <SearchForm<any> ...props>\n * \n */\nexport class SearchForm<T> extends React.Component<SearchFormProps<T>, State>{\n    \n    constructor(props: Readonly<SearchFormProps<T>>){\n        super(props);\n        this.state= initialState;\n        this.invokeSearchFromInputForm = this.invokeSearchFromInputForm.bind(this);\n    }\n\n    /**\n     * If an update occurs with outside of this component, invoke a filter to respond \n     * to the new updates.\n     */\n    componentDidUpdate(prevProps: SearchFormProps<T>){\n        const {objects} = this.props;\n        const {text} = this.state;\n        if(objects !== prevProps.objects)\n            this.invokeSearchFromInputForm(text);\n    }\n\n    /**\n     * Callback method intended that occurs when the input form has mutated. This function will \n     * invoke a search and set the state new state of this component the filtered data\n     * @param {string} text -text state of the input form \n     */\n    invokeSearchFromInputForm(text: string){\n        const {objects, keys, parentCallBack} = this.props;\n        let filteredArray;\n        if(isNullOrUndefined(objects))\n        {\n            filteredArray = [];\n        }\n        else\n        {\n            filteredArray = filterList<T>(text, objects, keys);\n        }\n        this.setState({text});\n        parentCallBack(filteredArray);\n    }\n\n    render(){\n        return (\n            <InputForm \n                {...(this.props as InputFormProps)}\n                parentCallBack={this.invokeSearchFromInputForm} \n                />\n        );\n    }\n}\n\n","import React, { PureComponent } from 'react';\nimport { Text, StyleSheet, TouchableOpacity} from 'react-native';\nimport * as BaseStyles from 'homepairs-base-styles';\n\ntype LocationItemProps = {\n    testID?: string,\n    key?: string,\n    description?: string,\n    placeId?: string, \n    parentCallBack?: (child: string) => any\n    clearSearch?: () => any\n};\n\nconst colors = BaseStyles.LightColorTheme;\nconst styles = StyleSheet.create({\n    container: {\n        padding: BaseStyles.MarginPadding.medium,\n        borderBottomColor: colors.lightGray, \n        borderBottomWidth: 1,\n    },\n    itemText: {\n        fontSize: BaseStyles.FontTheme.reg,\n        fontFamily: BaseStyles.FontTheme.primary,\n    },\n});\n\n\nexport default class LocationItem extends PureComponent<LocationItemProps> {\n\n    render() {\n        const {description, parentCallBack, clearSearch} = this.props; \n        return (\n            <TouchableOpacity style={styles.container} onPress={() => {\n                parentCallBack(description);\n                clearSearch();\n            }}>\n                <Text style={styles.itemText}>{description}</Text>\n            </TouchableOpacity>\n        );\n    }\n}\n\n","import { GoogleAutoComplete } from 'react-native-google-autocomplete';\nimport React from 'react';\nimport { Text, View, TextInput, ViewStyle, StyleSheet, ScrollView, AsyncStorage } from 'react-native';\nimport {HelperText} from 'react-native-paper';\nimport {FontTheme} from 'homepairs-base-styles';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport LocationItem from '../LocationItem/LocationItem';\n\nexport type GoogleInputFormProps = {\n    key?: any;\n    name?: string;\n    ref?: any;\n    testID?: string;\n    parentCallBack?: (child: string) => any;\n    secureTextEntry?: boolean;\n    formTitleStyle?: ViewStyle;\n    containerStyle?: ViewStyle;\n    inputStyle?: ViewStyle;\n    errorStyle?: any;\n    placeholder?: string;\n    value?: string;\n    errorMessage?: string;\n    locationsContainer?: any\n};\ntype GoogleInputFormState = {\n    value?: string;\n    error?: boolean;\n    apiKey?: string;\n};\nconst initialState: GoogleInputFormState = { value: '', error: false, apiKey: ''};\n\nconst DefaultInputFormStyle = StyleSheet.create({\n    container: {\n        marginBottom: '3.5%',\n        paddingTop: 1,\n        paddingHorizontal: 3,\n        borderRadius: 4,\n        width: '100%',\n        opacity: 50,\n    },\n    formTitle: {\n        marginVertical: '3.5%',\n        fontFamily: 'nunito_regular',\n        color: '#AFB3B5',\n    },\n    input: {\n        alignItems: 'center',\n        alignSelf: 'center',\n        margin: 1,\n        minWidth: 40,\n        width: '100%',\n        height: 50,\n        borderColor: '#AFB3B5',\n        borderWidth: 1,\n        borderRadius: 4,\n        paddingHorizontal: 10,\n    },\n    hide: {\n        display: 'none',\n    },\n    errorStyle: {\n        fontFamily: FontTheme.secondary, \n        fontSize: 14,\n    },\n    locationsContainers: {\n        maxHeight: 230,\n        borderLeftColor: BaseStyles.LightColorTheme.lightGray,\n        borderLeftWidth: 1, \n        borderRightColor: BaseStyles.LightColorTheme.lightGray,\n        borderRightWidth: 1,\n    },\n});\n\n\n/**\n * ------------------------------------------------------------\n * Input Form\n * ------------------------------------------------------------\n * Renders an area where the user is able to input keyboard data.\n * It inherits most of its functionality from the TextInput state but\n * allows for a stylized version of it. It also is capable of rendering\n * title for the state for UI clarity through the name property.\n *\n * \n * */\nexport class GoogleInputForm extends React.Component<GoogleInputFormProps, GoogleInputFormState> {\n\n    static defaultProps: GoogleInputFormProps;\n\n    constructor(props){\n        super(props);\n        this.state = {...initialState};\n        this.setError = this.setError.bind(this);\n    }\n\n    componentDidMount()  {\n        this.fetchApiKey();\n    }\n\n    setError(input: boolean) {\n        this.setState({error: input});\n    }\n\n    fetchApiKey() {\n        const apiKey = async () => {\n            await AsyncStorage.getItem('googleAPIKey').then((response) => {\n                this.setState({apiKey: response});\n            }).catch((err) => {\n                console.log(err);\n            });\n        };\n        apiKey();\n    }\n\n    renderName() {\n        const {name, formTitleStyle} = this.props;\n        if (name == null) return <></>;\n        return <Text testID='autocomplete-text'style={formTitleStyle}>{name}</Text>;\n    }\n    \n    render(){\n        const {\n            secureTextEntry,\n            containerStyle,\n            inputStyle,\n            errorStyle,\n            placeholder,\n            value,\n            errorMessage,\n            parentCallBack,\n            locationsContainer,\n        } = this.props;\n        const {error, apiKey} = this.state;\n\n        return (\n            <GoogleAutoComplete apiKey={apiKey}\n                components=\"country:us\" >\n                {({ handleTextChange, locationResults, clearSearch }) => (\n                    <React.Fragment key='google autocomplete'>\n                        <View testID='autocomplete-view' style={containerStyle}>\n                            {this.renderName()}\n                            <TextInput\n                                testID='autocomplete-text-input'\n                                style={inputStyle}\n                                underlineColorAndroid=\"transparent\"\n                                autoCapitalize=\"none\"\n                                value={value}\n                                placeholder={placeholder}\n                                secureTextEntry={secureTextEntry}\n                                onChangeText={(text) => {\n                                    handleTextChange(text);\n                                    parentCallBack(text);\n                                }}\n                            />\n                            <ScrollView testID='autocomplete-scrollview' style={locationsContainer}>\n                                {locationResults.map((el, i) => (\n                                <LocationItem\n                                    testID='autocomplete-location-item'\n                                    description={el.description}\n                                    key={String(i)}\n                                    parentCallBack={parentCallBack}\n                                    clearSearch={clearSearch}\n                                />\n                                ))}\n                            </ScrollView>\n                            <HelperText\n                                testID= 'autocomplete-helper-text'\n                                type= 'error'\n                                visible={error}\n                                style={error ? errorStyle : DefaultInputFormStyle.hide}\n                                padding='none'\n                            >\n                            {errorMessage}\n                            </HelperText>\n                        </View>\n                    </React.Fragment>\n                )}\n            </GoogleAutoComplete>\n        );\n    }\n}\n\nGoogleInputForm.defaultProps = {\n    ref: undefined,\n    key: null,\n    name: null,\n    parentCallBack: (child: string) => {\n        return child;\n    },\n    testID: null,\n    secureTextEntry: false,\n    formTitleStyle: DefaultInputFormStyle.formTitle,\n    containerStyle: DefaultInputFormStyle.container,\n    inputStyle: DefaultInputFormStyle.input,\n    errorStyle: DefaultInputFormStyle.errorStyle,\n    locationsContainer: DefaultInputFormStyle.locationsContainers,\n    value: undefined,\n    placeholder: null,\n    errorMessage: 'Placeholder error message',\n};","const blender = require('./assets/images/blender.png');\nconst bolt = require('./assets/images/bolt.png');\nconst calendar = require('./assets/images/calendar.png');\nconst clock = require('./assets/images/clock.png');\nconst defaultProperty = require('./assets/images/defaultProperty.png');\nconst downArrow = require('./assets/images/downArrow.png');\nconst fan = require('./assets/images/fan.png');\nconst hamburger = require('./assets/images/hamburger.png');\nconst icon = require('./assets/images/icon.png');\nconst roopairsLogo = require('./assets/images/roopairsLogo.png');\nconst splash = require('./assets/images/splash.png');\nconst testLogo = require('./assets/images/testLogo.png');\nconst tint = require('./assets/images/tint.png');\nconst trash = require('./assets/images/trash.png');\nconst upArrow = require('./assets/images/upArrow.png');\nconst servprov = require('./assets/images/servprov.png');\n\nexport { \n\tblender,\n\tbolt,\n\tcalendar,\n\tclock,\n\tdefaultProperty,\n\tdownArrow,\n\tfan,\n\thamburger,\n\ticon,\n\troopairsLogo,\n\tsplash,\n\ttestLogo,\n\ttint,\n\ttrash,\n\tupArrow, \n\tservprov,\n};\n","import React from 'react';\nimport {\n    Text,\n    View,\n    Animated,\n    StyleSheet,\n    TouchableHighlight,\n    Image,\n    ScrollView,\n} from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { upArrow, downArrow } from 'homepairs-images';\nimport {Property} from 'homepairs-types';\n\n\nexport type AddressPanelProps = {\n    properties: Property[],\n    parentCallBack: (child: string, propId: string) => any\n};\n\ntype AddressPanelState = {\n    expanded: boolean;\n    animation: Animated.Value;\n    selectedIndex: number;\n    selectedString: string;\n    minHeight: number;\n    maxHeight: number;\n    clicked: boolean;\n};\n\nconst initialState: AddressPanelState = {\n    expanded: false,\n    selectedIndex: 0,\n    selectedString: 'Choose an Address',\n    animation: undefined,\n    minHeight: 0,\n    maxHeight: 0,\n    clicked: false,\n};\n\nconst colors = BaseStyles.LightColorTheme;\n\nfunction setStyles() {\n    return StyleSheet.create({\n        container: {\n            backgroundColor: colors.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.large,\n            borderRadius: BaseStyles.BorderRadius.small,\n            padding: BaseStyles.MarginPadding.large,\n            paddingTop: 10,\n            paddingBottom: 30,\n            width: BaseStyles.ContentWidth.thin,\n            alignSelf: 'center',\n            borderColor: '#B3C0C2',\n            borderWidth: 1,\n            overflow: 'hidden',\n        },\n        titleContainer: {\n            flexDirection: 'row',\n            backgroundColor: colors.secondary,\n            borderBottomColor: colors.veryLightGray,\n            borderBottomWidth: 1,\n            justifyContent: 'space-between',\n            minHeight: 50,\n        },\n        infoRowContainer: {\n            width: BaseStyles.ContentWidth.wide,\n            paddingVertical: BaseStyles.MarginPadding.mediumConst,\n        },\n        titleText: {\n            minHeight: 20,\n            fontSize: BaseStyles.FontTheme.reg,\n            fontFamily: HomePairFonts.nunito_regular,\n        },\n        textContainer: {\n            width: BaseStyles.ContentWidth.reg,\n            borderBottomColor: colors.veryLightGray,\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n            borderBottomWidth: 1,\n        },\n        buttonImage: {\n            width: 20,\n            height: 20,\n        },\n        body: {\n            paddingBottom: 130,\n            width: '100%',\n        },\n    });\n}\n\nexport default class ApplianceCategoryPanel extends React.Component<AddressPanelProps, AddressPanelState> {\n    styles;\n\n    icons;\n\n    constructor(props: Readonly<AddressPanelProps>) {\n        super(props);\n        this.styles = setStyles();\n        this.state = {...initialState, \n            animation: new Animated.Value(0)};\n        this.toggle = this.toggle.bind(this);\n        this.setMaxHeight = this.setMaxHeight.bind(this);\n        this.setMinHeight = this.setMinHeight.bind(this);\n        this.icons = {\n            up: upArrow,\n            down: downArrow,\n        };\n    }\n\n    setMaxHeight(event) {\n        this.setState({ maxHeight: event.nativeEvent.layout.height });\n    }\n\n    setMinHeight(event) {\n        this.setState({ minHeight: event.nativeEvent.layout.height });\n    }\n\n    toggle() {\n        const { expanded, minHeight, maxHeight, animation } = this.state;\n        const initialValue = expanded ? maxHeight + minHeight : minHeight;\n        const finalValue = expanded ? minHeight : maxHeight + minHeight;\n\n        this.setState({ expanded: !expanded });\n\n        animation.setValue(initialValue);\n        Animated.spring(animation, { toValue: finalValue }).start();\n    }\n\n    selectAddress(property: Property) {\n        const {parentCallBack} = this.props;\n        parentCallBack(property.address, property.propId);\n        this.setState({\n            selectedString: property.address, \n            clicked: true,\n        });\n        this.toggle();\n    }\n\n    renderBody() {\n        const {properties} = this.props;\n        return (\n            <ScrollView style={this.styles.body} onLayout={this.setMaxHeight}>\n                <>{properties.map((property) => \n                    <TouchableHighlight \n                        testID='click-plumbing'\n                        underlayColor=\"#f1f1f1\"\n                        onPress={() => this.selectAddress(property)}\n                        style={this.styles.infoRowContainer}>\n                        <Text style={this.styles.detail}>{property.address}</Text>\n                    </TouchableHighlight>)}</>\n            </ScrollView>\n        );\n    }\n\n    render() {\n        const { up, down } = this.icons;\n        const { expanded, animation, selectedString, clicked } = this.state;\n        let icon = down;\n        if (expanded) {\n            icon = up;\n        }\n\n        return clicked ? \n            (\n                <View style={{alignSelf: 'center', width: BaseStyles.ContentWidth.reg}}>\n                    <Text style={this.styles.titleText}>{selectedString}</Text>\n                </View>\n            ) : (<Animated.View\n                    style={[this.styles.container, { height: animation}, {borderColor: expanded ? colors.primary : colors.lightGray}]}>\n                    <View style={this.styles.titleContainer} onLayout={this.setMinHeight}>\n                        <Text style={this.styles.titleText}>{selectedString}</Text>\n                        <TouchableHighlight\n                            onPress={this.toggle}\n                            underlayColor=\"#f1f1f1\"\n                        >\n                            <Image style={this.styles.buttonImage} source={icon} />\n                        </TouchableHighlight>\n                    </View>\n                    {this.renderBody()}\n                </Animated.View>\n            );\n    }\n}\n","import React from 'react';\nimport {\n    Text,\n    View,\n    Animated,\n    StyleSheet,\n    TouchableHighlight,\n    Image,\n    Platform,\n} from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { ApplianceType } from 'homepairs-types';\nimport { upArrow, downArrow } from 'homepairs-images';\n\n\nexport type ApplianceCategoryPanelProps = {\n    parentCallBack: (appType: ApplianceType) => any,\n    initialCategory: ApplianceType,\n};\n\ntype ApplianceCategoryPanelState = {\n    expanded: boolean;\n    animation: Animated.Value;\n    selectedCategoryIndex: number;\n    selectedCategoryString: string;\n    minHeight: number;\n    maxHeight: number;\n};\n\n\nconst initialState: ApplianceCategoryPanelState = {\n    expanded: false,\n    selectedCategoryIndex: 0,\n    selectedCategoryString: 'Choose a Category',\n    animation: undefined,\n    minHeight: 0,\n    maxHeight: 0,\n};\n\nconst categoryStrings = strings.applianceInfo.categories;\nconst colors = BaseStyles.LightColorTheme;\n\nfunction setStyles() {\n    const bodyPadding = Platform.OS === 'web' ? 35 : 180; \n    return StyleSheet.create({\n        container: {\n            backgroundColor: colors.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.large,\n            borderRadius: BaseStyles.BorderRadius.small,\n            padding: BaseStyles.MarginPadding.large,\n            paddingTop: 10,\n            paddingBottom: 30,\n            width: BaseStyles.ContentWidth.thin,\n            alignSelf: 'center',\n            borderColor: '#B3C0C2',\n            borderWidth: 1,\n            overflow: 'hidden',\n        },\n        titleContainer: {\n            flexDirection: 'row',\n            backgroundColor: colors.secondary,\n            borderBottomColor: colors.veryLightGray,\n            borderBottomWidth: 1,\n            justifyContent: 'space-between',\n            paddingBottom: 15,\n            minHeight: 50,\n        },\n        infoRowContainer: {\n            alignContent: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.wide,\n            paddingVertical: BaseStyles.MarginPadding.mediumConst,\n        },\n        titleText: {\n            fontSize: BaseStyles.FontTheme.reg,\n            fontFamily: HomePairFonts.nunito_regular,\n        },\n        textContainer: {\n            width: BaseStyles.ContentWidth.reg,\n            borderBottomColor: colors.veryLightGray,\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n            borderBottomWidth: 1,\n        },\n        buttonImage: {\n            width: 20,\n            height: 20,\n        },\n        body: {\n            alignItems: 'center',\n            paddingBottom: bodyPadding,\n            width: '100%',\n        },\n    });\n}\n\nexport default class ApplianceCategoryPanel extends React.Component<ApplianceCategoryPanelProps, ApplianceCategoryPanelState> {\n    \n    styles;\n\n    icons;\n\n    constructor(props: Readonly<ApplianceCategoryPanelProps>) {\n        super(props);\n        this.styles = setStyles();\n        this.state = {...initialState, \n            selectedCategoryString: this.categoryToString(),\n            animation: new Animated.Value(0)};\n        this.categoryToString = this.categoryToString.bind(this);\n        this.toggle = this.toggle.bind(this);\n        this.setMaxHeight = this.setMaxHeight.bind(this);\n        this.setMinHeight = this.setMinHeight.bind(this);\n        this.icons = {\n            up: upArrow,\n            down: downArrow,\n        };\n    }\n\n    setMaxHeight(event) {\n        this.setState({ maxHeight: event.nativeEvent.layout.height });\n    }\n\n    setMinHeight(event) {\n        this.setState({ minHeight: event.nativeEvent.layout.height });\n    }\n\n    toggle() {\n        const { expanded, minHeight, maxHeight, animation } = this.state;\n        const initialValue = expanded ? maxHeight + minHeight : minHeight;\n        const finalValue = expanded ? minHeight : maxHeight + minHeight;\n\n        this.setState({ expanded: !expanded });\n\n        animation.setValue(initialValue);\n        Animated.spring(animation, { toValue: finalValue }).start();\n    }\n\n    categoryToString() {\n        const {initialCategory} = this.props;\n        let appTypeString: string;\n        if (initialCategory === ApplianceType.Plumbing) {\n            appTypeString = categoryStrings.PLUMBING;\n        } else if (initialCategory === ApplianceType.GeneralAppliance) {\n            appTypeString = categoryStrings.GA;\n        } else if (initialCategory === ApplianceType.HVAC) {\n            appTypeString = categoryStrings.HVAC;\n        } else if (initialCategory=== ApplianceType.LightingAndElectric) {\n            appTypeString = categoryStrings.LE;\n        } else {\n            appTypeString = 'Choose a category';\n        }\n        return appTypeString;\n    }\n\n    selectCategory(selected: string) {\n        const {parentCallBack} = this.props;\n        let appType = ApplianceType.None;\n        if (selected === categoryStrings.PLUMBING) {\n            appType = ApplianceType.Plumbing;\n        } else if (selected === categoryStrings.GA) {\n            appType = ApplianceType.GeneralAppliance;\n        } else if (selected === categoryStrings.HVAC) {\n            appType = ApplianceType.HVAC;\n        } else if (selected === categoryStrings.LE) {\n            appType = ApplianceType.LightingAndElectric;\n        }\n        parentCallBack(appType);\n        this.setState({selectedCategoryString: selected});\n        this.toggle();\n    }\n\n    renderBody() {\n        return (\n            <View style={this.styles.body} onLayout={this.setMaxHeight}>\n                <TouchableHighlight \n                    testID='click-plumbing'\n                    underlayColor=\"#f1f1f1\"\n                    onPress={() => this.selectCategory(categoryStrings.PLUMBING)}\n                    style={this.styles.infoRowContainer}>\n                    <Text style={this.styles.detail}>{categoryStrings.PLUMBING}</Text>\n                </TouchableHighlight>\n                <TouchableHighlight \n                    testID='click-LE'\n                    underlayColor=\"#f1f1f1\"\n                    onPress={() => this.selectCategory(categoryStrings.LE)} \n                    style={this.styles.infoRowContainer}>\n                    <Text style={this.styles.detail}>{categoryStrings.LE}</Text>\n                </TouchableHighlight>\n                <TouchableHighlight \n                    testID='click-HVAC'\n                    underlayColor=\"#f1f1f1\"\n                    onPress={() => this.selectCategory(categoryStrings.HVAC)} \n                    style={this.styles.infoRowContainer}>\n                    <Text style={this.styles.detail}>{categoryStrings.HVAC}</Text>\n                </TouchableHighlight>\n                <TouchableHighlight \n                    testID='click-GA'\n                    underlayColor=\"#f1f1f1\"\n                    onPress={() => this.selectCategory(categoryStrings.GA)} \n                    style={this.styles.infoRowContainer}>\n                    <Text style={this.styles.detail}>{categoryStrings.GA}</Text>\n                </TouchableHighlight>\n            </View>\n        );\n    }\n\n    render() {\n        const { up, down } = this.icons;\n        const { expanded, animation, selectedCategoryString } = this.state;\n        let icon = down;\n        if (expanded) {\n            icon = up;\n        }\n\n        return (\n            <Animated.View\n                style={[this.styles.container, { height: animation}, {borderColor: expanded ? colors.primary : colors.lightGray}]}\n            >\n                <View style={this.styles.titleContainer} onLayout={this.setMinHeight}>\n                    <Text style={this.styles.titleText}>{selectedCategoryString.toString()}</Text>\n                    <TouchableHighlight\n                        onPress={this.toggle}\n                        underlayColor=\"#f1f1f1\"\n                    >\n                        <Image style={this.styles.buttonImage} source={icon} />\n                    </TouchableHighlight>\n                </View>\n                {this.renderBody()}\n            </Animated.View>\n        );\n    }\n}","import React from 'react';\nimport {\n    TouchableOpacity,\n    Text,\n    View,\n    StyleSheet,\n    Image,\n} from 'react-native';\nimport {ServiceRequest, AccountTypes} from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport { clock } from 'homepairs-images';\nimport Moment from 'moment';\nimport {categoryToString} from 'src/utility';\n\nexport type ServiceRequestButtonProps = {\n    onClick?: (serviceRequest: ServiceRequest) => any,\n    active?: boolean,\n    serviceRequest?: ServiceRequest,\n}\n\nconst colors = BaseStyles.LightColorTheme;\n\nconst styles = StyleSheet.create({\n    container: {\n        borderLeftWidth: 10,\n        borderRadius: BaseStyles.BorderRadius.medium, \n        padding: BaseStyles.MarginPadding.medium,\n        borderColor: colors.lightGray,\n        borderWidth: 1,\n        marginVertical: 10,\n        marginHorizontal: 20,\n    },\n    buttonStyle: {\n        paddingLeft: BaseStyles.MarginPadding.medium,\n    },\n    titleText: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.reg + 2, \n        fontFamily: HomePairFonts.nunito_bold,\n        marginLeft: 2,\n    }, \n    companyDetailsText: {\n        color: colors.lightGray,\n        fontSize: BaseStyles.FontTheme.reg - 1, \n        fontFamily: HomePairFonts.nunito_light,\n        padding: BaseStyles.MarginPadding.xsmallConst,\n    },\n    dateContainer: {\n        flexDirection: 'row',\n        padding: BaseStyles.MarginPadding.xsmallConst,\n    },\n    dateText: {\n        color: colors.tertiary, \n        fontSize: BaseStyles.FontTheme.reg, \n        fontFamily: HomePairFonts.nunito_regular,\n        marginLeft: BaseStyles.MarginPadding.medium,\n    },\n    buttonImage: {\n        width: 24,\n        height: 24,\n    },\n});\n\nexport default function ServiceRequestButton(props: ServiceRequestButtonProps) {\n    const {onClick, active, serviceRequest} = props;\n    Moment.locale('en');\n    const date = Moment(serviceRequest.startDate.toString()).format('LLL');\n\n    return (\n        <View style={[styles.container, {borderLeftColor: active ? colors.roopairs : colors.lightGray}]}>\n            <TouchableOpacity\n                testID='click-service-request-button'\n                style={styles.buttonStyle}\n                onPress={() => onClick(serviceRequest)}\n            >\n                <Text style={styles.titleText}>\n                    {categoryToString(serviceRequest.appliance.category)} Repair\n                </Text>\n                <Text style={styles.companyDetailsText}>\n                    {serviceRequest.companyName}\n                </Text>\n                <Text style={styles.companyDetailsText}>\n                    {serviceRequest.poc}\n                </Text>\n                <View style={styles.dateContainer}>\n                    <Image style={styles.buttonImage} source={clock}/>\n                    <Text style={styles.dateText}>\n                        {date}\n                    </Text>\n                </View>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nServiceRequestButton.defaultProps = {\n    onClick: () => {}, \n    active: true,\n};","const LightModeColors = {\n    title: '#00ADE9',\n\n    primary: 'white',\n    secondary: '#FBFBFB',\n    tertiary: '#1177B0',\n    transparent: 'transparent',\n\n    primaryText: '#374245',\n    seconaryText: '#9BA0A2',\n    headerText: 'black',\n\n    greyCardDivider: '#EFEFEF',\n    blueButton: '#58BEEF',\n    blueButtonText: '#0098CD',\n    greyButton: '#B3C0C2',\n    greyButtonText: '#798285',\n\n    formTitle: '#9BA0A2',\n    inputForm: '#AFB3B5',\n    editInformation: '#AFB3B5',\n\n    overShade: '#00000080',\n    imageOverShade: 'rgba(0,0,0,.6)',\n    headerShadow: 'black',\n\n    primaryImageOverlayText: 'white',\n    secondaryImageOverlayText: '#9DA0A2',\n\n    shadowColor: '#00000030',\n    roopairs: '#40D7A7',\n};\n\nconst DarkModeColors = {\n    title: '#00ADE9',\n\n    primary: '#1E1F21',\n    secondary: '#2A2A2B',\n    tertiary: '#1177B0',\n    transparent: 'transparent',\n\n    primaryText: '#C8BDBA',\n    seconaryText: '#645F5D',\n    headerText: 'white',\n\n    greyCardDivider: '#101010',\n    blueButton: '#58BEEF',\n    blueButtonText: '#0098CD',\n    greyButton: '#4c3f3d',\n    greyButtonText: '#867d7a',\n\n    formTitle: '#645f5d',\n    inputForm: '#504c4a',\n    editInformation: '#504c4a',\n\n    overShade: '#ffffff80',\n    imageOverShade: 'rgba(255,255,255,.6)',\n    headerShadow: 'white',\n\n    primaryImageOverlayText: 'black',\n    secondaryImageOverlayText: '#625f5d',\n\n    shadowColor: '#FFFFFF30',\n};\n\nconst HomePairColors = { LightModeColors, DarkModeColors };\nexport default HomePairColors;\n","import * as BaseStyles from 'homepairs-base-styles';\nimport {StyleSheet} from 'react-native';\n\nconst textStyleBase = {\n    alignSelf: 'center',\n    textAlign: 'center',\n    color: BaseStyles.LightColorTheme.veryLightGray,\n    fontFamily: BaseStyles.FontTheme.tertiary,\n};\n\nconst styles = StyleSheet.create({\n    imageTileContainer: {\n        aspectRatio: 1,\n        justifyContent: 'center',\n        height: 70,\n        width: 70,\n        borderRadius: 7.5,\n        borderWidth: 1,\n        borderColor: BaseStyles.LightColorTheme.veryLightGray,\n        backgroundColor: BaseStyles.LightColorTheme.secondary,\n    },\n    imageTileContainerLarge: {\n        aspectRatio: 1,\n        justifyContent: 'center',\n        height: 100,\n        width: 100,\n        borderRadius: 7.5,\n        borderWidth: 1,\n        borderColor: BaseStyles.LightColorTheme.veryLightGray,\n        backgroundColor: BaseStyles.LightColorTheme.secondary,\n    },\n    imageStyle: {\n        height: '100%',\n        width: '100%',\n        aspectRatio: 1,\n        resizeMode: 'cover',\n        borderRadius: 5,\n        backgroundColor: BaseStyles.LightColorTheme.secondary,   \n    },\n    textTileContainer: {\n        aspectRatio: 1, // Use this to make the component dimensions relative to its height/width\n        justifyContent: 'center',\n        height: 70,\n        width: 70,\n        borderRadius: 7.5,\n        borderWidth: 1,\n        borderColor: BaseStyles.LightColorTheme.secondary,\n        backgroundColor: \"#919799\",\n    },\n});\n\nexport {styles, textStyleBase};","import React from 'react';\nimport { \n    View,\n    StyleSheet,\n    Image,\n    Text,\n} from 'react-native';\nimport {styles, textStyleBase} from './styles';\n\n\nexport type ImageTileProps = {\n    /**\n     * Used to indicate the object during testing\n     */\n    testID?: string,\n\n    /**\n     * The bitmap image used for the image \n     */\n    image: any;\n\n    /**\n     * Optional enlarge to use render a larger tile (web)\n     */\n    enlarge?: boolean;\n\n}\n\nexport type TextTileProps = {\n    /**\n     * Used to indicate the object during testing\n     */\n    testID?: string,\n\n    /**\n     * The bitmap image used for the image \n     */\n    text: string;\n\n    /**\n     * Define the font size of the text \n     */\n    fontSize?: number;\n\n    adjustFontSizeToFit?: boolean;\n\n}\n\n/**\n * ------------------------------------------------------------\n * Image Tiles\n * ------------------------------------------------------------\n * A small unit that holds the image of a bitmap and is formatted in the shape \n * of a rounded tile. This will often been seen on serviceProvider information \n * or the top of the Service Requests page.\n * \n * @param {ImageileProps} props \n */\nexport function ImageTile(props:ImageTileProps){\n    const {image, enlarge} = props;\n    return (\n        <View style={enlarge ? styles.imageTileContainerLarge : styles.imageTileContainer}>\n            <Image source={image} style={styles.imageStyle}/>\n        </View>\n    );\n}\n\nImageTile.defaultProps= {\n    testID: 'image-tile',\n    enlarge: false,\n};\n\n\n/**\n * ------------------------------------------------------------\n * Text Tile\n * ------------------------------------------------------------\n * A small unit that holds a string and is formatted in the shape \n * of a rounded tile. This can be used for the hamburger menu or for \n * the add provider button for the service provider flat list\n * \n * @param {TextTileProps} props \n */\nexport function TextTile(props:TextTileProps){\n    const {text, fontSize, adjustFontSizeToFit} = props;\n    const textStyle = {...textStyleBase, fontSize};\n    const styleSheet = StyleSheet.create({textStyle});\n    return (\n        <View style={styles.textTileContainer}>\n            <Text style={styleSheet.textStyle} adjustsFontSizeToFit={adjustFontSizeToFit}>{text}</Text>\n        </View>\n    );\n}\n\nTextTile.defaultProps= {\n    testID: 'text-tile',\n    fontSize: 30,\n    adjustFontSizeToFit: false,\n};","import React from 'react';\nimport {\n    TouchableOpacity,\n    Text,\n    View,\n    StyleSheet,\n    Platform,\n} from 'react-native';\nimport { HomePairsDimensions, ServiceProvider } from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport Colors from 'homepairs-colors';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport Moment from 'moment';\nimport {isNullOrUndefined} from 'src/utility';\nimport { TextTile, ImageTile } from '../Tiles/Tiles';\n\nexport type ServiceProviderButtonProps = {\n    key?: string,\n    onClick?: (provId: number, name: string) => any,\n    active?: boolean,\n    serviceProvider?: ServiceProvider,\n}\n\nconst colors = BaseStyles.LightColorTheme;\n\nconst styles = StyleSheet.create({\n    container: {\n        borderRadius: BaseStyles.BorderRadius.medium,\n        borderColor: colors.lightGray,\n        borderWidth: 1,\n        margin: 20,\n        minHeight: 200,\n    },\n    buttonStyle: {\n    },\n    titleText: {\n        alignContent: 'center',\n        color: colors.gray,\n        fontSize: BaseStyles.FontTheme.reg + 1,\n        fontFamily: HomePairFonts.nunito_bold,\n        paddingTop: 10, \n    },\n    companyDetailsText: {\n        alignContent: 'center',\n        color: colors.lightGray,\n        fontSize: BaseStyles.FontTheme.reg,\n        fontFamily: HomePairFonts.nunito_light,\n        paddingTop: 20,\n        textAlignVertical: 'center',\n    },\n    payRateText: {\n        alignContent: 'center',\n        color: Colors.LightModeColors.blueButtonText,\n        fontSize: BaseStyles.FontTheme.reg - 1,\n        fontFamily: HomePairFonts.nunito_bold,\n    },\n    dateContainer: {\n        flexDirection: 'row',\n        padding: BaseStyles.MarginPadding.xsmallConst,\n    },\n    dateText: {\n        alignContent: 'center',\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.reg,\n        fontFamily: HomePairFonts.nunito_regular,\n        marginLeft: BaseStyles.MarginPadding.medium,\n    },\n    buttonImage: {\n        width: 24,\n        height: 24,\n    },\n    leftColumnStyle: {\n        flex: 1,\n        textAlign: \"center\",\n        backgroundColor: Colors.LightModeColors.transparent,\n        padding: BaseStyles.MarginPadding.largeConst,\n        paddingBottom: 40,\n        width: HomePairsDimensions.MAX_BUTTON_WIDTH * 0.35,\n        borderRightWidth: 0.5,\n        borderColor: Colors.LightModeColors.greyCardDivider,\n    },\n    rightColumnStyle: {\n        flex: 2,\n        justifyContent: 'flex-start',\n        backgroundColor: Colors.LightModeColors.transparent,\n        padding: BaseStyles.MarginPadding.largeConst,\n        width: HomePairsDimensions.MAX_BUTTON_WIDTH * 0.65,\n        borderLeftWidth: 0.5,\n        borderColor: Colors.LightModeColors.greyCardDivider,\n        minHeight: 200,\n    },\n    imageContainer: {\n        flex: 1,\n        justifyContent: 'center',\n        alignContent: 'center',\n        alignItems: 'center',\n    },\n    companyAddress: {\n        position: 'absolute',\n        bottom: 20,\n        paddingHorizontal: 2,\n        alignContent: 'center',\n        color: colors.gray,\n        fontSize: 14,\n        fontFamily: HomePairFonts.nunito_regular,\n    },\n    starting: {\n        textAlignVertical: 'top',\n        color: colors.lightGray,\n        fontSize: 14,\n        fontFamily: HomePairFonts.nunito_regular,\n    },\n});\n\nfunction renderLogo(name: string, logo?: string) {\n\n    // Render remote images. Need to format in {uri: string} to work on iOS\n    const image = Platform.OS === 'web' ? logo : {uri: logo} ;\n    return isNullOrUndefined(logo) ? \n        <View style={{flex: 1}}>\n            <TextTile text={name} fontSize={16}/>\n        </View>\n        :\n        <View style={Platform.OS === 'web' ? {flex:1, aspectRatio: 1} : {height: '100%', width: '100%'}}>\n            <ImageTile image={image}/>\n        </View>;     \n}\n\nexport default function ServiceProviderButton(props: ServiceProviderButtonProps) {\n    const { onClick, serviceProvider } = props;\n    Moment.locale('en');\n    // const date = Moment(serviceProvider.startDate.toString()).format('LLL');\n    console.log(serviceProvider);\n    return (\n        <View style={[styles.container]}>\n            <TouchableOpacity\n                testID='click-service-request-button'\n                style={styles.buttonStyle}\n                onPress={() => onClick(serviceProvider.provId, serviceProvider.name)}\n            >\n                <View style={{ flexDirection: 'row' }}>\n                    <View style={styles.leftColumnStyle}>\n                        <View style={styles.imageContainer}>\n                            {renderLogo(serviceProvider.name, serviceProvider.logo)}\n                        </View>\n                        <Text style={styles.payRateText}>\n                            ${serviceProvider.payRate} / hour\n                        </Text>\n                        <Text style={styles.starting}>\n                            starting cost\n                        </Text>\n                    </View>\n                    <View style={styles.rightColumnStyle}>\n                        <Text style={styles.titleText}>\n                            {serviceProvider.name}\n                        </Text>\n                        <Text style={styles.companyDetailsText}>\n                            {serviceProvider.skills}\n                        </Text>\n                        <Text style={styles.companyAddress}>\n                            {serviceProvider.address.toUpperCase()}\n                        </Text>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nServiceProviderButton.defaultProps = {\n    onClick: () => { },\n    active: true,\n};","import React from 'react';\nimport {\n    TouchableOpacity,\n    Text,\n    View,\n    ViewStyle,\n    TextStyle,\n    StyleSheet,\n} from 'react-native';\n\nexport type ThinButtonProps = {\n    testID?: string;\n    key?: any;\n    name?: String;\n    onClick?: () => any;\n    onPressIn?: () => any;\n    onPressOut?: () => any;\n    containerStyle?: ViewStyle;\n    buttonStyle?: ViewStyle;\n    buttonTextStyle?: TextStyle;\n};\n\n\n\n/**\n * ------------------------------------------------------------\n * Thin Button\n * ------------------------------------------------------------\n * A component that renders a clickable space\n * with a border and text. This element is intended to be clicked\n * to invoke a specific function. onClick, onPressIn, and onPressOut\n * should have some callback that can communicate with the parent the\n * next steps to take.\n * \n * @param {ThinButtonProps} props \n */\nexport default function ThinButton(props: ThinButtonProps) {\n    // This function will call the parent callback function.\n    const {\n        name,\n        onClick,\n        onPressIn,\n        onPressOut,\n        containerStyle,\n        buttonStyle,\n        buttonTextStyle,\n    } = props;\n\n    function handleClick() {\n        onClick();\n    }\n\n    return (\n        <View style={containerStyle}>\n            <TouchableOpacity\n                testID='click-thin-button'\n                style={buttonStyle}\n                onPress={handleClick}\n                onPressIn={onPressIn}\n                onPressOut={onPressOut}\n            >\n                <Text style={buttonTextStyle}>{name}</Text>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nconst DefaultThinButtonStyles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignSelf: 'center',\n        justifyContent: 'center',\n        paddingHorizontal: 10,\n        minHeight: 50,\n    },\n    button: {\n        alignItems: 'center',\n        backgroundColor: 'transparent',\n        padding: 10,\n        maxWidth: 300,\n        minWidth: 200,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: '#B3C0C2',\n    },\n    buttonText: {\n        color: '#B3C0C2',\n        fontSize: 16,\n        alignSelf: 'center',\n    },\n});\n\nThinButton.defaultProps = {\n    testID: 'thin-button',\n    name: '',\n    onClick: () => {},\n    onPressIn: () => {},\n    onPressOut: () => {},\n    containerStyle: DefaultThinButtonStyles.container,\n    buttonStyle: DefaultThinButtonStyles.button,\n    buttonTextStyle: DefaultThinButtonStyles.buttonText,\n};\n\n","import React from 'react';\nimport { isNullOrUndefined } from 'src/utility';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { \n    View,\n    ImageSourcePropType, \n    ImageStyle,\n    ViewStyle,\n    TextStyle,\n    StyleSheet,\n    Image,\n    TouchableOpacity,\n    Text,\n} from 'react-native';\n\n\ntype Props = {\n    /**\n     * Used to indicate the object during testing\n     */\n    testID?: string,\n\n    /**\n     * The bitmap image used for the image \n     */\n    image: ImageSourcePropType;\n\n    /**\n     * Optional style to format the image. Otherwise, a default style will be \n     * used instead\n     */\n    imageStyle?: ImageStyle;\n\n    /**\n     * Optional name use for the button\n     */\n    name?: string\n\n    /**\n     * Style for the area surround the contents of the button. Here, you would define the border\n     */\n    containerStyle?: ViewStyle;\n\n    /**\n     * The style for the innards of a button. Here, you define the format within the border \n     */\n    buttonStyle?: ViewStyle;\n\n    /**\n     * The style of the text rendered if applicable \n     */\n    buttonTextStyle?: TextStyle;\n\n    /**\n     * Callback function for when this button has been pressed.\n     */\n    onPress: (...args) => any;\n\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignSelf: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width:'100%',\n        paddingHorizontal: 10,\n    },\n    imageStyle: {\n        width: 45,\n        height: 45,\n        resizeMode: 'contain',\n    },\n    button: {\n        alignItems: 'center',\n        backgroundColor: 'transparent',\n        flexDirection: 'column',\n        padding: 10,\n        minWidth: 100,\n        minHeight: 100,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: BaseStyles.LightColorTheme.gray,\n        shadowColor: 'black',\n        shadowRadius: 3,\n        shadowOffset: { width: 1, height: 1 },\n        shadowOpacity: .2,\n        elevation: 2,\n    },\n    buttonText: {\n        marginTop: BaseStyles.MarginPadding.mediumConst,\n        color: BaseStyles.LightColorTheme.gray,\n        fontSize: 10,\n        alignSelf: 'center',\n        textAlign: 'center',\n    },\n});\n\n\n/**\n * ------------------------------------------------------------\n * Button With Bitmap\n * ------------------------------------------------------------\n * A small button whom functions akin to a thin button. It, however, has a image rendered along \n * with optional text. Use this element if you need an image rendered as a button. \n * @param {Props} props \n */\nexport default function ButtonWithBitmap(props:Props){\n    const {image, imageStyle, name, containerStyle, buttonStyle, buttonTextStyle, onPress} = props;\n\n    return (\n        <View style={containerStyle}>\n            <TouchableOpacity style={buttonStyle} onPress={onPress}>\n                <Image source={image} style={imageStyle}/>\n                {isNullOrUndefined(name) ? <></> : <Text style={buttonTextStyle}>{name}</Text>}\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nButtonWithBitmap.defaultProps= {\n    testID: 'button-with-bitmap',\n    containerStyle: styles.container,\n    imageStyle: styles.imageStyle,\n    name: null,\n    buttonStyle: styles.button,\n    buttonTextStyle: styles.buttonText,\n};\n\n","import React from 'react';\nimport {\n    TouchableOpacity,\n    Text,\n    View,\n    ViewStyle,\n    TextStyle,\n    StyleSheet,\n    Image,\n    ImageStyle,\n    ImageSourcePropType,\n} from 'react-native';\nimport { roopairsLogo } from 'homepairs-images';\nimport HomePairColors from 'homepairs-colors';\n\nexport type LoginButtonProps = {\n    key?: any;\n    name?: String;\n    onClick?: () => any;\n    image?: ImageSourcePropType;\n    imageStyle?: ImageStyle;\n    containerStyle?: ViewStyle;\n    buttonStyle?: ViewStyle;\n    buttonTextStyle?: TextStyle;\n};\n\n /**\n  * ------------------------------------------------------------\n  * Login Button\n  * ------------------------------------------------------------\n  * This is a special element that has the same qualities of a thin button.\n  * However, this also is capable of rendering images with two additional\n  * properties image and imageStyle.\n  * \n  * @param {LoginButtonProps} props \n  */\nexport default function LoginButton(props: LoginButtonProps) {\n    const {\n        name,\n        onClick,\n        image,\n        imageStyle,\n        containerStyle,\n        buttonStyle,\n        buttonTextStyle,\n    } = props;\n\n    function onPress() {\n        onClick();\n    }\n\n    return (\n        <View style={containerStyle}>\n            <TouchableOpacity testID='click-login-button' style={buttonStyle} onPress={onPress}>\n                <Image style={imageStyle} source={image} />\n                <Text style={buttonTextStyle}>{name}</Text>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nconst DefaultLoginButtonStyles = StyleSheet.create({\n    container: {\n        alignSelf: 'center',\n        justifyContent: 'center',\n        paddingHorizontal: 10,\n        minHeight: 50,\n    },\n    imageStyle: {\n        width: 40,\n        height: 40,\n        resizeMode: 'contain',\n    },\n    button: {\n        alignItems: 'center',\n        backgroundColor: 'transparent',\n        flexDirection: 'row',\n        padding: 10,\n        maxWidth: 300,\n        minWidth: 200,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: HomePairColors.LightModeColors.roopairs,\n    },\n    signUpButtonText: {\n        color: HomePairColors.LightModeColors.roopairs,\n        fontSize: 15,\n        alignSelf: 'center',\n    },\n});\n\nLoginButton.defaultProps = {\n    name: '',\n    onClick: () => {},\n    image: roopairsLogo,\n    imageStyle: DefaultLoginButtonStyles.imageStyle,\n    containerStyle: DefaultLoginButtonStyles.container,\n    buttonStyle: DefaultLoginButtonStyles.button,\n    buttonTextStyle: DefaultLoginButtonStyles.signUpButtonText,\n};\n","import React from 'react';\nimport {\n    Text,\n    View,\n    Animated,\n    StyleSheet,\n    Image,\n    TouchableOpacity,\n    Platform,\n} from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, Appliance } from 'homepairs-types';\nimport { upArrow, downArrow} from 'homepairs-images';\nimport { ThinButton, ThinButtonProps } from '../Buttons';\n\nexport type AppliancePanelProps = {\n    key?: string;\n    appliance: Appliance;\n    hasButton: boolean;\n    buttonName?: string;\n    onClick?: (child?: any) => any;\n};\n\ntype AppliancePanelState = {\n    expanded: boolean;\n    animation: Animated.Value;\n    minHeight: number;\n    maxHeight: number;\n};\n\nconst initialState: AppliancePanelState = {\n    expanded: false,\n    animation: undefined,\n    minHeight: 0,\n    maxHeight: 0,\n};\n\nconst applianceInfoStrings = strings.applianceInfo.details;\nconst colors = BaseStyles.LightColorTheme;\n\nfunction setStyles() {\n    const bodyPadding = Platform.OS === 'web' ? 25 : 300; \n    return StyleSheet.create({\n        container: {\n            backgroundColor: colors.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.large,\n            borderRadius: BaseStyles.BorderRadius.large,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            paddingBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 30,\n            width: BaseStyles.ContentWidth.thin,\n            alignSelf: 'center',\n            borderColor: colors.lightGray,\n            borderWidth: 1,\n            overflow: 'hidden',\n            marginBottom: 20,\n        },\n        titleContainer: {\n            flexDirection: 'row',\n            borderBottomColor: colors.veryLightGray,\n            borderBottomWidth: 1,\n            justifyContent: 'space-between',\n            minHeight: 50,\n            paddingTop: 5,\n            paddingHorizontal: 10,\n        },\n        infoRowContainer: {\n            flexDirection: 'row',\n            width: BaseStyles.ContentWidth.wide,\n            paddingVertical: BaseStyles.MarginPadding.mediumConst,\n            paddingLeft: 30,\n        },\n        titleText: {\n            minHeight: 20,\n            fontSize: BaseStyles.FontTheme.reg,\n            fontFamily: HomePairFonts.nunito_regular,\n        },\n        textContainer: {\n            width: BaseStyles.ContentWidth.reg,\n            borderBottomColor: colors.veryLightGray,\n            borderBottomWidth: 1,\n        },\n        editButton: {\n            alignItems: 'center',\n            backgroundColor: colors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            width: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: 8,\n            borderWidth: 1,\n            borderColor: colors.lightGray,\n            alignSelf: 'center',\n        },\n        editButtonText: {\n            color: colors.lightGray,\n            fontSize: 20,\n        },\n        buttonImage: {\n            width: 20,\n            height: 20,\n        },\n        body: {\n            paddingTop: BaseStyles.MarginPadding.mediumConst,\n            paddingBottom: bodyPadding,\n        },\n        detailName: {\n            fontSize: BaseStyles.FontTheme.xsmal,\n            marginBottom: BaseStyles.MarginPadding.mediumConst,\n            color: colors.lightGray,\n        },\n        detail: {\n            color: colors.tertiary,\n            fontSize: BaseStyles.FontTheme.reg,\n            fontFamily: HomePairFonts.nunito_regular,\n        },\n        detailContainer: {\n            flex: 1,\n        },\n    });\n}\n\nexport default class AppliancePanel extends React.Component<AppliancePanelProps, AppliancePanelState> {\n    styles;\n\n    icons;\n\n    thinButtonProps: ThinButtonProps = {\n        buttonStyle: {\n            alignItems: 'center',\n            backgroundColor: colors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            width: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: 8,\n            borderWidth: 1,\n            borderColor: colors.lightGray,\n        },\n        buttonTextStyle: {\n            color: colors.lightGray,\n        },\n    };\n\n    constructor(props: Readonly<AppliancePanelProps>) {\n        super(props);\n        this.styles = setStyles();\n        this.state = {...initialState, animation: new Animated.Value(0)};\n        this.toggle = this.toggle.bind(this);\n        this.setMaxHeight = this.setMaxHeight.bind(this);\n        this.setMinHeight = this.setMinHeight.bind(this);\n        this.icons = {\n            up: upArrow,\n            down: downArrow,\n        };\n    }\n\n    setMaxHeight(event) {\n        this.setState({ maxHeight: event.nativeEvent.layout.height });\n    }\n\n    setMinHeight(event) {\n        this.setState({ minHeight: event.nativeEvent.layout.height });\n    }\n\n    checkEmpty(val: any) {\n        return val ? val : '--';\n    }\n\n    toggle() {\n        const { expanded, minHeight, maxHeight, animation } = this.state;\n        const initialValue = expanded ? maxHeight + minHeight : minHeight;\n        const finalValue = expanded ? minHeight : maxHeight + minHeight;\n\n        this.setState({ expanded: !expanded });\n\n        animation.setValue(initialValue);\n        Animated.spring(animation, { toValue: finalValue }).start();\n    }\n\n    renderThinButton() {\n        const {hasButton, buttonName, onClick, appliance} = this.props;\n        if (hasButton) {\n            return <ThinButton \n                name={buttonName} \n                buttonStyle={this.thinButtonProps.buttonStyle} \n                buttonTextStyle={this.thinButtonProps.buttonTextStyle} \n                onClick={() => onClick(appliance)}/>;\n        }\n        return <></>;\n    }\n\n    renderBody() {\n        const { appliance } = this.props;\n        let { manufacturer, modelNum, serialNum, location } = appliance;\n        manufacturer = this.checkEmpty(manufacturer);\n        modelNum = this.checkEmpty(modelNum);\n        serialNum = this.checkEmpty(serialNum);\n        location = this.checkEmpty(location);\n\n        return (\n            <View style={this.styles.body} onLayout={this.setMaxHeight}>\n                <View style={this.styles.infoRowContainer}>\n                    <View style={this.styles.detailContainer}>\n                        <Text style={this.styles.detailName}>\n                            {applianceInfoStrings.manufacturer}\n                        </Text>\n                        <Text style={this.styles.detail}>{manufacturer}</Text>\n                    </View>\n                    <View style={this.styles.detailContainer}>\n                        <Text style={this.styles.detailName}>\n                            {applianceInfoStrings.modelNum}\n                        </Text>\n                        <Text style={this.styles.detail}>{modelNum}</Text>\n                    </View>\n                </View>\n                <View style={this.styles.infoRowContainer}>\n                    <View style={this.styles.detailContainer}>\n                        <Text style={this.styles.detailName}>\n                            {applianceInfoStrings.location}\n                        </Text>\n                        <Text style={this.styles.detail}>{location}</Text>\n                    </View>\n                    <View style={this.styles.detailContainer}>\n                        <Text style={this.styles.detailName}>\n                            {applianceInfoStrings.serialNum}\n                        </Text>\n                        <Text style={this.styles.detail}>{serialNum}</Text>\n                    </View>\n                </View>\n                <View style={this.styles.infoRowContainer}>\n                    <View style={this.styles.detailContainer}>\n                        <Text style={this.styles.detailName}>\n                            {applianceInfoStrings.lastServiceBy}\n                        </Text>\n                        <Text style={this.styles.detail}>--</Text>\n                    </View>\n                    <View style={this.styles.detailContainer}>\n                        <Text style={this.styles.detailName}>\n                            {applianceInfoStrings.lastServiceDate}\n                        </Text>\n                        <Text style={this.styles.detail}>--</Text>\n                    </View>\n                </View>\n                {this.renderThinButton()}\n            </View>\n        );\n    }\n\n    render() {\n        const { up, down } = this.icons;\n        const { expanded, animation } = this.state;\n        const { appliance} = this.props;\n        const { appName } = appliance;\n        let icon = down;\n\n        if (expanded) {\n            icon = up;\n        }\n\n        return (\n            <Animated.View\n                style={[this.styles.container, { height: animation}, {borderColor: expanded ? colors.primary : colors.lightGray}]}\n            >\n                <View style={this.styles.titleContainer} onLayout={this.setMinHeight}>\n                    <Text style={[this.styles.titleText, {color: expanded ? colors.primary : colors.tertiary}]}>{appName}</Text>\n                    <TouchableOpacity\n                        onPress={this.toggle}\n                    >\n                        <Image style={this.styles.buttonImage} source={icon} />\n                    </TouchableOpacity>\n                </View>\n                {this.renderBody()}\n            </Animated.View>\n        );\n    }\n}","import React from 'react';\nimport {\n    Text,\n    View,\n    Animated,\n    StyleSheet,\n    TouchableHighlight,\n    Image,\n    ScrollView,\n} from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { upArrow, downArrow } from 'homepairs-images';\nimport {Property} from 'homepairs-types';\n\n\nexport type ServiceRequestAddressPanelProps = {\n    properties: Property[],\n    parentCallBack: (propId: string) => any\n};\n\n\ntype PanelState = {\n    expanded: boolean;\n    animation: Animated.Value;\n    selectedIndex: number;\n    selectedString: string;\n    minHeight: number;\n    maxHeight: number;\n    clicked: boolean;\n};\n\n\nconst initialState: PanelState = {\n    expanded: false,\n    selectedIndex: 0,\n    selectedString: 'Choose an Address',\n    animation: undefined,\n    minHeight: 0,\n    maxHeight: 0,\n    clicked: false,\n};\n\nconst colors = BaseStyles.LightColorTheme;\n\nfunction setStyles() {\n    return StyleSheet.create({\n        container: {\n            backgroundColor: colors.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.large,\n            borderRadius: BaseStyles.BorderRadius.small,\n            padding: BaseStyles.MarginPadding.large,\n            paddingTop: 10,\n            paddingBottom: 30,\n            width: '100%',\n            alignSelf: 'center',\n            borderColor: '#B3C0C2',\n            borderWidth: 1,\n            overflow: 'hidden',\n        },\n        titleContainer: {\n            flexDirection: 'row',\n            backgroundColor: colors.secondary,\n            borderBottomColor: colors.veryLightGray,\n            borderBottomWidth: 1,\n            justifyContent: 'space-between',\n            paddingBottom: 15,\n            minHeight: 50, \n        },\n        infoRowContainer: {\n            alignContent: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.wide,\n            paddingVertical: BaseStyles.MarginPadding.mediumConst,\n        },\n        titleText: {\n            minHeight: 20,\n            fontSize: BaseStyles.FontTheme.reg,\n            fontFamily: HomePairFonts.nunito_regular,\n        },\n        textContainer: {\n            width: BaseStyles.ContentWidth.reg,\n            borderBottomColor: colors.veryLightGray,\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n            borderBottomWidth: 1,\n        },\n        buttonImage: {\n            width: 20,\n            height: 20,\n        },\n        body: {\n            paddingBottom: 135,\n            width: '100%',\n        },\n    });\n}\n\nexport default class ServiceRequestAddressPanel extends React.Component<ServiceRequestAddressPanelProps, PanelState> {\n    styles;\n\n    icons;\n\n    constructor(props: Readonly<ServiceRequestAddressPanelProps>) {\n        super(props);\n        this.styles = setStyles();\n        this.state = {...initialState, \n            animation: new Animated.Value(0)};\n        this.toggle = this.toggle.bind(this);\n        this.setMaxHeight = this.setMaxHeight.bind(this);\n        this.setMinHeight = this.setMinHeight.bind(this);\n        this.icons = {\n            up: upArrow,\n            down: downArrow,\n        };\n    }\n\n    setMaxHeight(event) {\n        this.setState({ maxHeight: event.nativeEvent.layout.height });\n    }\n\n    setMinHeight(event) {\n        this.setState({ minHeight: event.nativeEvent.layout.height });\n    }\n\n    toggle() {\n        const { expanded, minHeight, maxHeight, animation } = this.state;\n        const initialValue = expanded ? maxHeight + minHeight : minHeight;\n        const finalValue = expanded ? minHeight : maxHeight + minHeight;\n\n        this.setState({ expanded: !expanded });\n\n        animation.setValue(initialValue);\n        Animated.spring(animation, { toValue: finalValue }).start();\n    }\n\n    selectAddress(property: Property) {\n        const {parentCallBack} = this.props;\n        parentCallBack(property.propId);\n        this.setState({\n            selectedString: property.address, \n        });\n        this.toggle();\n    }\n\n    renderBody() {\n        const {properties} = this.props;\n        return (\n            <ScrollView style={this.styles.body} onLayout={this.setMaxHeight}>\n                <>{properties.map((property) => \n                    <TouchableHighlight \n                        testID='click-plumbing'\n                        underlayColor=\"#f1f1f1\"\n                        onPress={() => this.selectAddress(property)}\n                        style={this.styles.infoRowContainer}>\n                        <Text style={this.styles.detail}>{property.address}</Text>\n                    </TouchableHighlight>)}</>\n            </ScrollView>\n        );\n    }\n\n    render() {\n        const { up, down } = this.icons;\n        const { expanded, animation, selectedString} = this.state;\n        let icon = down;\n        if (expanded) {\n            icon = up;\n        }\n\n        return (\n            <>\n                <Animated.View\n                    style={[this.styles.container, { height: animation}, {borderColor: expanded ? colors.primary : colors.lightGray}]}>\n                    <View style={this.styles.titleContainer} onLayout={this.setMinHeight}>\n                        <Text style={this.styles.titleText}>{selectedString}</Text>\n                        <TouchableHighlight\n                            onPress={this.toggle}\n                            underlayColor=\"#f1f1f1\"\n                        >\n                            <Image style={this.styles.buttonImage} source={icon} />\n                        </TouchableHighlight>\n                    </View>\n                    {this.renderBody()}\n                </Animated.View>\n            </>\n        );\n    }\n}","import React from 'react';\nimport {\n    Text,\n    View,\n    Animated,\n    StyleSheet,\n    TouchableHighlight,\n    Image,\n    Platform,\n} from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { upArrow, downArrow } from 'homepairs-images';\n\n\nexport type ServiceTypePanelProps = {\n    parentCallBack: (child: string) => any\n};\n\ntype PanelState = {\n    expanded: boolean;\n    animation: Animated.Value;\n    selectedIndex: number;\n    selectedString: string;\n    minHeight: number;\n    maxHeight: number;\n     /**\n     * If a button has been selected, this state value will force a string to render \n     */\n    hasBeenClicked: boolean,\n};\n\n\nconst initialState: PanelState = {\n    expanded: false,\n    selectedIndex: 0,\n    selectedString: 'Choose a Service Type',\n    animation: undefined,\n    minHeight: 0,\n    maxHeight: 0,\n    hasBeenClicked: false,\n};\n\ntype PanelProps = {\n    parentCallBack: (child: string) => any\n};\n\nconst colors = BaseStyles.LightColorTheme;\n\nfunction setStyles() {\n    const bodyPadding = Platform.OS === 'web' ? 25 : 140; \n    return StyleSheet.create({\n        container: {\n            backgroundColor: colors.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.large,\n            borderRadius: BaseStyles.BorderRadius.small,\n            padding: BaseStyles.MarginPadding.large,\n            paddingTop: 10,\n            paddingBottom: 30,\n            width: BaseStyles.ContentWidth.thin,\n            alignSelf: 'center',\n            borderColor: '#B3C0C2',\n            borderWidth: 1,\n            overflow: 'hidden',\n        },\n        titleContainer: {\n            flexDirection: 'row',\n            backgroundColor: colors.secondary,\n            borderBottomColor: colors.veryLightGray,\n            borderBottomWidth: 1,\n            justifyContent: 'space-between',\n            minHeight: 50,\n        },\n        infoRowContainer: {\n            alignContent: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.wide,\n            paddingVertical: BaseStyles.MarginPadding.mediumConst,\n        },\n        titleText: {\n            minHeight: 20,\n            fontSize: BaseStyles.FontTheme.reg,\n            fontFamily: HomePairFonts.nunito_regular,\n        },\n        textContainer: {\n            width: BaseStyles.ContentWidth.reg,\n            borderBottomColor: colors.veryLightGray,\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n            borderBottomWidth: 1,\n        },\n        buttonImage: {\n            width: 20,\n            height: 20,\n        },\n        body: {\n            alignItems: 'center',\n            paddingBottom: bodyPadding,\n            width: '100%',\n        },\n        option: {\n            fontSize : BaseStyles.FontTheme.reg,\n            fontFamily: HomePairFonts.nunito_regular,\n        },\n    });\n}\n\nconst serviceTypes = ['Repair', 'Installation', 'Maintenance'];\n\nexport default class ServiceTypePanel extends React.Component<ServiceTypePanel, PanelState> {\n    styles;\n\n    icons;\n\n    constructor(props: Readonly<PanelProps>) {\n        super(props);\n        this.styles = setStyles();\n        this.state = {...initialState, \n            animation: new Animated.Value(0)};\n        this.toggle = this.toggle.bind(this);\n        this.setMaxHeight = this.setMaxHeight.bind(this);\n        this.setMinHeight = this.setMinHeight.bind(this);\n        this.icons = {\n            up: upArrow,\n            down: downArrow,\n        };\n    }\n\n    setMaxHeight(event) {\n        this.setState({ maxHeight: event.nativeEvent.layout.height });\n    }\n\n    setMinHeight(event) {\n        this.setState({ minHeight: event.nativeEvent.layout.height });\n    }\n\n    toggle() {\n        const { expanded, minHeight, maxHeight, animation } = this.state;\n        const initialValue = expanded ? maxHeight + minHeight : minHeight;\n        const finalValue = expanded ? minHeight : maxHeight + minHeight;\n\n        this.setState({ expanded: !expanded });\n\n        animation.setValue(initialValue);\n        Animated.spring(animation, { toValue: finalValue }).start();\n    }\n\n    selectServiceType(selected: string) {\n        const {parentCallBack} = this.props;\n        parentCallBack(selected);\n        this.setState({selectedString: selected, hasBeenClicked: true,});\n        this.toggle();\n    }\n\n    renderBody() {\n        return (\n            <View style={this.styles.body} onLayout={this.setMaxHeight}>\n                <>{serviceTypes.map((address) => \n                    <TouchableHighlight \n                        testID='click-service-type'\n                        underlayColor=\"#f1f1f1\"\n                        onPress={() => this.selectServiceType(address)}\n                        style={this.styles.infoRowContainer}>\n                        <Text style={this.styles.detail}>{address}</Text>\n                    </TouchableHighlight>)}</>\n            </View>\n        );\n    }\n\n    render() {\n        const { up, down } = this.icons;\n        const { expanded, animation, selectedString, hasBeenClicked } = this.state;\n        let icon = down;\n        if (expanded) {\n            icon = up;\n        }\n\n        return hasBeenClicked ? \n        (<View style={{alignSelf: 'center', width: BaseStyles.ContentWidth.reg}}>\n            <Text style={this.styles.option}>{selectedString}</Text>\n            </View>)\n        :\n        (\n            <Animated.View\n                style={[this.styles.container, { height: animation}, {borderColor: expanded ? colors.primary : colors.lightGray}]}\n            >\n                <View style={this.styles.titleContainer} onLayout={this.setMinHeight}>\n                    <Text style={this.styles.titleText}>{selectedString}</Text>\n                    <TouchableHighlight\n                        onPress={this.toggle}\n                        underlayColor=\"#f1f1f1\"\n                    >\n                        <Image style={this.styles.buttonImage} source={icon} />\n                    </TouchableHighlight>\n                </View>\n                {this.renderBody()}\n            </Animated.View>\n        );\n    }\n}","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { StyleSheet, Text, View } from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { Appliance } from 'homepairs-types';\nimport AppliancePanel from '../AppliancePanel';\n\nexport type ApplianceCategorizerProps = {\n    key?: string,\n    appliances: Appliance[];\n    onClick?: (child?: any) => any;\n    hasButton?: boolean,\n    buttonName?: string,\n};\n\ntype Props = ApplianceCategorizerProps;\n\nfunction setStyles(colorTheme?: BaseStyles.ColorTheme) {\n    const colors = colorTheme == null ? BaseStyles.LightColorTheme : colorTheme;\n    return StyleSheet.create({\n        container: {\n            backgroundColor: colors.secondary,\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.medium,\n            width: BaseStyles.ContentWidth.max,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        categoryContainer: {\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n        },\n        categoryText: {\n            fontSize: BaseStyles.FontTheme.small,\n            fontFamily: HomePairFonts.nunito_regular,\n            alignSelf: 'center',\n            marginBottom: BaseStyles.MarginPadding.mediumConst,\n            color: colors.lightGray,\n        },\n        emptyText: {\n            color: colors.red,\n            alignSelf: 'center',\n            fontSize: BaseStyles.FontTheme.reg,\n            margin: BaseStyles.MarginPadding.largeConst,\n        },\n    });\n}\n\nexport default function ApplianceCategorizer(props: Props) {\n    const { appliances, onClick, hasButton, buttonName } = props;\n    const styles = setStyles();\n\n    const locations: string[] = [];\n\n    const categories: Map<string, Appliance[]> = new Map();\n\n    const finalApps = [];\n\n    function findCategories() {\n        appliances.forEach(app => {\n            const { location } = app;\n            if (!locations.includes(location.toUpperCase())) {\n                locations.push(location.toUpperCase());\n            }\n        });\n    }\n\n    function categorizeAppliances() {\n        locations.forEach(homeLocation => {\n            categories.set(\n                homeLocation,\n                [...appliances].filter(\n                    app => homeLocation === app.location.toUpperCase(),\n                ),\n            );\n        });\n    }\n\n    function categorize() {\n        findCategories();\n        categorizeAppliances();\n        categories.forEach((value, locationKey) => {\n            const key = locationKey;\n            finalApps.push(\n                <View key={key} style={styles.categoryContainer}>\n                    <Text key={key} style={styles.categoryText}>{locationKey}</Text>\n                    {value.map(app => {\n                        return (\n                            <AppliancePanel\n                                key={app.applianceId}\n                                hasButton={hasButton}\n                                buttonName={buttonName}\n                                onClick={onClick}\n                                appliance={app}\n                            />\n                        );\n                    })}\n                </View>);\n        });\n        return finalApps;\n    }\n\n    return (\n        appliances.length === 0 ? (<Text style={styles.emptyText}>\n            No appliances have been added\n        </Text>) :(\n        <View style={styles.container}>\n            <>{categorize()}</>\n        </View>\n    ));\n}\n\nApplianceCategorizer.defaultProps = {\n    hasButton: true,\n    buttonName: 'Edit',\n};\n","import React, { ReactElement } from 'react';\nimport { StyleSheet, View, Text, TouchableOpacity } from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\n\nexport type CardProps = {\n    key?: any,\n    children?: ReactElement<any,any>[] | ReactElement<any,any>;\n    containerStyle?: {};\n    wrapperStyle?: {};\n    title?: String;\n    titleStyle?: {};\n    subtitle?: String;\n    subtitleStyle?: {};\n    titleContainerStyle?: {};\n    closeButtonContainerStyle?: {};\n    closeButtonStyle?: {};\n    showCloseButton?: Boolean;\n    closeButtonPressedCallBack?: (arg0?: any) => any;\n};\n\nconst defaultStyles = StyleSheet.create({\n    container: {\n        backgroundColor: 'white',\n        marginHorizontal: '5%',\n        borderRadius: 7,\n        shadowColor: 'black',\n        shadowRadius: 20,\n        shadowOffset: { width: 1, height: 1 },\n        shadowOpacity: 100,\n        elevation: 9,\n    },\n    generalIndexContainer: {\n        height: '100%',\n        width: '100%',\n        alignItems: 'center',\n        flex: 1,\n    },\n    title: {\n        color: '#00ADE9',\n        fontFamily: 'nunito-regular',\n        fontSize: 32,\n        alignSelf: 'center',\n    },\n    subtitle: {\n        color: '#00ADE9',\n        fontFamily: 'nunito-regular',\n        fontSize: 20,\n        alignSelf: 'center',\n    },\n    titleContainer: {\n        width: '95%',\n        borderBottomColor: '#AFB3B5',\n        paddingVertical: 5,\n        borderBottomWidth: 1,\n        alignSelf: 'center',\n        justifyContent: 'center',\n    },\n    wrapper: {\n        width: '95%',\n        marginVertical: 10,\n        alignSelf: 'center',\n        justifyContent: 'center',\n    },\n    closeButton: {\n        flex:1,\n        fontSize: 20,\n        color: '#AFB3B5',\n        fontFamily: HomePairFonts.nunito_regular,\n    },\n    closeButtonContainer: {\n        right: '5%',\n        top: 20,\n        justifyContent: 'center',\n        paddingBottom: '2.5%',\n        maxHeight: 40,\n        position: 'absolute',\n        zIndex: 1, // Needed for absolution position within TouchableOpacity\n    },\n    titleCloseButtonContainer: {\n        flex: 1,\n        flexDirection: 'column',\n    },\n    closeButtonWrapper: {\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n    },\n});\n\n\n/**\n * ------------------------------------------------------------\n * Card\n * ------------------------------------------------------------\n * Renders a space that appears to be a 'card' hovering over the\n * parent. It has the capability of rendering a title, subtiltle, titledivider,\n * as well as take in children components in typical React and React-Native\n * fashion.\n *\n * */\nexport default function Card(props: CardProps) {\n    const {\n        children,\n        containerStyle,\n        wrapperStyle,\n        title,\n        titleStyle,\n        subtitle,\n        subtitleStyle,\n        titleContainerStyle,\n        closeButtonStyle,\n        showCloseButton,\n        closeButtonPressedCallBack,\n    } = props;\n\n    const { closeButtonContainer, closeButtonWrapper } = defaultStyles;\n\n    function renderCloseButton() {\n        if (showCloseButton) {\n            return (\n                <TouchableOpacity\n                    testID='click-card-close-button'\n                    style={closeButtonContainer}\n                    onPress={closeButtonPressedCallBack}\n                >\n                    <View style={closeButtonWrapper}>\n                        <Text style={closeButtonStyle}>X</Text>\n                    </View>\n                </TouchableOpacity>\n            );\n        }\n        return <></>;\n    }\n\n    function renderSubtitle() {\n        if (subtitle == null) {\n            return <></>;\n        }\n        return <Text style={subtitleStyle}>{subtitle}</Text>;\n    }\n\n    function renderTitle() {\n        if (title == null) return <></>;\n\n        return (\n            <View style={defaultStyles.generalIndexContainer}>\n                <View style={titleContainerStyle}>\n                    <Text style={titleStyle}>{title}</Text>\n                    {renderSubtitle()}\n                </View>\n            </View>\n        );\n    }\n\n    return (\n        <View style={containerStyle}>\n            {renderCloseButton()}\n            {renderTitle()}\n            <View style={wrapperStyle}>{children}</View>\n        </View>\n    );\n}\n\nCard.defaultProps = {\n    key: null,\n    children: <></>,\n    containerStyle: defaultStyles.container,\n    wrapperStyle: defaultStyles.wrapper,\n    title: null,\n    titleStyle: defaultStyles.title,\n    subtitle: null,\n    subtitleStyle: defaultStyles.subtitle,\n    titleContainerStyle: defaultStyles.titleContainer,\n    closeButtonStyle: defaultStyles.closeButton,\n    closeButtonContainerStyle: defaultStyles.closeButtonContainer,\n    showCloseButton: false,\n    closeButtonPressedCallBack: () => {},\n};\n\n","import React, { ReactElement } from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\n\nexport type StickerProps = {\n    /** \n     * React elements passed into the sticker to be rendered with a background\n     */\n    children?: ReactElement[] | ReactElement;\n    style?: ViewStyle;\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'rgba(0,0,0,.25)',\n        width: '90%',\n        alignSelf: 'center',\n        alignItems: 'center',\n        marginVertical: 30,\n        padding: 20,\n        borderRadius: 5,\n    },\n});\n\n/**\n * ------------------------------------------------------------\n * Sticker\n * ------------------------------------------------------------\n * A simple component whose purpose is to present text with a background.\n * It takes in a regular viewStyle and is capable of rendering ReactComponents\n * in standard React fashion.\n * */\nexport default function Sticker(props: StickerProps) {\n    const { style, children } = props;\n    return <View style={style}>{children}</View>;\n}\n\nSticker.defaultProps = {\n    children: <></>,\n    style: styles.container,\n};\n","import React from 'react';\nimport {DateTimePicker} from 'react-widgets';\nimport Moment from 'moment';\nimport momentLocalizer from 'react-widgets-moment';\nimport 'react-widgets/dist/css/react-widgets.css';\n\n\nMoment.locale('en');\nmomentLocalizer();\n\ntype Props = {\n    serviceDate: Date, \n    getFormDate: (date: Date) => any\n}\n\nexport default function DatePickerWeb(props: Props){\n\n    const {serviceDate, getFormDate} = props;\n    const startDate = new Date();\n    const maxDate = new Date();\n\n    startDate.setHours(0, 0, 0);\n    maxDate.setDate(startDate.getDate() + 90);\n    maxDate.setHours(0, 0, 0);\n\n    return <DateTimePicker \n            key='web datetime picker'\n            dropDown\n            value={serviceDate}\n            onChange={value => getFormDate(value)}\n            min={startDate}\n            step={15}\n            time />;\n}","import * as React from 'react';\nimport {\n    Platform,\n    View,\n    Text,\n    ScrollView,\n    StyleSheet,\n    StatusBar,\n    Dimensions,\n} from 'react-native';\nimport {Card, ThinButton} from 'src/elements';\nimport strings from 'homepairs-strings';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport { HomePairsDimensions } from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport {NavigationRouteHandler} from 'src/routes';\n\n\nexport type AuthPassProps = {\n    /**\n     * Text of the button rendered at the bottom of the component \n     */\n    button: string;\n\n    /**\n     * Color of the button rendered at the bottom of the component\n     */\n    buttonColor: string;\n\n    /**\n     * Contents of the subtitle, renders a TextInput if a string is passed.\n     * Otherwise, the reactElement is used\n     */\n    subtitle: string | React.ReactElement;\n\n    /**\n     * Text presented when the modal is visible \n     */\n    loadingModalText: string;\n\n    /**\n     * Text for the unclickable content below the button\n     */\n    underButtonText: string;\n\n    /**\n     * Text for the clickable content below the button\n     */\n    highlightedText: string;\n};\n\nexport type AuthPageInjectedProps = {\n    /**\n     * Callback Function that invokes after the highlighted text has been clicked. \n     */\n    clickHighlightedText?: (arg?: any) => any;\n\n    /**\n     * Callback Function that invokes after the thin button has been clicked. \n     */\n    clickButton?: (arg: any) => any;\n\n    /**\n     * Callback Function the Base component invokes in order to change toggle the \n     * error state of withAuthPage component. Also takes in an optional string \n     * parameter\n     */\n    setErrorState?: (arg1: boolean, arg2?: string) => any;\n\n    /**\n     * Object used to navigate between navigation routes.\n     */\n    navigation?: NavigationRouteHandler;\n};\n\ntype AuthPageState = {\n    /**\n     * Indicates if an error message should be displayed by the card. This should be set to true\n     * if authorization fails. Do not set this for invalid input.\n     */\n    error: boolean;\n\n    /**\n     * The error message to display on the card. This should be interpreted from error messages \n     * recieved from the Homepairs API or if a 400/500 error occurs. \n     */\n    errorMessage: string;\n\n    /**\n     * Callback function that is intended to get defined by the wrapped component. This will\n     * invoke a method when the thin button has been clicked.\n     */\n    clickThinButton:() => void;\n\n    /**\n     * Callback function that is intended to get defined by the wrapped component. This will\n     * invoke a method when the highlighted text underneath the button has been clicked.\n     */\n    clickHighlightedText: () => void;\n};\n\nconst initalState: AuthPageState = {\n    error: false,\n    errorMessage: '',\n    clickThinButton: () => {},\n    clickHighlightedText: () => {},\n};\n\nconst colorTheme = BaseStyles.LightColorTheme;\n\nfunction setStyles(buttonColor: string) {\n    return StyleSheet.create({\n        container: {\n            alignItems: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.max,\n            flex: 1,\n        },\n        pallet: {\n            backgroundColor: colorTheme.space,\n            width: BaseStyles.ContentWidth.max,\n            alignSelf: 'center',\n            alignContent: 'center',\n            flex: 1,\n            minWidth: HomePairsDimensions.MIN_CONTENT_SIZE,\n        },\n        scrollStyle: {\n            marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.max,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: 1, // Needed to center the contents of the scroll container\n        },\n        cardContainerStyle: {\n            width: BaseStyles.ContentWidth.reg,\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n            backgroundColor: colorTheme.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.large,\n            borderRadius: BaseStyles.BorderRadius.large,\n            shadowColor: colorTheme.shadow,\n            shadowRadius: 5,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 0.25,\n            elevation: 2,\n        },\n        cardTitleStyle: {\n            color: colorTheme.primary,\n            fontFamily: HomePairFonts.nunito_semibold,\n            fontSize: BaseStyles.FontTheme.title,\n            alignSelf: 'center',\n        },\n        cardTitleContainerStyle: {\n            width: BaseStyles.ContentWidth.max,\n            borderBottomColor: colorTheme.veryLightGray,\n            paddingTop:\n                (BaseStyles.MarginPadding.largeConst +\n                    BaseStyles.MarginPadding.mediumConst) /\n                2,\n            paddingBottom: BaseStyles.MarginPadding.smallConst,\n            borderBottomWidth: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        cardWrapperStyle: {\n            paddingTop: BaseStyles.MarginPadding.medium,\n            paddingHorizontal: BaseStyles.MarginPadding.large,\n        },\n        errorText: {\n            fontSize: BaseStyles.FontTheme.small,\n            color: colorTheme.red,\n        },\n        modalText: {\n            fontFamily: HomePairFonts.nunito_regular,\n            fontSize: BaseStyles.FontTheme.reg,\n        },\n        thinButtonContainer: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            minHeight: 50,\n        },\n        thinButton: {\n            alignItems: 'center',\n            backgroundColor: colorTheme.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: buttonColor,\n        },\n        thinButtonText: {\n            color: buttonColor,\n            fontSize: BaseStyles.FontTheme.lg,\n            alignSelf: 'center',\n        },\n        subTitleText: {\n            color: colorTheme.tertiary,\n            fontFamily: BaseStyles.FontTheme.primary,\n            fontSize:\n                Dimensions.get('window').width >\n                HomePairsDimensions.DROP_MENU_WIDTH\n                    ? BaseStyles.FontTheme.reg\n                    : BaseStyles.FontTheme.small,\n            marginVertical: BaseStyles.MarginPadding.medium,\n        },\n        submitSection: {\n            flexDirection: 'column',\n            padding: BaseStyles.MarginPadding.mediumConst,\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            width: BaseStyles.ContentWidth.half,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        signUpSection: {\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '65%',\n            minWidth: 250,\n            marginBottom: BaseStyles.MarginPadding.xlargConst,\n            alignSelf: 'center',\n        },\n        standardText: {\n            fontFamily: BaseStyles.FontTheme.primary,\n            fontSize:\n                Dimensions.get('window').width >\n                HomePairsDimensions.DROP_MENU_WIDTH\n                    ? BaseStyles.FontTheme.reg\n                    : BaseStyles.FontTheme.small,\n            color: '#9BA0A2',\n            marginTop: BaseStyles.MarginPadding.medium,\n        },\n    });\n}\n\n/**\n * ------------------------------------------------------------\n * withAuthPage\n * ------------------------------------------------------------\n * A High Order Component (HOC) that renders a smaller component into the homepairs \n * authorization page styles. It will inject into the wrapped component, callback functions\n * for error presentation, clicking the highlighted text, clicking the button, and for \n * toggling the visibility of the modal. Please refer to the AuthPassProps Type for information\n * regarding the data presented by this modal\n * @param {React.ReactElement} WrappedComponent \n * @param {AuthPassProps} defaultAuthPassProps  */\n\nexport function withAuthPage(WrappedComponent: any,defaultAuthPassProps: AuthPassProps) {\n    let styles: any = null;\n\n    function renderSubtitle() {\n        // The subtitle passed is a simple string. We render a new Text Element for it\n        if (typeof defaultAuthPassProps.subtitle === 'string') {\n            return (\n                <Text testID='auth-subtitle' style={styles.subTitleText}>{defaultAuthPassProps.subtitle}</Text>\n            );\n        }\n        // If the subtitle is an actual component, render the component then. \n        if (React.isValidElement(defaultAuthPassProps.subtitle)) {\n            return <View testID='auth-subtitle-element'>{defaultAuthPassProps.subtitle}</View>;\n        }\n        // Default case, we return essentially nothing. \n        return <></>;\n    }\n    \n    return class ComponentBase extends React.Component<any,AuthPageState> {\n        constructor(props: Readonly<any>) {\n            super(props);\n            styles = setStyles(defaultAuthPassProps.buttonColor);\n\n            // Bind methods that are called outside of this class\n            this.setThinButtonClick = this.setThinButtonClick.bind(this);\n            this.setHighlightedClick = this.setHighlightedClick.bind(this);\n            this.setErrorFlag = this.setErrorFlag.bind(this);\n\n            this.state = initalState;\n        }\n\n\n        /* ******** Methods that will be injected into the Wrapped Component ******* */\n        setHighlightedClick(arg: () => void): void {\n            this.setState({\n                clickHighlightedText: arg,\n            });\n        }\n\n        setThinButtonClick(arg: () => void): void {\n            this.setState({\n                clickThinButton: arg,\n            });\n        }\n\n        setErrorFlag(isShown: boolean, message?: string) {\n            this.setState({\n                error: isShown,\n                errorMessage: message,\n            });\n        }\n        /* ******** Methods that will be injected into the Wrapped Component ******* */\n\n\n        showError() {\n            const { error, errorMessage } = this.state;\n            if (!error) {\n                return <></>;\n            }\n            return <Text testID='auth-error' style={styles.errorText}>{errorMessage}</Text>;\n        }\n\n        renderSignInButton() {\n            const { clickThinButton } = this.state;\n            return (\n                <View style={styles.submitSection}>\n                    <ThinButton\n                    name={defaultAuthPassProps.button}\n                    onClick={clickThinButton}\n                    containerStyle={styles.thinButtonContainer}\n                    buttonStyle={styles.thinButton}\n                    buttonTextStyle={styles.thinButtonText}/>\n                </View>\n            );\n        }\n\n        renderUnderButtonText() {\n            const {clickHighlightedText} = this.state;\n            return (\n                <View style={styles.signUpSection}>\n                    <Text style={styles.standardText}>\n                        {defaultAuthPassProps.underButtonText}\n                        <Text\n                        testID='highlighted-pressable-text'\n                        style={{color: colorTheme.primary}}\n                        onPress={clickHighlightedText}>\n                            {defaultAuthPassProps.highlightedText}\n                        </Text>\n                    </Text>\n                </View>\n            );\n        }\n\n        renderContents() {\n          const {navigation} = this.props;\n          return (\n            <View style={styles.container}>\n                {renderSubtitle()}\n                {this.showError()}\n                <WrappedComponent\n                    clickButton={this.setThinButtonClick}\n                    clickHighlightedText={this.setHighlightedClick}\n                    setErrorState={this.setErrorFlag}\n                    navigation={navigation}/>\n                {this.renderSignInButton()}\n                {this.renderUnderButtonText()}\n            </View>);\n        }\n\n        render() {\n            const directionalLockEnabled = true; \n            const automaticallyAdjustContentInsets = false;\n            return (\n                <View style={styles.pallet}>\n                    <ScrollView\n                    style={styles.scrollStyle}\n                    contentContainerStyle={styles.scrollContentContainerStyle}\n                    directionalLockEnabled={directionalLockEnabled}\n                    automaticallyAdjustContentInsets={automaticallyAdjustContentInsets}>\n                        <Card\n                        title={strings.title}\n                        titleStyle={styles.cardTitleStyle}\n                        titleContainerStyle={styles.cardTitleContainerStyle}\n                        containerStyle={styles.cardContainerStyle}\n                        wrapperStyle={styles.cardWrapperStyle}>\n                            {this.renderContents()}\n                        </Card>\n                    </ScrollView>\n                </View>\n            );\n        }\n    };\n}\n","import React from 'react';\nimport { InputForm } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { StyleSheet} from 'react-native';\nimport { isEmailSyntaxValid, isPasswordValid } from 'src/utility';\nimport { \n    NavigationRouteHandler, \n    NavigationRouteScreenProps,\n    navigationPages,\n} from 'src/routes';\nimport {AuthPageInjectedProps} from '../AuthPage/WithAuthPage';\n\nexport type LoginViewDispatchProps = {\n    onFetchAccount: (\n        username: string,\n        password: string,\n        modalSetOff: () => any,\n        navigation: NavigationRouteHandler\n    ) => void;\n};\n\nexport type LoginProps = LoginViewDispatchProps &\n    AuthPageInjectedProps &\n    NavigationRouteScreenProps;\n\nexport type LoginState = {\n    username: string;\n    password: string;\n};\n\nconst signInStrings = strings.signInPage;\nconst initialState: LoginState = {\n    username: '',\n    password: '',\n};\n\nconst colors = BaseStyles.LightColorTheme;\nconst styles = StyleSheet.create({\n    formTitle: {\n        marginVertical: '3.5%',\n        fontFamily: BaseStyles.FontTheme.primary,\n        color: colors.lightGray,\n    },\n    input: {\n        alignItems: 'center',\n        alignSelf: 'center',\n        margin: BaseStyles.MarginPadding.xsmallConst,\n        minWidth: 40,\n        width: BaseStyles.ContentWidth.max,\n        height: 40,\n        color: colors.tertiary,\n        borderColor: colors.lightGray,\n        borderWidth: 1,\n        borderRadius: BaseStyles.BorderRadius.small,\n        paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n    },\n});\n\n\n\n\n/**\n * ---------------------------------------------------\n * Login Screen Base\n * ---------------------------------------------------\n * Basic forms used to when the user navigates to the homepairs website. These forms are intended\n * to have very basic authentication and assumes that the user has an account with Homepairs and \n * Roopairs. Upon, failure to authenticate, this with set the error state of the parent component \n * (withAuth) and will show errors within its input forms. This is intended to be used with the \n * withAuth High Order Component and the redux store for full functionality.\n */\nexport class LoginScreenBase extends React.Component<LoginProps,LoginState> {\n\n    loginRef;\n\n    passwordRef;\n\n    constructor(props: Readonly<LoginProps>) {\n        super(props);\n        this.getFormUsername = this.getFormUsername.bind(this);\n        this.getFormPassword = this.getFormPassword.bind(this);\n        this.setModalOff = this.setModalOff.bind(this);\n        this.clickButton = this.clickButton.bind(this);\n        this.clickHighlightedText = this.clickHighlightedText.bind(this);\n        this.state = initialState;\n        this.loginRef = React.createRef();\n        this.passwordRef = React.createRef();\n        props.clickButton(this.clickButton);\n        props.clickHighlightedText(this.clickHighlightedText);\n    }\n\n    /**\n     * Sets the state of the modal to hidden and then displays an error message. If none is passed\n     * defaults to 'Error Message'\n     */\n\n     /* \n        TODO: There is no clean way to redirect from a modal. You must simply \n        navigate back to the previous page and then move forward from the previous page.\n     */\n     \n    setModalOff(error?:string) {\n        const { navigation, setErrorState } = this.props;\n        navigation.navigate(navigationPages.LoginScreen);\n        setErrorState(true, error);\n    }\n\n    getFormUsername(childData: string) {\n        this.setState({ username: childData });\n    }\n\n    getFormPassword(childData: string) {\n        this.setState({ password: childData });\n    }\n\n    clickHighlightedText() {\n        const { navigation } = this.props;\n        navigation.navigate(navigationPages.SignUpScreen);\n    }\n\n    validateForms(username: string, password: string) {\n        let check = true;\n        if (!isEmailSyntaxValid(username)) {\n            this.loginRef.current.setError(true);\n            check = false;\n        }\n        if (!isPasswordValid(password)) {\n            this.passwordRef.current.setError(true);\n            check = false;\n        }\n        return check;\n    }\n\n    resetForms() {\n        this.loginRef.current.setError(false);\n        this.passwordRef.current.setError(false);\n    }\n\n    clickButton() {\n        const { onFetchAccount, navigation } = this.props;\n        const { username, password } = this.state;\n        this.resetForms();\n        if (this.validateForms(username, password)) {\n            navigation.navigate(navigationPages.LoggingInModal, null, true);\n            onFetchAccount(username, password, this.setModalOff, navigation);\n        }\n    }\n\n    render() {\n        const inputFormProps = [\n            {\n                ref: this.loginRef,\n                key: signInStrings.inputForms.email,\n                name: signInStrings.inputForms.email,\n                parentCallBack: this.getFormUsername,\n                formTitleStyle: styles.formTitle,\n                inputStyle: styles.input,\n                errorMessage: 'Invalid Username! Must be an email',\n                trim: true,\n            },\n            {\n                ref: this.passwordRef,\n                key: signInStrings.inputForms.password,\n                name: signInStrings.inputForms.password,\n                parentCallBack: this.getFormPassword,\n                formTitleStyle: styles.formTitle,\n                inputStyle: styles.input,\n                secureTextEntry: true,\n                errorMessage: 'Invalid password. Must be at least 6 characters',\n            },\n        ];\n        return inputFormProps.map((properties, index) => {\n            const testID = `login-screen-input-form-${index.toString()}`;\n            return (\n                <InputForm\n                    testID={testID}\n                    ref={properties.ref}\n                    key={properties.key}\n                    name={properties.name}\n                    parentCallBack={properties.parentCallBack}\n                    formTitleStyle={properties.formTitleStyle}\n                    inputStyle={properties.inputStyle}\n                    secureTextEntry={properties.secureTextEntry}\n                    errorMessage={properties.errorMessage}\n                    trim={properties.trim}\n                />\n            );\n        });\n    }\n}\n","import React from 'react';\nimport { InputForm, InputFormProps } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { StyleSheet } from 'react-native';\nimport { isNullOrUndefined, isEmailSyntaxValid, isPasswordValid } from 'src/utility';\nimport { NavigationSwitchProp } from 'react-navigation';\nimport {navigationPages, NavigationRouteScreenProps} from 'src/routes';\nimport { RouteProps } from 'react-router-dom';\nimport {AuthPageInjectedProps} from '../AuthPage/WithAuthPage';\n\nexport type RoopairsLoginDispatchProps = {\n    onFetchAccount: (\n        username: string, \n        password: string,\n        navigation: NavigationSwitchProp | RouteProps,\n        modalSetOff: () => any, \n    ) => void\n}\n\nexport type RoopairsLoginProps = \n    RoopairsLoginDispatchProps &\n    AuthPageInjectedProps &\n    NavigationRouteScreenProps;\n\n\nexport type RoopairsLoginState = {\n    username: string;\n    password: string;\n};\n\nconst signInStrings = strings.signInPage;\nconst initialState: RoopairsLoginState = {\n    username: '',\n    password: '',\n};\n\nfunction setInputStyles(colorTheme?: BaseStyles.ColorTheme) {\n    const colors = isNullOrUndefined(colorTheme)\n        ? BaseStyles.LightColorTheme\n        : colorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        input: {\n            alignItems: 'center',\n            alignSelf: 'center',\n            margin: BaseStyles.MarginPadding.xsmallConst,\n            minWidth: 40,\n            width: BaseStyles.ContentWidth.max,\n            height: 40,\n            color: colors.tertiary,\n            borderColor: colors.lightGray,\n            borderWidth: 1,\n            borderRadius: BaseStyles.BorderRadius.small,\n            paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n        },\n    });\n}\n\nexport class RoopairsLoginBase extends React.Component<\n    RoopairsLoginProps,\n    RoopairsLoginState\n> {\n    inputFormStyle;\n\n    loginRef;\n\n    passwordRef;\n\n    constructor(props: Readonly<RoopairsLoginProps>) {\n        super(props);\n        this.inputFormStyle = setInputStyles(null);\n        this.getFormUsername = this.getFormUsername.bind(this);\n        this.getFormPassword = this.getFormPassword.bind(this);\n        this.setModalOff = this.setModalOff.bind(this);\n        this.clickButton = this.clickButton.bind(this);\n        this.clickHighlightedText = this.clickHighlightedText.bind(this);\n        this.state = initialState;\n        this.loginRef = React.createRef();\n        this.passwordRef = React.createRef();\n\n        // Insert the callback functions to the AuthInjected bound functions\n        props.clickButton(this.clickButton);\n        props.clickHighlightedText(this.clickHighlightedText);\n    }\n\n    setModalOff(error: string = 'Error Message') {\n        const { setErrorState, navigation } = this.props;\n        navigation.navigate(navigationPages.RoopairsLogin);\n        setErrorState(true, error);\n    }\n\n    getFormUsername(childData: string) {\n        this.setState({ username: childData });\n    }\n\n    getFormPassword(childData: string) {\n        this.setState({ password: childData });\n    }\n\n    clickHighlightedText() {\n        const { navigation } = this.props;\n        navigation.navigate(navigationPages.SignUpScreen);\n    }\n\n    validateForms(username: string, password: string) {\n        let check = true;\n        if (!isEmailSyntaxValid(username)) {\n            this.loginRef.current.setError(true);\n            check = false;\n        }\n        if (!isPasswordValid(password)) {\n            this.passwordRef.current.setError(true);\n            check = false;\n        }\n        return check;\n    }\n\n    resetForms() {\n        this.loginRef.current.setError(false);\n        this.passwordRef.current.setError(false);\n    }\n\n    clickButton() {\n        const {onFetchAccount, navigation} = this.props;\n        const {username, password} = this.state;\n        this.resetForms();\n        if (this.validateForms(username, password)) {\n            navigation.navigate(navigationPages.RoopairsLoggingInModal, null, true);\n            onFetchAccount(username, password, navigation, this.setModalOff);\n        }\n    } \n\n    render() {\n        const inputFormProps: InputFormProps[] = [\n            {   \n                ref: this.loginRef,\n                key: 'email',\n                name: signInStrings.inputForms.email,\n                parentCallBack: this.getFormUsername,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                errorMessage: 'Invalid username! Must be an email',\n                trim: true,\n\n            },\n            {   \n                ref: this.passwordRef,\n                key: 'password',\n                name: signInStrings.inputForms.password,\n                parentCallBack: this.getFormPassword,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                secureTextEntry: true,\n                errorMessage: 'Invalid password! Must be at least 6 characters',\n            },\n        ];\n\n        return inputFormProps.map(properties => {\n            return (\n                <InputForm\n                    ref={properties.ref}\n                    key={properties.key}\n                    name={properties.name}\n                    parentCallBack={properties.parentCallBack}\n                    formTitleStyle={properties.formTitleStyle}\n                    inputStyle={properties.inputStyle}\n                    secureTextEntry={properties.secureTextEntry}\n                    errorMessage={properties.errorMessage}\n                    trim={properties.trim}\n                />\n            );\n        });\n    }\n}\n","/* eslint-disable react/static-property-placement */\nimport React from 'react';\nimport { AccountTypes } from 'homepairs-types';\nimport strings from 'homepairs-strings';\nimport {\n  TouchableOpacity,\n  Text,\n  View,\n  StyleSheet,\n} from 'react-native';\nimport * as BaseStyles from 'homepairs-base-styles';\n\n\nexport type AccountTypeRadioProps = {\n  /**\n   * Used to find this component when testing.\n   */\n  testID?: String,\n\n  /**\n   * Function that invokes when an option has been selected. This is intended to \n   * tell the parent which AccountType has been selected.\n   */\n  parentCallBack?: (childData : AccountTypes) => any, \n\n  /**\n   * Callback function that is intended to remove user input of the forms of sibling \n   * components. This should only be used when switching between \n   */\n  resetForms?: (resetform?:boolean, ...others:any[] ) => any,\n}\n\ntype AccountTypeRadioState = {\n  propertyManagerSelected : boolean\n}\n\nconst accountRadioStrings = strings.signUpPage.accountTypeRadioButton;\nconst colors = BaseStyles.LightColorTheme;\n\nconst styles = StyleSheet.create({\n    buttonContainer: {\n      flexDirection: 'row',\n      marginBottom: BaseStyles.MarginPadding.inputForm, \n      paddingTop: BaseStyles.MarginPadding.xsmallConst,\n      paddingHorizontal: BaseStyles.MarginPadding.xsmallConst,\n      width: BaseStyles.ContentWidth.max,\n    },\n    title: {\n      marginVertical: BaseStyles.MarginPadding.inputForm, \n      fontFamily: BaseStyles.FontTheme.primary, \n      color: colors.lightGray,\n    },\n    titleContainer: {\n      width: BaseStyles.ContentWidth.max,\n    },\n    selectedLeftButton: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: colors.primary,\n      padding: BaseStyles.MarginPadding.mediumConst,\n      width: BaseStyles.ContentWidth.half,\n      borderTopLeftRadius: BaseStyles.BorderRadius.small,\n      borderBottomLeftRadius: BaseStyles.BorderRadius.small,\n      borderWidth: 1,\n      borderColor: colors.space,\n      height: 40,\n    },\n    selectedRightButton: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: colors.primary,\n      padding: BaseStyles.MarginPadding.mediumConst,\n      width: BaseStyles.ContentWidth.half,\n      borderTopRightRadius: BaseStyles.BorderRadius.small,\n      borderBottomRightRadius: BaseStyles.BorderRadius.small,\n      borderWidth: 1,\n      borderColor: colors.space,\n      height: 40,\n    },\n    selectedText:{\n      color: colors.secondary, \n      fontSize: BaseStyles.FontTheme.reg,\n      alignSelf: 'center',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    unselectedLeftButton: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: colors.transparent,\n      padding: BaseStyles.MarginPadding.mediumConst,\n      width: BaseStyles.ContentWidth.half,\n      borderTopLeftRadius: BaseStyles.BorderRadius.small,\n      borderBottomLeftRadius: BaseStyles.BorderRadius.small,\n      borderWidth: 1,\n      borderColor: colors.lightGray,\n      height: 40,\n    },\n    unselectedRightButton: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: colors.transparent,\n      padding: BaseStyles.MarginPadding.mediumConst,\n      width: BaseStyles.ContentWidth.half,\n      borderTopRightRadius: BaseStyles.BorderRadius.small,\n      borderBottomRightRadius: BaseStyles.BorderRadius.small,\n      borderWidth: 1,\n      borderColor: colors.lightGray,\n      height: 40,\n    },\n    unselectedText:{\n      color: colors.lightGray, \n      fontSize: BaseStyles.FontTheme.reg,\n      alignSelf: 'center',\n    },\n  });\n\n/**\n * ---------------------------------------------------\n * Account Type Radio Button\n * ---------------------------------------------------\n * A simple component that permits the user to select between a Tenant or \n * Landlord account. It contains an optional name prop if a title is needed \n * for this component.   \n */\nexport default class AccountTypeRadioButton extends React.Component<AccountTypeRadioProps, AccountTypeRadioState> {\n  static defaultProps: AccountTypeRadioProps = {\n    testID: null,\n    parentCallBack: (childData : AccountTypes) => {return childData;}, \n    resetForms: () => {},\n  };\n\n  constructor(props: Readonly<AccountTypeRadioProps>) {\n    super(props);\n    this.onPressPropertyManager = this.onPressPropertyManager.bind(this);\n    this.onPressTenant = this.onPressTenant.bind(this);\n    this.state = { propertyManagerSelected : false};\n    props.parentCallBack(AccountTypes.Tenant);\n  }\n\n  onPressPropertyManager() {\n    const {parentCallBack, resetForms} = this.props;\n    resetForms();\n    this.setState({ propertyManagerSelected : true });\n    parentCallBack(AccountTypes.PropertyManager);\n  }\n\n  onPressTenant() {\n    const {parentCallBack, resetForms} = this.props;\n    resetForms();\n    this.setState({ propertyManagerSelected : false });\n    parentCallBack(AccountTypes.Tenant);\n  }\n\n render() {\n   const {propertyManagerSelected} = this.state;\n   const leftButtonStyle = propertyManagerSelected ? styles.unselectedLeftButton : styles.selectedLeftButton;\n   const rightButtonStyle = propertyManagerSelected ? styles.selectedRightButton : styles.unselectedRightButton;\n   return (\n     <>\n     <View style={styles.titleContainer}>\n        <Text style={styles.title}>\n          {accountRadioStrings.name}\n        </Text>\n    </View>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          testID='account-radio-tenant'\n          style={leftButtonStyle}\n          onPress={this.onPressTenant}>\n          <Text style={propertyManagerSelected ? \n            styles.unselectedText : styles.selectedText}>\n              {accountRadioStrings.tenant}\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          testID='account-radio-pm'\n          style={rightButtonStyle}\n          onPress={this.onPressPropertyManager}>\n          <Text style={propertyManagerSelected ? \n            styles.selectedText : styles.unselectedText }>\n              {accountRadioStrings.propertyManager}\n\n          </Text>\n        </TouchableOpacity>\n        </View>\n      </>\n    );\n  }\n}","import React from 'react';\nimport { InputForm, LoginButton, GoogleInputForm} from 'src/elements';\nimport strings from 'homepairs-strings';\nimport { AccountTypes, Account, HomePairsDimensions } from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { Dimensions, StyleSheet, View } from 'react-native';\nimport {isPasswordValid, isEmailSyntaxValid, \n    isAlphaCharacterOnly, isEmptyOrSpaces, isPhoneNumberValid } from 'src/utility';\nimport { navigationPages, NavigationRouteHandler, NavigationRouteScreenProps } from 'src/routes';\nimport {Divider} from 'react-native-elements';\nimport {HelperText} from 'react-native-paper';\nimport {AuthPageInjectedProps} from '../AuthPage/WithAuthPage';\nimport AccountTypeRadioButton  from './AccounttypeRadioButton/AccountTypeRadioButton';\n\n\nexport type SignUpViewDispatchProps = {\n    generateHomePairsAccount: (\n        details: Account,\n        password: String,\n        modalSetOff: () => any,\n        navigation: NavigationRouteHandler,\n        displayError: (msg: string) => any\n    ) => any;\n};\n\nexport type SignUpProps =\n    SignUpViewDispatchProps &\n    AuthPageInjectedProps &\n    NavigationRouteScreenProps;\n\ntype SignUpState = {\n    accountType: AccountTypes;\n    firstName: string;\n    lastName: string;\n    phoneNumber: string,\n    email: string;\n    address: string;\n    password: string;\n    cPassword: string;\n    errorCheck: boolean;\n    errorMsg: string;\n};\n\nconst baseState = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    address: '',\n    phoneNumber: '',\n    password: '',\n    cPassword: '',\n    errorCheck: false, \n    errorMsg: '',\n};\nconst {width} = Dimensions.get('window');\n\nconst initalState : SignUpState = {\n    accountType: AccountTypes.Tenant,\n    ...baseState,\n};\nconst signUpScreenStrings = strings.signUpPage;\nconst colors = BaseStyles.LightColorTheme;\n\nconst styles = StyleSheet.create({\n    formTitle: {\n        marginVertical: '3.5%',\n        fontFamily: BaseStyles.FontTheme.primary,\n        color: colors.lightGray,\n    },\n    input: {\n        alignItems: 'center',\n        alignSelf: 'center',\n        margin: BaseStyles.MarginPadding.xsmallConst,\n        minWidth: 40,\n        width: BaseStyles.ContentWidth.max,\n        height: 40,\n        color: colors.lightGray,\n        borderColor: colors.lightGray,\n        borderWidth: 1,\n        borderRadius: BaseStyles.BorderRadius.small,\n        paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n    },\n    errorFormTitle: {\n        marginVertical: '3.5%',\n        fontFamily: BaseStyles.FontTheme.primary,\n        color: colors.red,\n    },\n    errorInput: {\n        alignItems: 'center',\n        alignSelf: 'center',\n        margin: BaseStyles.MarginPadding.xsmallConst,\n        minWidth: 40,\n        width: BaseStyles.ContentWidth.max,\n        height: 40,\n        color: colors.red,\n        borderColor: colors.red,\n        shadowColor: colors.red,\n        shadowRadius: 5,\n        shadowOpacity: .5,\n        borderWidth: 1,\n        borderRadius: BaseStyles.BorderRadius.small,\n        paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n    },\n    errorStyle: {\n        fontFamily: BaseStyles.FontTheme.secondary, \n        fontSize: 16,\n    },\n});\n\n\nexport class SignUpScreenBase extends React.Component<SignUpProps,SignUpState> {\n    firstNameRef;\n\n    lastNameRef;\n\n    emailRef;\n\n    phoneNumberRef;\n\n    addressRef;\n\n    passwordRef;\n\n    cPasswordRef;\n\n\n    constructor(props: Readonly<SignUpProps>) {\n        super(props);\n        this.getAccountType = this.getAccountType.bind(this);\n        this.getFormFirstName = this.getFormFirstName.bind(this);\n        this.getFormLastName = this.getFormLastName.bind(this);\n        this.getFormEmail = this.getFormEmail.bind(this);\n        this.getFormPassword = this.getFormPassword.bind(this);\n        this.getFormCPassword = this.getFormCPassword.bind(this);\n        this.getFormAddress = this.getFormAddress.bind(this);\n        this.getFormPhoneNumber = this.getFormPhoneNumber.bind(this);\n        \n        this.setModalOff = this.setModalOff.bind(this);\n        this.resetForms = this.resetForms.bind(this);\n        this.resetState = this.resetState.bind(this);\n\n        this.state = {...initalState};\n        this.firstNameRef = React.createRef();\n        this.lastNameRef = React.createRef();\n        this.emailRef = React.createRef();\n        this.passwordRef = React.createRef();\n        this.cPasswordRef = React.createRef();\n        this.addressRef = React.createRef();\n        this.phoneNumberRef = React.createRef();\n\n        props.clickButton(this.clickSignUp);\n        props.clickHighlightedText(this.clickSignIn);\n    }\n\n    setModalOff(error: string = 'Error Message') {\n        const { setErrorState, navigation } = this.props;\n        navigation.navigate(navigationPages.SignUpScreen);\n        setErrorState(true, error);\n    }\n\n    getAccountType(childData: AccountTypes) {\n        this.setState({ accountType: childData });\n    }\n\n    getFormFirstName(childData: string) {\n        this.setState({ firstName: childData });\n    }\n\n    getFormLastName(childData: string) {\n        this.setState({ lastName: childData });\n    }\n\n    getFormPhoneNumber(childData: string) {\n        this.setState({ phoneNumber: childData });\n    }\n\n    getFormEmail(childData: string) {\n        this.setState({ email: childData });\n    }\n\n    getFormPassword(childData: string) {\n        this.setState({ password: childData });\n    }\n\n    getFormCPassword(childData: string) {\n        this.setState({ cPassword: childData });\n    }\n\n    getFormAddress(childData: string) {\n        this.setState({ address: childData });\n    }\n\n    /**\n     * Event methods for when something occurs on this component.\n     */\n    clickSignIn = () => {\n        const { navigation } = this.props;\n        navigation.navigate(navigationPages.LoginScreen);\n    };\n\n    clickSignUp = () => {\n        const { generateHomePairsAccount, navigation} = this.props;\n        const { password } = this.state;\n        this.resetForms();\n        if (this.validateForms()) {\n            navigation.navigate(navigationPages.CreatingAccountModal, null, true);\n            const details: Account = { ...this.state, roopairsToken: '' };\n            generateHomePairsAccount(details, password, this.setModalOff, navigation, console.log);     \n        }\n    };\n\n    toRoopairsLogin = () => {\n        const { navigation } = this.props;\n        navigation.navigate(navigationPages.RoopairsLogin);\n    };\n\n    displayError(msg: string) {\n        this.setState({errorMsg: msg});\n    }\n\n    validateForms() {\n        const {firstName, lastName, password, cPassword, email, address, accountType, phoneNumber} = this.state;\n        let check = true;\n        if (!isAlphaCharacterOnly(firstName)) {\n            check = false;\n            this.firstNameRef.current.setError(true);\n        }\n        if (!isAlphaCharacterOnly(lastName)) {\n            check = false;\n            this.lastNameRef.current.setError(true);\n        }\n        if (!isEmailSyntaxValid(email)) {\n            check = false;\n            this.emailRef.current.setError(true);\n        }\n        if (!isPasswordValid(password)) {\n            check = false;\n            this.passwordRef.current.setError(true);\n        }\n        if (!(password === cPassword)) {\n            check = false;\n            this.cPasswordRef.current.setError(true);\n        }\n        if (isEmptyOrSpaces(address) && accountType === AccountTypes.Tenant) {\n            check = false;\n            this.addressRef.current.setError(true);\n        }\n        if (accountType === AccountTypes.Tenant && !isPhoneNumberValid(phoneNumber)){\n            check = false;\n            this.phoneNumberRef.current.setError(true);\n        }\n        return check;\n    }\n\n    resetForms() {\n        const {accountType} = this.state;\n        if (accountType === AccountTypes.Tenant) {\n            this.addressRef.current.setError(false);\n            this.phoneNumberRef.current.setError(false);\n        }\n        this.firstNameRef.current.setError(false);\n        this.lastNameRef.current.setError(false);\n        this.emailRef.current.setError(false);\n        this.passwordRef.current.setError(false);\n        this.cPasswordRef.current.setError(false);\n    }\n\n    resetState() {\n        this.setState(baseState);\n    }\n\n    renderError () {\n        const {errorMsg, errorCheck} = this.state;\n        return <View style={{alignSelf:'center'}}>\n            <HelperText \n                type='error' \n                visible={errorCheck} \n                style={styles.errorStyle}>\n                    {errorMsg}\n            </HelperText>\n        </View>;\n    }\n\n    renderInputForms() {\n        const {formTitle, input } = styles;\n        const {accountType} = this.state;\n        const inputFormProps = [\n            {\n                ref: this.firstNameRef,\n                key: signUpScreenStrings.inputForms.firstName,\n                name: signUpScreenStrings.inputForms.firstName,\n                parentCallBack: this.getFormFirstName,\n                formTitleStyle: formTitle,\n                inputStyle: input,\n                errorMessage: 'First Name cannot be empty',\n            },\n            {\n                ref: this.lastNameRef,\n                key: signUpScreenStrings.inputForms.lastName,\n                name: signUpScreenStrings.inputForms.lastName,\n                parentCallBack: this.getFormLastName,\n                formTitleStyle: formTitle,\n                inputStyle: input,\n                errorMessage: 'Last Name cannot be empty',\n            },\n            {\n                ref: this.phoneNumberRef,\n                key: signUpScreenStrings.inputForms.phone,\n                name: signUpScreenStrings.inputForms.phone,\n                parentCallBack: this.getFormPhoneNumber,\n                formTitleStyle: formTitle,\n                inputStyle: input,\n                errorMessage: 'Invalid phone number',\n                trim: true,\n            },\n            {\n                ref: this.emailRef,\n                key: signUpScreenStrings.inputForms.email,\n                name: signUpScreenStrings.inputForms.email,\n                parentCallBack: this.getFormEmail,\n                formTitleStyle: formTitle,\n                inputStyle: input,\n                errorMessage: 'Invalid email',\n                trim: true,\n            },\n            {\n                ref: this.passwordRef,\n                key: signUpScreenStrings.inputForms.password,\n                name: signUpScreenStrings.inputForms.password,\n                parentCallBack: this.getFormPassword,\n                formTitleStyle: formTitle,\n                inputStyle: input,\n                secureTextEntry: true,\n                errorMessage: 'Password is invalid! Must be at least 6 characters',\n            },\n            {\n                ref: this.cPasswordRef,\n                key: signUpScreenStrings.inputForms.confirmPassword,\n                name: signUpScreenStrings.inputForms.confirmPassword,\n                parentCallBack: this.getFormCPassword,\n                formTitleStyle: formTitle,\n                inputStyle: input,\n                secureTextEntry: true,\n                errorMessage: 'Passwords do not match',\n            },\n        ];\n        return inputFormProps.map(properties => {\n            if(properties.key === signUpScreenStrings.inputForms.phone && accountType !== AccountTypes.Tenant){\n                return <></>;\n            }\n            return (\n                <InputForm\n                    ref={properties.ref}\n                    key={properties.key}\n                    name={properties.name}\n                    parentCallBack={properties.parentCallBack}\n                    formTitleStyle={properties.formTitleStyle}\n                    inputStyle={properties.inputStyle}\n                    secureTextEntry={properties.secureTextEntry}\n                    errorMessage={properties.errorMessage}\n                    trim={properties.trim}\n                />\n            );\n        });\n    }\n\n    renderAddressForm() {\n        const {address, accountType} = this.state;\n\n        return accountType === AccountTypes.PropertyManager ? <></> : (\n            <GoogleInputForm \n                ref={this.addressRef}\n                key={signUpScreenStrings.inputForms.address}\n                name={signUpScreenStrings.inputForms.address}\n                parentCallBack={this.getFormAddress}\n                formTitleStyle={styles.formTitle}\n                inputStyle={styles.input}\n                value={address}\n                errorMessage='Address cannot be empty'        \n            />\n        );\n    }\n\n    renderRoopairsLoginButton() {\n        const { accountType } = this.state;\n\n        // Prepare the dimensions of the length of the divider. If the window is at max content size, simply set \n        // it to 400\n        const maxDividerWidth = width * 0.80; \n        const dividerWidth = HomePairsDimensions.MAX_CONTENT_SIZE < maxDividerWidth ? 400 : maxDividerWidth; \n        return accountType === AccountTypes.PropertyManager ? (\n            <View style={{ marginTop: BaseStyles.MarginPadding.large }}>\n                <LoginButton\n                    name=\"Sign in with your Roopairs Account\"\n                    onClick={this.toRoopairsLogin}\n                />\n                <Divider style={{\n                    alignSelf: 'center',\n                    alignItems: 'center',\n                    marginTop: 25,\n                    marginBottom: 20,\n                    width: dividerWidth,\n                    maxWidth: 400,\n                }}/> \n            </View>\n        ) : (\n            <></>\n        );\n    }\n\n\n    // how to reset error messages when switch back and forth from radio button\n    render() {\n        return (\n            <>\n                <AccountTypeRadioButton\n                    parentCallBack={this.getAccountType}\n                    resetForms={this.resetForms}/>\n                {this.renderRoopairsLoginButton()}\n                {this.renderAddressForm()}\n                {this.renderInputForms()}\n                {this.renderError()}\n            </>\n        );\n    }\n}\n","import { connect } from \"react-redux\";\nimport strings from \"homepairs-strings\";\nimport HomePairColors from \"res/colors\";\nimport { fetchAccount } from 'homepairs-endpoints';\nimport {NavigationRouteHandler, prepareNavigationHandlerComponent } from 'src/routes';\nimport { LoginScreenBase, LoginViewDispatchProps } from \"./LoginScreenBase\";\nimport {\n  AuthPassProps,\n  withAuthPage,\n} from '../AuthPage/WithAuthPage';\n\nconst signInStrings = strings.signInPage;\nconst authPageParam: AuthPassProps = {\n  button: signInStrings.button,\n  subtitle: signInStrings.subtitle,\n  buttonColor: HomePairColors.LightModeColors.blueButton,\n  loadingModalText: signInStrings.modal,\n  underButtonText: signInStrings.newUserText,\n  highlightedText: signInStrings.signUpHighlight,\n};\n\nconst mapDispatchToProps : (dispatch: any) => LoginViewDispatchProps = (dispatch: any) => ({\n    onFetchAccount: async (username: string, password: string, \n        modalSetOff: (error?:string) => any, navigation: NavigationRouteHandler) => {\n        await dispatch(fetchAccount(username, password, navigation, modalSetOff));\n    },\n});\n\n/* * Inject the HOCs for the base login screen * */\nconst LoginScreen = connect(null, mapDispatchToProps)(LoginScreenBase);\nconst NavigateReadyLoginScreen = prepareNavigationHandlerComponent(LoginScreen);\n\n/* * Now that the Base is prepared, wrap the base to get a complete Homepairs AuthScreen * */\nconst AuthPage = withAuthPage(NavigateReadyLoginScreen, authPageParam);\n\nexport default AuthPage;\n","import { connect } from \"react-redux\";\nimport { Account, AccountTypes, TenantAccount } from \"homepairs-types\";\nimport strings from \"homepairs-strings\";\nimport {LightColorTheme} from \"homepairs-base-styles\";\nimport { withNavigation } from 'react-navigation';\nimport { withRouter } from \"react-router-dom\";\nimport { Platform } from \"react-native\";\nimport {NavigationRouteHandler, withNavigationRouteHandler } from 'src/routes';\nimport { generateAccountForPM, generateAccountForTenant } from 'homepairs-endpoints';\nimport { SignUpScreenBase, SignUpViewDispatchProps } from \"./SignUpScreenBase\";\nimport {\n  AuthPassProps,\n  withAuthPage,\n} from '../AuthPage/WithAuthPage';\n\nconst signUpStrings = strings.signUpPage;\nconst authPageParam: AuthPassProps = {\n  button: signUpStrings.button,\n  subtitle: signUpStrings.subtitle,\n  loadingModalText: signUpStrings.modal,\n  buttonColor: LightColorTheme.primary,\n  underButtonText: signUpStrings.currentUserText,\n  highlightedText: signUpStrings.signUpHighlight,\n};\nconst mapDispatchToProps : (dispatch: any) => SignUpViewDispatchProps = (dispatch: any) => ({\n    generateHomePairsAccount: (\n      details: Account, \n      password: String, \n      modalSetOff: () => any,\n      navigation?: NavigationRouteHandler,\n      displayError?: (msg: string) => any) => {\n        if (details.accountType === AccountTypes.PropertyManager) {\n            dispatch(generateAccountForPM(details, password, navigation, modalSetOff, displayError));\n        } else {\n            dispatch(generateAccountForTenant((details as TenantAccount), password, navigation, modalSetOff));\n        }\n    },\n});\n\n\nconst SignUpScreen = connect(null, mapDispatchToProps)(SignUpScreenBase);\nconst NavigableAuthPage = withNavigationRouteHandler(SignUpScreen);\nconst NavigateReadyAuthPage = Platform.OS === 'web' ? withRouter(NavigableAuthPage) : withNavigation(NavigableAuthPage);\nconst AuthPage = withAuthPage(NavigateReadyAuthPage, authPageParam);\nexport default AuthPage;\n","import { connect } from 'react-redux';\nimport strings from 'homepairs-strings';\nimport HomePairColors from 'homepairs-colors';\nimport { Image, Text, View, Platform } from 'react-native';\nimport { roopairsLogo } from 'homepairs-images';\nimport React from 'react';\nimport { withNavigation } from 'react-navigation';\nimport { withRouter } from 'react-router-dom';\nimport { fetchAccount } from 'homepairs-endpoints';\nimport { withNavigationRouteHandler } from 'src/routes';\nimport { RoopairsLoginBase, RoopairsLoginDispatchProps } from './RoopairsLoginBase';\nimport {\n    AuthPassProps,\n    withAuthPage,\n} from '../AuthPage/WithAuthPage';\n\nconst roopairsSubtitle = (\n    <View style={{ flexDirection: 'row' }}>\n        <Image\n            style={{ width: 60, height: 60, resizeMode: 'contain' }}\n            source={roopairsLogo}\n        />\n        <Text\n            style={{\n                color: HomePairColors.LightModeColors.roopairs,\n                fontSize: 15,\n                alignSelf: 'center',\n            }}\n        >\n            Sign into your Roopairs account\n        </Text>\n    </View>\n);\n\nconst signInStrings = strings.signInPage;\nconst authPageParam: AuthPassProps = {\n    button: signInStrings.button,\n    subtitle: roopairsSubtitle,\n    buttonColor: HomePairColors.LightModeColors.roopairs,\n    loadingModalText: signInStrings.modal,\n    underButtonText: 'Back to Registration? ',\n    highlightedText: 'Click Here',\n};\n\nconst mapDispatchToProps: (dispatch: any) => RoopairsLoginDispatchProps = (\n    dispatch: any,\n) => ({\n    onFetchAccount: (username: string,password: string,navigation,modalSetOff: () => any) => \n    {\n        dispatch(fetchAccount( username, password, navigation, modalSetOff));\n    },\n});\n\nconst RoopairsLogin = connect(null, mapDispatchToProps)(RoopairsLoginBase);\nconst NavigableAuthPage = withNavigationRouteHandler(RoopairsLogin);\nconst NavigateReadyAuthPage = Platform.OS === 'web' ? withRouter(NavigableAuthPage) : withNavigation(NavigableAuthPage);\nconst AuthPage = withAuthPage(NavigateReadyAuthPage, authPageParam);\n\nexport default AuthPage;\n","import * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions } from 'homepairs-types';\nimport { StyleSheet, Platform } from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\n\nconst colors = BaseStyles.LightColorTheme;\nexport default StyleSheet.create({\n    cardTitle: {\n        color: colors.tertiary,\n        fontSize: 25,\n        fontFamily: HomePairFonts.nunito_bold,\n    },\n    cardDescription: {\n        color: colors.tertiary,\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.small,\n        paddingTop: 5,\n    },\n    textContainer: {\n        width: BaseStyles.ContentWidth.reg,\n        paddingBottom: BaseStyles.MarginPadding.mediumConst,\n        flex: 1,\n        fontSize: 20,\n    },\n    titleContainerStyle: {\n        width: '95%',\n        borderBottomColor: BaseStyles.LightColorTheme.veryLightGray,\n        paddingVertical: 5,\n        borderBottomWidth: 1,\n        alignSelf: 'center',\n        justifyContent: 'center',\n    },\n    accountContainer: {\n        backgroundColor: colors.secondary,\n        marginHorizontal: BaseStyles.MarginPadding.large,\n        marginTop: BaseStyles.MarginPadding.largeConst,\n        borderRadius: 7,\n        paddingVertical: BaseStyles.MarginPadding.large,\n        paddingHorizontal: BaseStyles.MarginPadding.medium,\n        width: BaseStyles.ContentWidth.thin,\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        alignSelf: 'center',\n        alignItems: 'center',\n        maxHeight: Platform.OS === 'web' ? 175 : null,\n        shadowColor: colors.tertiary,\n        shadowRadius: 10,\n        shadowOffset: { width: 1, height: 1 },\n        shadowOpacity: 0.25,\n        elevation: 9,\n    },\n    thinButtonContainer: {\n        alignSelf: 'center',\n        justifyContent: 'center',\n        paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n        minHeight: 50,\n        paddingTop: 70,\n    },\n    thinButton: {\n        alignItems: 'center',\n        backgroundColor: colors.transparent,\n        padding: BaseStyles.MarginPadding.mediumConst,\n        maxWidth: 300,\n        minWidth: 200,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: colors.primary,\n    },\n    thinButtonText: {\n        color: colors.primary,\n        fontSize: BaseStyles.FontTheme.reg,\n        alignSelf: 'center',\n    },\n    wrapper: {\n        marginTop: BaseStyles.MarginPadding.large,\n        marginBottom: !(Platform.OS === 'web')\n            ? BaseStyles.MarginPadding.medium\n            : null,\n        justifyContent: 'center',\n    },\n});\n\n","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { Card, ThinButton } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport styles from './ConnectCardStyles';\n\nexport type AccountConnectedCardProps = {\n    /**\n     * Callback function that will disconnect the account from roopairs\n     */\n    disconnectAccountCallBack?: (arg0?: any) => any;\n};\n\nconst cardStrings =\n    strings.connectAccountPage.accountConnected.accountConnectedCard;\n\n/**\n * ------------------------------------------------------------\n * Account Connected Card\n * ------------------------------------------------------------\n * A small component that will be able to disconnect a users account \n * from the Roopairs Backend.\n * *Note: This will most likely be removed in the future.\n * @param {AccountConnectedCardProps} props \n */\nexport default function AccountConnectedCard(props: AccountConnectedCardProps) {\n    const {disconnectAccountCallBack } = props;\n\n    function disconnectAccount() {\n        // TODO: Call asyncronous fetch (From fetch or axios) to connect Roopairs account\n        alert('I need to disconnect');\n        disconnectAccountCallBack(\n            'TODO: Insert Parameters for call back (might be a json)!',\n        );\n    }\n\n    return (\n        <Card\n            containerStyle={styles.accountContainer}\n            title={cardStrings.title}\n            titleStyle={styles.textContainer}\n            titleContainerStyle={styles.titleContainerStyle}\n            subtitle={cardStrings.subtitle}\n            subtitleStyle={styles.cardDescription}\n            wrapperStyle={styles.wrapper}>\n            <ThinButton\n                name={cardStrings.button}\n                containerStyle={styles.thinButtonContainer}\n                buttonStyle={styles.thinButton}\n                buttonTextStyle={styles.thinButtonText}\n                onClick={disconnectAccount}/>\n        </Card>\n    );\n}\n\nAccountConnectedCard.defaultProps = {\n    disconnectAccountCallBack: () => {},\n};\n","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { Card, ThinButton } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport styles from './ConnectCardStyles';\n\nexport type ConnectAccountCardProps = {\n    /**\n     * Callback that will connect the card to Roopairs\n     */\n    connectAccountCallBack?: (arg0?: any) => any;\n};\n\nconst cardStrings =\n    strings.connectAccountPage.accountNotConnected.connectAccountCard;\n\n/**\n * ------------------------------------------------------------\n * Connect Account Card\n * ------------------------------------------------------------\n * A small component that will be able to connect a users account \n * to the Roopairs Backend.\n * *Note: This will most likely be removed in the future.\n * @param {ConnectedAccountCardProps} props \n */\nexport default function ConnectAccountCard(props: ConnectAccountCardProps) {\n    const { connectAccountCallBack } = props;\n    function connectAccount() {\n        // TODO: Call asyncronous fetch (From fetch or axios) to connect Roopairs account\n        alert('I need to connect');\n        connectAccountCallBack(\n            'TODO: Insert Parameters for call back (might be a json)!',\n        );\n    }\n\n    return (\n        <Card\n            containerStyle={styles.accountContainer}\n            title={cardStrings.title}\n            titleStyle={styles.cardTitle}\n            titleContainerStyle={styles.textContainer}\n            subtitle={cardStrings.subtitle}\n            subtitleStyle={styles.cardDescription}\n            wrapperStyle={styles.wrapper}\n        >\n            <ThinButton\n                name={cardStrings.button}\n                containerStyle={styles.thinButtonContainer}\n                buttonStyle={styles.thinButton}\n                buttonTextStyle={styles.thinButtonText}\n                onClick={connectAccount}/>\n        </Card>\n    );\n}\n\nConnectAccountCard.defaultProps = {\n    connectAccountCallBack: () => {},\n};\n","import React from 'react';\nimport strings from 'homepairs-strings';\nimport { AccountState } from 'homepairs-types';\nimport {\n    AccountConnectedCard,\n    ConnectAccountCard,\n} from './AuthenticationCards';\nimport { isNullOrUndefined } from 'src/utility';\n\nconst homepairAccountStrings = strings.connectAccountPage;\n\nexport type AccountScreenStateProps = {\n    accountProfile: AccountState;\n};\nexport type AccountScreenDispatchProps = {\n    /* * TODO: Make sure to add proper arguments and parameters into these functions * */\n    onConnectRoopairsAccount: () => void;\n    onDisconnectRoopairsAccount: () => void;\n};\ntype Props = AccountScreenStateProps &\n    AccountScreenDispatchProps;\n\nexport class AccountScreenBase extends React.Component<Props> {\n    handleConnectResults = (arg0?: any) => {\n        // TODO: Handle the results of connecting a Roopairs account with the Homepairs account\n        alert('I need to handle these results now!');\n    };\n\n    handleDisconnectResults = (arg0?: any) => {\n        // TODO: Handle the results of disconnecting a Roopairs account from the Homepairs account\n        alert('I need to handle these results now!');\n    };\n\n    render() {\n        const { accountProfile} = this.props;\n        if (\n            isNullOrUndefined(accountProfile.roopairsToken) \n        ) {\n            return (\n                <ConnectAccountCard\n                    connectAccountCallBack={() => this.handleConnectResults()}/>\n            );\n        }\n        return (\n            <AccountConnectedCard\n                disconnectAccountCallBack={() => this.handleDisconnectResults()}/>\n        );\n    }\n}\n","import { AppState} from 'homepairs-types';\nimport { connect } from 'react-redux';\nimport {\n    AccountScreenBase,\n    AccountScreenStateProps,\n    AccountScreenDispatchProps,\n} from './AccountScreenBase';\n\n\n\nfunction mapStateToProps(state: AppState): AccountScreenStateProps {\n    return { accountProfile: state.accountProfile };\n}\n\nconst mapDispatchToProps: (dispatch: any) => AccountScreenDispatchProps = (\n    dispatch: any,\n) => ({\n    onConnectRoopairsAccount: () => {\n        // TODO: Add action to connect to Roopairs api\n    },\n    onDisconnectRoopairsAccount: () => {\n        // TODO: Add action for when disconnecting Roopairs Account\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountScreenBase);\n\n","import { AccountScreen } from './AccountScreen';\n\nexport const AccountPage = AccountScreen;","import {StyleSheet} from 'react-native';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions } from 'homepairs-types';\n\nconst colors = BaseStyles.LightColorTheme;\nexport default StyleSheet.create({\n    CircleShapeView: {\n        height: 63,\n        width: 63,\n        borderRadius: 63/2,\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: BaseStyles.LightColorTheme.transparent,\n        borderColor: BaseStyles.LightColorTheme.gray,\n        borderWidth:1.4,\n    },\n    initialsContainer: {\n        flex: 1.5,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    tenantContact: {\n        flex: 4,\n        paddingVertical: BaseStyles.MarginPadding.mediumConst,\n        paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n        alignItems: 'flex-start',\n    },\n    buttonContainer: {\n        flex: 1.5,\n        alignItems: 'center',\n        paddingVertical: BaseStyles.MarginPadding.largeConst,\n        paddingHorizontal: BaseStyles.MarginPadding.smallConst,\n    },\n    tenantInfoContainer: {\n        flex:1,\n        flexDirection: 'row',\n        marginVertical: BaseStyles.MarginPadding.mediumConst,\n    },\n    container: {\n        backgroundColor: colors.secondary,\n        marginHorizontal: BaseStyles.MarginPadding.large,\n        marginTop: BaseStyles.MarginPadding.largeConst,\n        borderRadius: BaseStyles.BorderRadius.large,\n        borderBottomColor: colors.veryLightGray,\n        borderBottomWidth: 1,\n        padding: BaseStyles.MarginPadding.mediumConst,\n        paddingBottom: BaseStyles.MarginPadding.mediumConst,\n        width: BaseStyles.ContentWidth.thin,\n        alignSelf: 'center',\n        shadowColor: colors.shadow,\n        shadowRadius: 10,\n        shadowOffset: { width: 1, height: 1 },\n        shadowOpacity: 0.25,\n        elevation: 9,\n    },\n    livingSpaceContainer: {\n        flexDirection: 'row',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.wide,\n        paddingVertical: BaseStyles.MarginPadding.mediumConst,\n    },\n    addressContainer: {\n        borderBottomColor: colors.veryLightGray,\n        borderBottomWidth: 1,\n        paddingBottom: BaseStyles.MarginPadding.mediumConst,\n        marginBottom: BaseStyles.MarginPadding.mediumConst,\n    },\n    streetAddress: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.reg,\n        fontFamily: BaseStyles.FontTheme.secondary,\n    },\n    cityStateText: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.xsmal,\n    },\n    cardTitle: {\n        fontSize: BaseStyles.FontTheme.reg + 2,\n        maxWidth: 450,\n        fontFamily: BaseStyles.FontTheme.secondary,\n    },\n    cardDescription: {\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.small,\n    },\n    textContainer: {\n        width: BaseStyles.ContentWidth.reg,\n        borderBottomColor: colors.veryLightGray,\n        paddingBottom: BaseStyles.MarginPadding.mediumConst,\n        borderBottomWidth: 1,\n    },\n    detailContainer: {\n        flex: 1,\n        alignSelf: 'center',\n        alignItems: 'center',\n    },\n    detailName: {\n        fontSize: BaseStyles.FontTheme.xsmal,\n        marginBottom: BaseStyles.MarginPadding.mediumConst,\n        color: colors.tertiary,\n    },\n    detail: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.reg + 2,\n        fontFamily: BaseStyles.FontTheme.secondary,\n    },\n    addButton: {\n        alignItems: 'center',\n        backgroundColor: colors.transparent,\n        padding: BaseStyles.MarginPadding.mediumConst,\n        width: HomePairsDimensions.MIN_BUTTON_WIDTH,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: colors.lightGray,\n    },\n    editButton: {\n        alignItems: 'center',\n        backgroundColor: colors.transparent,\n        paddingVertical: BaseStyles.MarginPadding.xsmallConst,\n        width: BaseStyles.ContentWidth.thin,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: colors.lightGray,\n    },\n    addButtonText: {\n        color: colors.lightGray,\n        fontSize: 20,\n    },\n    editButtonText: {\n        color: colors.lightGray,\n        fontSize: 19,\n    },\n    titleContainerStyle: {\n        width: BaseStyles.ContentWidth.wide,\n        borderBottomColor: BaseStyles.LightColorTheme.veryLightGray,\n        paddingVertical: 5,\n        borderBottomWidth: 1,\n        alignSelf: 'center',\n        justifyContent: 'center',\n    },\n    addButtonContainer: {\n        alignSelf: 'center',\n    },\n    emptyText: {\n        color: colors.red,\n        alignSelf: 'center',\n        fontSize: BaseStyles.FontTheme.reg,\n        margin: BaseStyles.MarginPadding.largeConst,\n    },\n    \n});\n","import React, { useState } from 'react';\nimport { TenantInfo } from 'homepairs-types';\nimport { Card, ThinButton } from 'src/elements';\nimport { isNullOrUndefined } from 'src/utility';\nimport { View, Text, Platform } from 'react-native';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { navigationPages, NavigationRouteHandler } from 'src/routes';\nimport styles from './styles';\n\nexport type CurrentTenantCardProps =  {\n    /**\n     * Used to identify this component during testing\n     */\n    testID?: string,\n\n    /**\n     * Unique identifier for the property. This is how the component knows where to edit \n     * the tenant.\n     */\n    propId: string,\n\n    /**\n     * Maximum amount of tenants defined for the property. If somehow, the \n     * amount of tenants passed is large than this value, an error is raised. \n     * This will also prevent users from clicking Add Tenant if the maximum amount\n     * has been reached.\n     */\n    maxTenants?: number,\n\n    /**\n     * The tenant information passed into this component. Used to present the information.\n     */\n    tenants?: TenantInfo[],\n\n\n    /**\n     * Renders add and edit buttons if selected. This is intended to be set to false if a tenant \n     * or guest view of this screen is rendered.\n     */\n    hasEdit?: boolean,\n\n    /**\n     * The navigation object that takes care of navigating between the application. This takes \n     * care of both web and native navigation.\n     */\n    navigation?: NavigationRouteHandler, \n}\n\n/**\n * ---------------------------------------------------\n * Current Tenants Card\n * ---------------------------------------------------\n * A child component for the Detailed Property Card. This component will \n * show the user the list of tenants associated with property. If a Property \n * Manager, they will be able to navigate to pages that will permit them to \n * add and edit tenants. The component is intended to recieve NavigationInjectedProps. \n * To use this components to the fullest of its features, pass in a navigation object or \n * call withNavigation on this component.  \n * @param {CurrentTenantCardProps} props \n */\nfunction CurrentTenantCard(props: CurrentTenantCardProps){\n    const {navigation, tenants, maxTenants, propId, hasEdit} = props;\n    const [error, setError] = useState(null);\n    const numTenants = isNullOrUndefined(tenants) ? 0 : tenants.length;\n\n    /**\n     * This method compares the amount of tenants compared to the maximum amount of tenants permitted per property. \n     * If the total amount of housing capacity has been reached, an error is returned and dipslayed. Otherwise, \n     * the Add Property Modal Overlay is navigated to with the propId being assigned to the website parameter.\n     */\n    function navigateToAddTenantModal(){\n        if(maxTenants <= numTenants){\n            setError('This property has reached its maximum amount of tenants. Please remove a tenant if you wish to add another.');\n            return;\n        }\n        setError(null);\n        navigation.navigate(navigationPages.AddTenantModal, {propId}, true);\n    }\n\n    function navigateToEditTenantModal(tenant: TenantInfo){\n        navigation.navigate(navigationPages.EditTenantModal, {propId, tenant}, true);\n    }\n\n    function renderError(){\n        return isNullOrUndefined(error) ? <></> : (\n            <Text>{error}</Text>\n        );\n    }\n\n    /**\n     * Individual rendering for each tenant provided for a specific property.\n     * @param {TenantInfo} tenant - The individual Tenant found in the TenantInfo array \n     */\n    function renderTenantInfo(tenant : TenantInfo){\n        const tenantInitals: string = tenant.firstName[0].concat(tenant.lastName[0]).toUpperCase(); \n        return (\n        <View key={tenant.email} style={styles.tenantInfoContainer}>\n            <View style={styles.initialsContainer}>\n                <View style={styles.CircleShapeView}>\n                    <Text style={{fontFamily: BaseStyles.FontTheme.secondary, fontSize: 18, color: BaseStyles.LightColorTheme.gray}}>{tenantInitals}</Text>\n                </View>\n            </View>\n            <View style={styles.tenantContact}>\n                <Text style={{fontFamily: BaseStyles.FontTheme.secondary, fontSize: BaseStyles.FontTheme.small}}>{tenant.firstName}{' '}{tenant.lastName}</Text>\n                <Text style={{fontFamily: BaseStyles.FontTheme.tertiary, fontSize: BaseStyles.FontTheme.small, color: BaseStyles.LightColorTheme.lightGray}}>{tenant.email}</Text>\n                <Text style={{fontFamily: BaseStyles.FontTheme.tertiary, fontSize: BaseStyles.FontTheme.small, color: BaseStyles.LightColorTheme.lightGray}}>{tenant.phoneNumber}</Text>\n            </View>\n            { hasEdit ? \n                <ThinButton \n                testID='edit-tenant-button' \n                name='Edit' onClick={() => {navigateToEditTenantModal(tenant);}} \n                buttonStyle={styles.editButton} \n                buttonTextStyle={styles.editButtonText} \n                containerStyle={styles.buttonContainer}/>\n                :\n                <></>\n            }\n        </View>);\n    }\n\n    /**\n     * If there is an issue with tenant capacity, then a error is thrown. Although, this should  never\n     * be realistically reached. Otherwise the function will return a list of rendered tenant information.\n     */\n    function renderContent(){\n        if(numTenants > maxTenants){\n            // Should never reach here!!\n            throw Error('Maximum Amount of Tenants Exceeded');\n        }    \n        return numTenants === 0 ? (\n            <Text style={styles.emptyText}>No tenants have been added</Text>) : \n        tenants.map((tenant: TenantInfo) => {\n            return renderTenantInfo(tenant);\n        });\n    }\n\n    return (\n        <>\n            <View style={{paddingBottom: BaseStyles.MarginPadding.largeConst}}>\n            <Card title='Current Tenants' \n                containerStyle={styles.container} \n                titleStyle={styles.cardTitle} \n                titleContainerStyle={styles.titleContainerStyle} >\n                    {renderError()}\n                    <>{renderContent()}</>\n                    <View style={{marginBottom: Platform.OS === 'web' ? undefined: 10}}>\n                    {hasEdit ?\n                        <ThinButton \n                            name='Add Tenant' \n                            onClick={navigateToAddTenantModal} \n                            buttonTextStyle={styles.addButtonText} \n                            buttonStyle={styles.addButton} />\n                        :\n                        <></>\n                    }\n                    </View>\n                </Card>\n            </View>\n        </>\n    );\n} \n\nCurrentTenantCard.defaultProps = {\n    testID: 'current-tenant-card',\n    maxTenants: 100,\n    tenants: [],\n    hasEdit: true,\n};\n\nexport default CurrentTenantCard;\n\n\n\n","import { AppState, MainAppStackType, PropertyDict, TenantInfo, Appliance, PropertyManagerAccount } from 'homepairs-types';\nimport { updateSelectedPage, storePropertyApplianceAndTenants} from 'homepairs-redux-actions';\nimport { connect } from 'react-redux';\nimport { PROPERTY} from 'src/routes';\nimport { fetchPropertyAppliancesAndTenants } from 'homepairs-endpoints';\nimport React from 'react';\n\nexport type WithSinglePropertyStateProps = {\n    properties: PropertyDict,\n    tenantInfo: TenantInfo[],\n    applianceInfo: Appliance[],\n    token: string,\n    apiKey: string,\n};\n\nexport type WithSinglePropertyDispatchProps = {\n    onUpdateHeader: () => any\n    setAppliancesAndTenants: (propId: string) => any,\n}\n\nexport type WithSinglePropertyInjectedProps = \n    & WithSinglePropertyDispatchProps \n    & WithSinglePropertyDispatchProps;\n\n\nexport function mapStateToProps(state: AppState): WithSinglePropertyStateProps {\n    const {properties, accountProfile} = state;\n\n    return { \n        properties: properties.properties,\n        token: (accountProfile as PropertyManagerAccount).roopairsToken,\n        tenantInfo: properties.tenants,\n        applianceInfo: properties.appliances,\n        apiKey: state.settings.apiKey,\n    };\n}\n\nexport const mapDispatchToProps: (dispatch:any) => WithSinglePropertyDispatchProps = dispatch => ({\n    onUpdateHeader: () => {\n      const selected: MainAppStackType = {\n          title: 'Detailed Property',\n          navigate: PROPERTY,\n      };\n      dispatch(updateSelectedPage(selected));\n    },\n    // Calls an api requesst from the backend and then updates the store \n    setAppliancesAndTenants: async (propId: string) => {\n        await fetchPropertyAppliancesAndTenants(propId).then(response => {\n            const {tenants, appliances} = response;\n            dispatch(storePropertyApplianceAndTenants(tenants,appliances));\n        }).catch(error => {console.log(error);});\n    },\n});\n\nexport default function withSinglePropertyConnect(WrappedComponent: any){\n    const InnerComponent = connect(\n        mapStateToProps,\n        mapDispatchToProps,\n    )(WrappedComponent);\n\n    return (props: any) => {\n        return <InnerComponent {...props} />;\n    };\n}","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { StyleSheet, Text, View, Platform } from 'react-native';\nimport { ThinButtonProps, ThinButton, ApplianceCategorizer } from 'src/elements';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, Appliance } from 'homepairs-types';\n\nexport type ApplianceInfoProps = {\n    onAddApplianceModal?: () => any,\n    onEditApplianceModal?: (appliance: Appliance) => any,\n    appliances?: Appliance[],\n    propId: string,\n    hasEdit? : boolean,\n}\n\ntype Props = ApplianceInfoProps;\n\nconst applianceInfoStrings = strings.applianceInfo;\n\nfunction setStyles(colorTheme?: BaseStyles.ColorTheme) {\n    const colors = colorTheme == null ? BaseStyles.LightColorTheme : colorTheme;\n    return StyleSheet.create({\n        container: {\n            flex: 1,\n            backgroundColor: colors.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.large,\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderBottomColor: colors.veryLightGray,\n            borderBottomWidth: 1,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            width: BaseStyles.ContentWidth.thin,\n            alignSelf: 'center',\n            justifyContent: 'space-evenly',\n            shadowColor: colors.shadow,\n            shadowRadius: 10,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 0.25,\n            elevation: 9,\n        },\n        titleContainer: {\n            borderBottomColor: colors.veryLightGray,\n            borderBottomWidth: 1,\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n            marginBottom: BaseStyles.MarginPadding.mediumConst,\n        },\n        titleText: {\n            color: colors.tertiary,\n            fontSize: BaseStyles.FontTheme.reg + 2,\n            fontFamily: HomePairFonts.nunito_bold,\n        },\n        textContainer: {\n            width: BaseStyles.ContentWidth.reg,\n            borderBottomColor: colors.veryLightGray,\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n            borderBottomWidth: 1,\n        },\n        editButton: {\n            alignItems: 'center',\n            backgroundColor: colors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            width: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            marginBottom: Platform.OS !== 'web' ? 15 : undefined,\n            borderRadius: 8,\n            borderWidth: 1,\n            borderColor: colors.lightGray,\n        },\n        editButtonText: {\n            color: colors.lightGray,\n            fontSize: 20,\n        },\n        details: {\n            alignItems: 'center',\n        },\n    });\n}\n\n\nexport default function ApplianceInfo(props: Props) {\n    const {\n        appliances,\n        onAddApplianceModal,\n        onEditApplianceModal,\n        hasEdit,\n    } = props;\n\n    const styles = setStyles();\n\n    const thinButtonProps: ThinButtonProps = {\n        name: applianceInfoStrings.button.title,\n        buttonStyle: styles.editButton,\n        buttonTextStyle: styles.editButtonText,\n        onClick: () => onAddApplianceModal(),\n    };\n\n    return (\n        <View style={{ paddingBottom: BaseStyles.MarginPadding.largeConst}}>\n            <View style={styles.container}>\n                <View style= {styles.titleContainer}>\n                    <Text style= {styles.titleText}>\n                        {applianceInfoStrings.title}\n                    </Text>\n                </View>\n                <View style= {styles.details}>\n                    <ApplianceCategorizer \n                        onClick={onEditApplianceModal} \n                        appliances={appliances}\n                        hasButton={hasEdit}/>\n                    {hasEdit ?     \n                    <ThinButton \n                        testID='add-appliance-button'\n                        name={thinButtonProps.name} \n                        buttonStyle={thinButtonProps.buttonStyle} \n                        buttonTextStyle={thinButtonProps.buttonTextStyle} \n                        onClick={thinButtonProps.onClick}/>\n                        :\n                        <></>\n                    }\n                </View>\n            </View>\n        </View>\n    );\n\n}\n\nApplianceInfo.defaultProps = {\n    hasEdit: true,\n    onAddApplianceModal: () => {},\n    onEditApplianceModal: () => {},\n};","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { StyleSheet, Text, View } from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport strings from 'homepairs-strings';\nimport { fetchServiceRequests } from 'homepairs-endpoints';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, ServiceRequestStatusEnums } from 'homepairs-types';\nimport { isNullOrUndefined } from 'src/utility';\nimport { ThinButton } from 'src/elements';\n\nexport type ServiceRequestCountProps = {\n    /**\n     * The individual property that gives this card the information to present \n     */\n    propId: string;\n\n    /**\n     * This allows the property to render the edit button. Should be set true for \n     * Property Mangers and false for Tenants \n     */\n    hasEdit?: boolean;\n\n    /**\n     * Callback function that should invoke something for the parent. This should \n     * navigate the user to an Edit Property modal\n     */\n    onClick?: () => any;\n};\n\ntype ServiceRequestCountState = {\n    pending: number;\n    scheduled: number;\n    inProgress: number;\n};\n\nconst initialState: ServiceRequestCountState = {\n    pending: 0,\n    scheduled: 0,\n    inProgress: 0,\n};\n\nconst serviceRequestStrings = strings.detailedPropertyPage.serviceRequestCount;\nconst colors = BaseStyles.LightColorTheme;\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: colors.secondary,\n        marginHorizontal: BaseStyles.MarginPadding.large,\n        marginTop: BaseStyles.MarginPadding.largeConst,\n        marginBottom: BaseStyles.MarginPadding.large,\n        borderRadius: BaseStyles.BorderRadius.large,\n        borderBottomColor: colors.veryLightGray,\n        borderBottomWidth: 1,\n        padding: BaseStyles.MarginPadding.large,\n        width: BaseStyles.ContentWidth.thin,\n        alignSelf: 'center',\n        shadowColor: colors.shadow,\n        shadowRadius: 10,\n        shadowOffset: { width: 1, height: 1 },\n        shadowOpacity: 0.25,\n        elevation: 9,\n    },\n    livingSpaceContainer: {\n        flexDirection: 'row',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.wide,\n        paddingVertical: BaseStyles.MarginPadding.mediumConst,\n    },\n    titleContainer: {\n        borderBottomColor: colors.veryLightGray,\n        borderBottomWidth: 1,\n        paddingBottom: BaseStyles.MarginPadding.mediumConst,\n        marginBottom: BaseStyles.MarginPadding.mediumConst,\n    },\n    buttonContainer: {\n        marginTop: BaseStyles.MarginPadding.mediumConst,\n    },\n    title: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.reg,\n        fontFamily: HomePairFonts.nunito_bold,\n    },\n    cityStateText: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.xsmal,\n    },\n    cardTitle: {\n        fontSize: BaseStyles.FontTheme.reg + 2,\n        maxWidth: 450,\n        fontFamily: BaseStyles.FontTheme.secondary,\n    },\n    cardDescription: {\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.small,\n    },\n    textContainer: {\n        width: BaseStyles.ContentWidth.reg,\n        borderBottomColor: colors.veryLightGray,\n        paddingBottom: BaseStyles.MarginPadding.mediumConst,\n        borderBottomWidth: 1,\n    },\n    detailContainer: {\n        flex: 1,\n        alignSelf: 'center',\n        alignItems: 'center',\n    },\n    detailName: {\n        fontSize: BaseStyles.FontTheme.xsmal,\n        marginBottom: BaseStyles.MarginPadding.mediumConst,\n        color: colors.tertiary,\n    },\n    detail: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.reg + 2,\n        fontFamily: HomePairFonts.nunito_bold,\n    },\n    editButton: {\n        alignItems: 'center',\n        backgroundColor: colors.transparent,\n        padding: BaseStyles.MarginPadding.mediumConst,\n        width: HomePairsDimensions.MIN_BUTTON_WIDTH,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: colors.lightGray,\n    },\n    editButtonText: {\n        color: colors.lightGray,\n        fontSize: 20,\n    },\n});\n\n\n/**\n * ---------------------------------------------------\n * Render Details\n * ---------------------------------------------------\n * A small component that presents the amount of service requests for a \n * particular type of services associated with the property\n * @param {string} arg0 -The class of the service requests\n * @param {number} arg1 -The amount of service requests for the class\n */\nfunction renderDetailBox(arg0: string, arg1: number) {\n    return (\n        <View style={styles.detailContainer}>\n            <Text style={styles.detailName}>{arg0}</Text>\n            <Text style={styles.detail}>{arg1}</Text>\n        </View>\n    );\n}\n\n/**\n * ---------------------------------------------------\n * Service Request Count Info \n * ---------------------------------------------------\n * A child component for the Detailed Property Card that presents details about \n * the current service requests. It presents pending, scheduled, and in progress.  \n * @param {ServiceRequestCountProps} props \n */\nexport default class ServiceRequestCount extends React.Component<ServiceRequestCountProps, ServiceRequestCountState> {\n\n\n    constructor(props: Readonly<ServiceRequestCountProps>){\n        super(props);\n        this.state = initialState;\n    }\n\n    async componentDidMount(){\n        await this.prepareServiceRequests();\n    }\n\n    /**\n     * Fetches the service requests from the backend and then uses the response \n     * to count the amount of requests per qualifying category. \n     */\n    async prepareServiceRequests(){\n        const {propId} = this.props;\n\n        await fetchServiceRequests(propId).then(response =>{\n            const {data} = response;\n            const {reqs} = data;\n            let pending: number = 0;\n            let scheduled: number = 0;\n            let inProgress: number = 0;\n\n            reqs.forEach(req => {\n                const {status} = req;\n                switch(ServiceRequestStatusEnums[status]){\n                    case ServiceRequestStatusEnums.Scheduled:\n                        scheduled += 1;\n                        break;\n                    case ServiceRequestStatusEnums.InProgress:\n                        inProgress += 1;\n                        break;\n                    case ServiceRequestStatusEnums.Pending:\n                        pending += 1;\n                        break;\n                    default:\n                        break;\n                }\n\n            });\n\n            this.setState({pending, scheduled, inProgress});  \n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    renderLivingSpace() {\n        const {pending, scheduled, inProgress} = this.state;\n        return (\n            <View style={styles.livingSpaceContainer}>\n                {renderDetailBox(serviceRequestStrings.pending, pending)}\n                {renderDetailBox(serviceRequestStrings.scheduled, scheduled)}\n                {renderDetailBox(serviceRequestStrings.inProgress, inProgress)}\n            </View>\n        );\n    }\n\n    render(){\n        const {hasEdit, onClick } = this.props;\n        return (\n            <View style={{flex: 1}}>\n                <View style={styles.container}>\n                    <View style={styles.titleContainer}>\n                        <Text style={styles.title}>{serviceRequestStrings.title}</Text>\n                    </View>\n                        {this.renderLivingSpace()}\n                    <View style={styles.buttonContainer}>\n                        {isNullOrUndefined(hasEdit) || hasEdit ? (\n                            <ThinButton\n                                name={serviceRequestStrings.button}\n                                buttonStyle={styles.editButton}\n                                buttonTextStyle={styles.editButtonText}\n                                onClick={onClick} />\n                        ) : (\n                                <></>\n                            )}\n                    </View>\n                </View>\n            </View>\n        );\n    };\n};\n\nServiceRequestCount.defaultProps = {\n    hasEdit: true,\n    onClick: () => { },\n};","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { StyleSheet, Text, View, Platform } from 'react-native';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, Property } from 'homepairs-types';\nimport { isNullOrUndefined } from 'src/utility';\nimport {ThinButton} from 'src/elements';\n\nexport type GeneralHomeInfoProps = {\n    /**\n     * The individual property that gives this card the information to present \n     */\n    property: Property;\n\n    /**\n     * This allows the property to render the edit button. Should be set true for \n     * Property Mangers and false for Tenants \n     */\n    hasEdit?: boolean;\n\n    /**\n     * Callback function that should invoke something for the parent. This should \n     * navigate the user to an Edit Property modal\n     */\n    onClick?: () => any;\n};\n\nconst generalHomeStrings = strings.detailedPropertyPage.generalHomeInfo;\nconst colors = BaseStyles.LightColorTheme;\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: colors.secondary,\n        marginHorizontal: BaseStyles.MarginPadding.large,\n        marginTop: BaseStyles.MarginPadding.largeConst,\n        marginBottom: BaseStyles.MarginPadding.largeConst,\n        borderRadius: BaseStyles.BorderRadius.large,\n        borderBottomColor: colors.veryLightGray,\n        borderBottomWidth: 1,\n        padding: BaseStyles.MarginPadding.large,\n        width: BaseStyles.ContentWidth.thin,\n        alignSelf: 'center',\n        shadowColor: colors.shadow,\n        shadowRadius: 10,\n        shadowOffset: { width: 1, height: 1 },\n        shadowOpacity: 0.25,\n        elevation: 9,\n    },\n    livingSpaceContainer: {\n        flexDirection: 'row',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.wide,\n        paddingVertical: BaseStyles.MarginPadding.mediumConst,\n    },\n    addressContainer: {\n        borderBottomColor: colors.veryLightGray,\n        borderBottomWidth: 1,\n        paddingBottom: BaseStyles.MarginPadding.mediumConst,\n        marginBottom: BaseStyles.MarginPadding.mediumConst,\n    },\n    streetAddress: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.reg,\n        fontFamily: HomePairFonts.nunito_bold,\n    },\n    cityStateText: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.xsmal,\n    },\n    cardTitle: {\n        fontSize: BaseStyles.FontTheme.reg + 2,\n        maxWidth: 450,\n        fontFamily: BaseStyles.FontTheme.secondary,\n    },\n    cardDescription: {\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.small,\n    },\n    textContainer: {\n        width: BaseStyles.ContentWidth.reg,\n        borderBottomColor: colors.veryLightGray,\n        paddingBottom: BaseStyles.MarginPadding.mediumConst,\n        borderBottomWidth: 1,\n    },\n    detailContainer: {\n        flex: 1,\n        alignSelf: 'center',\n        alignItems: 'center',\n    },\n    detailName: {\n        fontSize: BaseStyles.FontTheme.xsmal,\n        marginBottom: BaseStyles.MarginPadding.mediumConst,\n        color: colors.tertiary,\n    },\n    detail: {\n        color: colors.tertiary,\n        fontSize: BaseStyles.FontTheme.reg + 2,\n        fontFamily: HomePairFonts.nunito_bold,\n    },\n    editButton: {\n        alignItems: 'center',\n        backgroundColor: colors.transparent,\n        padding: BaseStyles.MarginPadding.mediumConst,\n        marginBottom: Platform.OS !== 'web' ? 10 : undefined,\n        width: HomePairsDimensions.MIN_BUTTON_WIDTH,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: colors.lightGray,\n    },\n    editButtonText: {\n        color: colors.lightGray,\n        fontSize: 20,\n    },\n});\n\n/**\n * ---------------------------------------------------\n * General Home Info \n * ---------------------------------------------------\n * A child component for the Detailed Property Card that presents details about \n * the conditions of the living space. It presents an adress, the maximum amount \n * of tenants, number of bedrooms, and the number of bathrooms.  \n * @param {GeneralHomeInfoProps} props \n */\nexport default function GeneralHomeInfo(props: GeneralHomeInfoProps) {\n    const { property, hasEdit, onClick } = props;\n    const {address, tenants, bedrooms, bathrooms} = property;\n\n    function renderDetailBox(arg0: String, arg1: number) {\n        return (\n            <View style={styles.detailContainer}>\n                <Text style={styles.detailName}>{arg0}</Text>\n                <Text style={styles.detail}>{arg1}</Text>\n            </View>\n        );\n    }\n\n    function renderLivingSpace() {\n        return (\n            <View style={styles.livingSpaceContainer}>\n                {renderDetailBox(generalHomeStrings.tenants, tenants)}\n                {renderDetailBox(generalHomeStrings.bedrooms, bedrooms)}\n                {renderDetailBox(generalHomeStrings.bathrooms, bathrooms)}\n            </View>\n        );\n    }\n\n    return (\n        <View>\n            <View style={styles.container}>\n                <View style={styles.addressContainer}>\n                    <Text style={styles.streetAddress}>{address}</Text>\n                </View>\n                {renderLivingSpace()}\n\n                {isNullOrUndefined(hasEdit) || hasEdit ? (\n                    <ThinButton \n                        name={generalHomeStrings.button}\n                        buttonStyle={styles.editButton}\n                        buttonTextStyle={styles.editButtonText}\n                        onClick={onClick}/>\n                ) : (\n                    <></>\n                )}\n            </View>\n        </View>\n    );\n}\n\nGeneralHomeInfo.defaultProps = {\n    hasEdit: true,\n    onClick: () => {},\n};","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { StyleSheet, Text } from 'react-native';\nimport { Sticker } from 'src/elements';\nimport { FontTheme, ContentWidth, MarginPadding } from 'homepairs-base-styles';\nimport * as BaseStyles from 'homepairs-base-styles';\n\nexport type AddressStickerProps = {\n    /**\n     * Slightly greyed text to represent street address.\n     */\n    address: string;\n};\n\nconst colors = BaseStyles.LightColorTheme;\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: colors.veryLightGray,\n        width: ContentWidth.thin,\n        alignSelf: 'center',\n        alignItems: 'center',\n        marginVertical: MarginPadding.xlargConst,\n        padding: MarginPadding.largeConst,\n        borderRadius: 5,\n    },\n    cityStateText: {\n        color: colors.tertiary,\n        fontSize: FontTheme.reg,\n        fontFamily: FontTheme.primary,\n    },\n    streetText: {\n        fontSize: FontTheme.reg,\n        fontFamily: FontTheme.primary,\n        color: colors.lightGray,\n    },\n    textContainer: {\n        width: ContentWidth.reg,\n        paddingBottom: MarginPadding.mediumConst,\n        borderBottomWidth: 1,\n    },\n});\n\n/**\n * ---------------------------------------------------\n * Address Sticker\n * ---------------------------------------------------\n * A very simple component that essentiall formats text components into a stylized\n * visual. It only takes 3 properties for address, city, and state.\n * */\nexport default function AddressSticker(props: AddressStickerProps) {\n    const { address } = props;\n    return (\n        <Sticker style={styles.container}>\n            <Text style={styles.streetText}>{address}</Text>\n        </Sticker>\n    );\n}\n","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport {\n    View,\n    Platform,\n    SafeAreaView,\n    ScrollView,\n    Image,\n    StyleSheet,\n} from 'react-native';\nimport {\n    HomePairsDimensions,\n    Appliance, \n    Property,\n} from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { NavigationRouteScreenProps, navigationPages } from 'src/routes';\nimport {CurrentTenantCard, WithSinglePropertyDispatchProps, WithSinglePropertyStateProps, ApplianceInfo, ServiceRequestCount,\n    GeneralHomeInfo,\n    AddressSticker} from '../components';\n\n\nexport type DetailedPropertyProps = NavigationRouteScreenProps \n    & WithSinglePropertyDispatchProps\n    & WithSinglePropertyStateProps;\n\nconst colors = BaseStyles.LightColorTheme;\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        backgroundColor: colors.secondary,\n        width: BaseStyles.ContentWidth.max,\n        flex: 1,\n    },\n    pallet: {\n        backgroundColor: colors.secondary,\n        width: BaseStyles.ContentWidth.max,\n        flex: 1,\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        alignSelf: 'center',\n    },\n    imageContainer: {\n        width: BaseStyles.ContentWidth.max,\n        flex: 1,\n        overflow: 'hidden',\n        borderRadius: BaseStyles.BorderRadius.large,\n    },\n    imageWrapper: {\n        width: BaseStyles.ContentWidth.thin,\n        height: 200,\n        borderRadius: BaseStyles.BorderRadius.large,\n        backgroundColor: 'white',\n        alignSelf: 'center',\n        alignContent: 'center',\n        shadowColor: colors.shadow,\n        shadowRadius: 10,\n        shadowOffset: { width: 1, height: 1 },\n        shadowOpacity: 0.25,\n        elevation: 9,\n    },\n    scrollViewContentContainer: {\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        backgroundColor: colors.secondary,\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.max,\n        flexGrow: 1,\n    },\n    addBottomMargin: {\n        flex: 1,\n        marginBottom: BaseStyles.MarginPadding.largeConst,\n    },\n    homePairsPropertiesImage: {\n        flex: 1,\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.max,\n        height: '100%',\n        overflow: 'hidden',\n    },\n    homePairsPropertiesImageWeb: {\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.max,\n        height: '100%',\n    },\n    imageStyle: {\n        borderTopRightRadius: 10,\n        borderTopLeftRadius: 10,\n    },\n});\n\n/**\n * Helper function to recieve propId and property from passed in props \n * @param props \n */\nfunction getPropIdAndProperty(props:any): [string, Property]{\n    const {properties, navigation} = props;\n    const propId = navigation.getParam('propId');\n    return [propId, properties[propId]];\n}\n\nexport class DetailedPropertyScreenBase extends React.Component<DetailedPropertyProps> {\n\n    navigation;\n\n    token;\n\n    constructor(props: Readonly<DetailedPropertyProps>){\n        super(props);\n        this.navigation = props.navigation;\n        this.token = props.token;\n        this.openEditPropertyModal = this.openEditPropertyModal.bind(this);\n        this.openEditApplianceModal = this.openEditApplianceModal.bind(this);\n        this.openAddApplianceModal = this.openAddApplianceModal.bind(this);\n        this.openEditApplianceModal = this.openEditApplianceModal.bind(this);\n    };\n\n    componentDidMount() {\n        const {onUpdateHeader, setAppliancesAndTenants} = this.props;\n        onUpdateHeader();\n        const [propId] = getPropIdAndProperty(this.props);\n        setAppliancesAndTenants(propId);\n    }\n    \n    openEditPropertyModal() {\n        const [propId] = getPropIdAndProperty(this.props);\n        this.navigation.navigate(navigationPages.EditPropertyModal, {propId}, true);\n    }\n\n    openAddApplianceModal() {\n        const [,property] = getPropIdAndProperty(this.props);\n        this.navigation.navigate(navigationPages.AddApplianceModal, {property, token: this.token}, true);\n    }\n\n    openEditApplianceModal(appliance: Appliance) {\n        const [propId] = getPropIdAndProperty(this.props);\n        this.navigation.navigate(navigationPages.EditApplianceModal, {appliance, propId}, true);\n    }\n\n    renderContents() {\n        const [propId, property] = getPropIdAndProperty(this.props);\n        const {address} = property;\n        const {navigation, applianceInfo, tenantInfo, apiKey} = this.props;\n\n        return (\n            <ScrollView \n                contentContainerStyle={{}}\n                style={{flexGrow: 1}}>\n                <View style={styles.addBottomMargin}>\n                    <AddressSticker address={address}/>\n                    <View style={styles.imageWrapper}>\n                        <View style={styles.imageContainer}>\n                            <Image \n                                source={{uri: `https://maps.googleapis.com/maps/api/streetview?size=600x300&location=${address}&pitch=-0.76&key=${apiKey}`}} \n                                style={Platform.OS === 'web'\n                                ? styles.homePairsPropertiesImageWeb\n                                : styles.homePairsPropertiesImage} \n                                resizeMode='cover'/>\n                        </View>\n                    </View>\n                    <>\n                        <GeneralHomeInfo\n                            property={property}\n                            onClick={this.openEditPropertyModal}/>\n                    </>\n                    <ApplianceInfo \n                        appliances={applianceInfo} \n                        propId={propId}\n                        onAddApplianceModal={this.openAddApplianceModal} \n                        onEditApplianceModal={this.openEditApplianceModal}/>\n                    <>\n                        <CurrentTenantCard\n                            navigation={this.navigation}\n                            propId={propId}\n                            tenants={tenantInfo}/>\n                    </>\n                    <ServiceRequestCount \n                        onClick={() => navigation.navigate(navigationPages.ServiceRequestScreen)}\n                        propId={propId}\n                    />\n                </View>\n            </ScrollView>\n        );\n    }\n\n    render(){\n        return !(Platform.OS === 'ios') ? (\n            <View style={styles.container}>\n                <View style={styles.pallet}>{this.renderContents()}</View>\n            </View>\n        ) : (\n            <View style={styles.container}>\n                <SafeAreaView style={styles.pallet}>\n                    {this.renderContents()}\n                </SafeAreaView>\n            </View>\n        );\n    }\n}","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport {\n    StyleSheet,\n    Text,\n    View,\n    Platform,\n    ImageBackground,\n} from 'react-native';\nimport {\n    ThinButton,\n} from 'src/elements';\nimport { defaultProperty } from 'homepairs-images';\nimport strings from 'homepairs-strings';\nimport { HomePairsDimensions, Property } from 'homepairs-types';\n\n\n/**\n * Main App Components will have similar functionality to the parent components ONLY\n * in terms of Presentation. These are NOT SMART COMPONENTS. These components should never\n * have access to the store. They should send information back to the parent class and allow\n * the parent to take care of logic related to the global state.\n */\n\nconst styles = StyleSheet.create({\n    streetText: {\n        fontSize: 22,\n        fontFamily: 'nunito-regular',\n        color: '#fff',\n        textAlign: 'center',\n    },\n    cityText: {\n        fontSize: 18,\n        fontFamily: 'nunito-regular',\n        color: '#9DA0A2',\n    },\n    propertyAddressContainer: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderTopRightRadius: 10,\n        borderTopLeftRadius: 10,\n        height: '100%',\n        width: '100%',\n        backgroundColor: 'rgba(55,66,69,.68)',\n    },\n    imageContainer: {\n        width: '100%',\n        height: '75%',\n        flex: 10,\n        borderTopRightRadius: 10,\n        borderTopLeftRadius: 10,\n        overflow: 'hidden',\n    },\n    remainingContainer: {\n        flex: 4,\n        alignSelf: 'center',\n        alignContent: 'center',\n        justifyContent: 'center',\n    },\n    container: {\n        backgroundColor: '#fff',\n        marginHorizontal: '5%',\n        marginVertical: 15,\n        borderRadius: 10,\n        width: '90%',\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        alignSelf: 'center',\n        alignItems: 'center',\n        height: Platform.OS === 'web' ? 325 : 275,\n        shadowColor: 'black',\n        shadowRadius: 10,\n        shadowOffset: { width: 0, height: -1 },\n        shadowOpacity: 0.2,\n        elevation: 5,\n    },\n    thinButtonContainer: {\n        alignSelf: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingHorizontal: 10,\n        minHeight: 50,\n    },\n    thinButton: {\n        alignItems: 'center',\n        backgroundColor: '#fff',\n        padding: 10,\n        maxWidth: 300,\n        minWidth: 200,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: '#B3C0C2',\n    },\n    thinButtonText: {\n        color: '#798285',\n        fontSize: 16,\n        alignSelf: 'center',\n    },\n    homePairsPropertiesImage: {\n        flex: 1,\n        alignSelf: 'center',\n        width: '100%',\n        height: '100%',\n    },\n    homePairsPropertiesImageWeb: {\n        alignSelf: 'center',\n        width: '100%',\n        height: '100%',\n    },\n    imageStyle: {\n        borderTopRightRadius: 10,\n        borderTopLeftRadius: 10,\n    },\n});\n\n\n\nexport type ViewPropertyCardProps = {\n    /**\n     * Callback that will navigate to the DetailedProperty Screen\n     */\n    viewButtonSelectedCallBack?: (propId: string, navigation?: any, ...propertyInfo: any) => any;\n\n    /**\n     * The unique identifier of the property contents in the redux Store. This value will\n     * be assigned to the store's selectedPropertyId member when the detailed page is rendered\n     */\n    propId: string;\n\n    property: Property;\n\n    /**\n     * An optional image that is used when the card is rendered. If none is provided, a default \n     * image will be used instead.\n     */\n    image?: any;\n};\n\nconst viewPropertyButtonText = strings.propertiesPage.viewPropertyCardButton;\n\n/**\n * ---------------------------------------------------\n * View Property Card\n * ---------------------------------------------------\n * A component that provides very high level information about a property. It is intended \n * to be passed a callback function from its parent to permit it to navigate to a detailed property \n * screen with the the card's assigned Property. It is also capable of being passed an image.\n * \n * TODO: Set Google Maps API to fetch address images.\n * @param {ViewPropertyCardProps} props \n */\nexport default function ViewPropertyCard(props: ViewPropertyCardProps) {\n    const { viewButtonSelectedCallBack, property, propId, image} = props;\n    const { address } = property;\n    /**\n     * This function is intended to invoke the callback to its parent function. It will return the index of the\n     * the Property found in global store's PropertyState which an array of Properties, Property[]\n     */\n    function sendIndexToParent() {\n        viewButtonSelectedCallBack(propId);\n    };\n\n\n    function renderImageContent() {\n        return (\n            <ImageBackground\n                source={image}\n                style={\n                    Platform.OS === 'web'\n                    ? styles.homePairsPropertiesImageWeb\n                    : styles.homePairsPropertiesImage\n                }\n                imageStyle={styles.imageStyle}\n                onError={(error) => {console.log(error);}}\n                resizeMode=\"cover\">\n                <View style={styles.propertyAddressContainer}>\n                    <Text style={styles.streetText}>{address}</Text>\n                </View>\n            </ImageBackground>\n        );\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.imageContainer}>\n                {renderImageContent()}\n            </View>\n            <View style={styles.remainingContainer}>\n                <ThinButton \n                    name={viewPropertyButtonText}\n                    containerStyle={styles.thinButtonContainer}\n                    buttonStyle={styles.thinButton}\n                    buttonTextStyle={styles.thinButtonText}\n                    onClick={sendIndexToParent} />\n            </View>\n        </View>\n    );\n}\n\nViewPropertyCard.defaultProps = {\n    viewButtonSelectedCallBack: (propId: string, navigation?: any) => {return {propId, navigation};},\n    image: defaultProperty,\n};\n","import React from 'react';\nimport { PropertyListState, HeaderState, Property} from 'homepairs-types';\nimport { navigationPages } from 'src/routes';\nimport { Platform, FlatList} from 'react-native';\nimport { SceneInjectedProps } from '../../components';\nimport { ViewPropertyCard } from './ViewPropertyCard';\n\n\nexport type PropertiesScreenStateProps = {\n    propertyState: PropertyListState;\n    header: HeaderState;\n    apiKey: string,\n};\nexport type PropertiesScreenDispatchProps = {\n    onRevealGoBack: (showGoBack: boolean) => any;\n\n    // TODO: Change to propId when backend is ready. Also, store the selected property/index in async storage\n    onSelectProperty: (propId: string) => any;\n};\n\n\nexport type PropertiesScreenProps = SceneInjectedProps &\n    PropertiesScreenStateProps &\n    PropertiesScreenDispatchProps \n\n/**\n * ---------------------------------------------------\n * Properties Screen Base\n * ---------------------------------------------------\n * A component that renders a list of selectable cards that will navigate the user to \n * details about a specified property. This component is intended to be connected with \n * the Navigator, Homepairs Redux Store, and is intended to be wrapped with a withSceneHeader\n * High Order Component.\n * Child Components: \n *  -ViewPropertyCard\n */\nexport class PropertiesScreenBase extends React.Component<PropertiesScreenProps> {\n\n    constructor(props: Readonly<PropertiesScreenProps>) {\n        super(props);\n        this.navigateToDetailedProperty = this.navigateToDetailedProperty.bind(this);\n    }\n\n    navigateToDetailedProperty(propId: string) {\n        const {navigation, onSelectProperty, onRevealGoBack} = this.props;\n\n        onSelectProperty(propId);\n        onRevealGoBack(true);\n        navigation.navigate(navigationPages.SingleProperty, {propId});\n    }\n\n    fetchPropertyImage(address: string) {\n        const {apiKey} = this.props;\n        const uri = `https://maps.googleapis.com/maps/api/streetview?size=600x300&location=${address}&pitch=-0.76&key=${apiKey}`;\n        return Platform.OS === 'web' ? uri : {uri} ;\n    }\n\n    renderViewPropertyCard(pair: [string, Property]){\n        const [propId, property] = pair;\n        const propImage = this.fetchPropertyImage(property.address);\n        return (\n            <ViewPropertyCard\n                key={propId}\n                image={propImage}\n                viewButtonSelectedCallBack={this.navigateToDetailedProperty}\n                property={property}\n                propId={propId}\n            />\n        );\n    }\n\n    render() {\n        const { propertyState} = this.props;\n        const { properties } = propertyState;\n        return (\n            <FlatList\n                initialNumToRender={3}\n                style={{flex:1, marginTop: 5, marginBottom: 5}}\n                contentContainerStyle={{flexGrow: 1, justifyContent: 'center', alignContent: 'center'}}\n                data={Object.entries(properties)}\n                renderItem={({item}) => this.renderViewPropertyCard(item)}\n                keyExtractor={(item) => item[0].toString()}\n                />\n\n        );\n    }\n}\n","import { AppState, MainAppStackType } from 'homepairs-types';\nimport { connect } from 'react-redux';\nimport { HeaderActions, PropertyListActions} from 'homepairs-redux-actions';\nimport { navigationPages} from 'src/routes';\nimport { \n    PropertiesScreenBase,\n    PropertiesScreenStateProps,\n    PropertiesScreenDispatchProps,\n} from './PropertiesScreenBase';\n\nfunction mapStateToProps(state: AppState): PropertiesScreenStateProps {\n    return {\n        propertyState: state.properties,\n        header: state.header,\n        apiKey: state.settings.apiKey,\n    };\n}\nconst mapDispatchToProps: (\n    dispatch: any\n) => PropertiesScreenDispatchProps = dispatch => ({\n    // Changes the header to render a back button \n    onRevealGoBack: (showBackButton: boolean) => {\n        dispatch(HeaderActions.showGoBackButton(showBackButton));\n    },\n    // Sets the selectedProperty to the position of the value in the property[]\n    onSelectProperty: (selectedPropertyId: string) => {\n        dispatch(PropertyListActions.setSelectedProperty(selectedPropertyId));\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PropertiesScreenBase);","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { StyleSheet, Text, View } from 'react-native';\nimport strings from 'homepairs-strings';\nimport { HomePairsDimensions, Contact } from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairFonts } from 'homepairs-fonts';\n\nexport type PrimaryContactInfoProps = {\n    propertyManager: Contact;\n};\n\nconst primaryContactStrings = strings.detailedPropertyPage.primaryContact;\n\nfunction setStyles(colorTheme?: BaseStyles.ColorTheme) {\n    const colors = colorTheme == null ? BaseStyles.LightColorTheme : colorTheme;\n    return StyleSheet.create({\n        container: {\n            backgroundColor: colors.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.medium,\n            marginTop: BaseStyles.MarginPadding.mediumConst,\n            marginBottom: BaseStyles.MarginPadding.medium,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderBottomColor: colors.veryLightGray,\n            padding: BaseStyles.MarginPadding.large,\n            width: BaseStyles.ContentWidth.thin,\n            alignSelf: 'center',\n            shadowColor: colors.shadow,\n            shadowRadius: 10,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 0.25,\n            elevation: 9,\n        },\n        primaryContactContainer: {\n            borderBottomColor: colors.veryLightGray,\n            borderBottomWidth: 1,\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n            marginBottom: BaseStyles.MarginPadding.mediumConst,\n        },\n        title: {\n            color: colors.tertiary,\n            fontSize: BaseStyles.FontTheme.reg,\n            fontFamily: HomePairFonts.nunito_bold,\n        },\n        subtitle: {\n            color: colors.tertiary,\n            fontSize: BaseStyles.FontTheme.xsmal,\n        },\n        cardTitle: {\n            fontSize: BaseStyles.FontTheme.reg + 2,\n            maxWidth: 450,\n            fontFamily: BaseStyles.FontTheme.secondary,\n        },\n        textContainer: {\n            width: BaseStyles.ContentWidth.reg,\n            borderBottomColor: colors.veryLightGray,\n            paddingBottom: BaseStyles.MarginPadding.mediumConst,\n            borderBottomWidth: 1,\n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n            flex: 1,\n        },\n        detailsLabel: {\n            color: colors.lightGray,\n            fontFamily: 'nunito-regular',\n            fontSize: 12,\n        },\n        detailsValue: {\n            fontFamily: BaseStyles.FontTheme.primary,\n            fontSize: 16,\n        },\n        detailsWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginTop: BaseStyles.MarginPadding.small,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'flex-start',\n            justifyContent: 'flex-start',\n        },\n        contactWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginHorizontal: BaseStyles.MarginPadding.medium,\n            marginTop: BaseStyles.MarginPadding.mediumConst,\n            marginBottom: BaseStyles.MarginPadding.medium,\n            alignSelf: 'flex-start',\n            justifyContent: 'flex-start',\n        },\n    });\n}\n\nexport default function PrimaryContactInfo(props: PrimaryContactInfoProps) {\n    const {\n        propertyManager,\n    } = props;\n\n    const { firstName, lastName, email } = propertyManager;\n    const styles = setStyles(BaseStyles.LightColorTheme);\n\n    function labeledItem(label: string, value: string) {\n        return (\n            <View>\n                <View style={styles.detailsWrapperStyle}>\n                    <Text style={styles.detailsLabel}>{label}</Text>\n                </View>\n                <View style={styles.detailsWrapperStyle}>\n                    <Text style={styles.detailsValue}>{value}</Text>\n                </View>\n            </View>\n        );\n    }\n\n    function ContactInfo() {\n        return (\n            <View>\n                <View style={styles.contactWrapperStyle}>\n                    {labeledItem(primaryContactStrings.name, (`${firstName} ${lastName}`))}\n                </View>\n                <View style={styles.contactWrapperStyle}>\n                    {labeledItem(primaryContactStrings.email, (`${email}`))}\n                </View>\n            </View>\n        );\n    }\n\n    /* Need the wrapper View so iOS can render the content properly. I don't know why it does this. */\n    return (\n        <View>\n            <View style={styles.container}>\n                <View style={styles.primaryContactContainer}>\n                    <Text style={styles.title}>{primaryContactStrings.title}</Text>\n                    <Text style={styles.subtitle}>{primaryContactStrings.subtitle}</Text>\n                </View>\n                {ContactInfo()}\n            </View>\n        </View>\n    );\n\n}\n","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport {\n    View,\n    Platform,\n    SafeAreaView,\n    ScrollView,\n    Image,\n    StyleSheet,\n} from 'react-native';\nimport { Property, HomePairsDimensions, Contact } from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { navigationPages, NavigationRouteHandler } from 'src/routes';\nimport { CurrentTenantCard, WithSinglePropertyDispatchProps, WithSinglePropertyStateProps, ApplianceInfo, ServiceRequestCount, GeneralHomeInfo,\n    AddressSticker } from '../components';\nimport { PrimaryContactInfo } from './PrimaryContactInfo';\n\n/* tenants cannot edit properties */\nconst canEditProps = false;\n\nexport type TenantPropertyStateProps = {\n  propertyManager: Contact,\n  apiKey: string,\n}\n\nexport type TenantPropertyDispatchProps = {\n    onRevealGoBack?: (showGoBack:boolean) => any;\n}\n\n\ntype Props = {navigation: NavigationRouteHandler} \n& WithSinglePropertyDispatchProps\n& WithSinglePropertyStateProps\n& TenantPropertyStateProps;\n\nconst colors = BaseStyles.LightColorTheme;\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        backgroundColor: colors.secondary,\n        width: BaseStyles.ContentWidth.max,\n        flex: 1,\n    },\n    pallet: {\n        backgroundColor: colors.secondary,\n        width: BaseStyles.ContentWidth.max,\n        flex: 1,\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        alignSelf: 'center',\n    },\n    imageContainer: {\n        width: BaseStyles.ContentWidth.max,\n        flex: 1,\n        overflow: 'hidden',\n        borderRadius: BaseStyles.BorderRadius.large,\n    },\n    imageWrapper: {\n        width: BaseStyles.ContentWidth.thin,\n        height: 200,\n        borderRadius: BaseStyles.BorderRadius.large,\n        backgroundColor: 'white',\n        alignSelf: 'center',\n        alignContent: 'center',\n        shadowColor: colors.shadow,\n        shadowRadius: 10,\n        shadowOffset: { width: 1, height: 1 },\n        shadowOpacity: 0.25,\n        elevation: 9,\n    },\n    scrollViewContentContainer: {\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        backgroundColor: colors.secondary,\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.max,\n        flexGrow: 1,\n    },\n    addBottomMargin: {\n        flex: 1,\n        marginBottom: BaseStyles.MarginPadding.largeConst,\n    },\n    homePairsPropertiesImage: {\n        flex: 1,\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.max,\n        height: '100%',\n        overflow: 'hidden',\n    },\n    homePairsPropertiesImageWeb: {\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.max,\n        height: '100%',\n    },\n    imageStyle: {\n        borderTopRightRadius: 10,\n        borderTopLeftRadius: 10,\n    },\n});\n\n\nexport class TenantPropertyScreenBase extends React.Component<Props>{\n\n    /* BEWARE: styles.addBottomMargin doesn't always work, had to add it manually \n        / overlapping styles aen't currently supported by react\n        see ref: https://github.com/facebook/react/issues/2231 */\n\n\n    componentDidMount(){\n        // TODO: Call the HOC componentDidMount function to do this logic and and pass the state \n        // to the children components where most relevant. This will be for the hardening. \n        const {setAppliancesAndTenants, properties} = this.props;\n        const [property] = Object.entries(properties);\n        const [propId] = property;\n        setAppliancesAndTenants(propId);\n    }\n\n    renderProperty(pair: [string, Property]) {\n        const [propId, property] = pair;\n        const { address } = property;\n        const {propertyManager, navigation, apiKey, tenantInfo, applianceInfo} = this.props;\n        return (\n            <ScrollView \n                contentContainerStyle={{}}\n                style={{flexGrow: 1}}>\n                <View style={styles.addBottomMargin}>\n                    <AddressSticker address={address}/>\n                    <View style={styles.imageWrapper}>\n                        <View style={styles.imageContainer}>\n                            <Image \n                                source={{uri: `https://maps.googleapis.com/maps/api/streetview?size=600x300&location=${address}&pitch=-0.76&key=${apiKey}`}} \n                                style={Platform.OS === 'web'\n                                ? styles.homePairsPropertiesImageWeb\n                                : styles.homePairsPropertiesImage} \n                                resizeMode='cover'/>\n                        </View>\n                    </View>\n                    <GeneralHomeInfo property={property} hasEdit={canEditProps} />\n                    <PrimaryContactInfo propertyManager={propertyManager} />\n                    <ApplianceInfo \n                        appliances={applianceInfo} \n                        propId={propId}\n                        hasEdit={false}/>\n                    <CurrentTenantCard \n                        propId={propId}\n                        tenants={tenantInfo}\n                        navigation={navigation}\n                        hasEdit={false}/>\n                    <ServiceRequestCount \n                        onClick={() => navigation.navigate(navigationPages.ServiceRequestScreen)}\n                        propId={propId}\n                    />\n                </View>\n            </ScrollView>\n        );\n    }\n\n    render() {\n        const {properties} = this.props;\n        const property = Object.entries(properties)[0];\n\n        return (\n        !(Platform.OS === 'ios') ?\n            (\n                <View style={styles.container}>\n                    <View style={styles.pallet}>\n                        {this.renderProperty(property)}\n                    </View>\n                </View>\n            ) : (\n                <View style={styles.container}>\n                    <SafeAreaView style={styles.pallet}>\n                        {this.renderProperty(property)}\n                    </SafeAreaView>\n                </View>\n            ));\n    }\n    \n    \n}\n","import { AppState } from \"homepairs-types\";\nimport { connect } from \"react-redux\";\nimport { TenantPropertyScreenBase, TenantPropertyStateProps} from './TenantPropertyScreenBase';\nimport { withSinglePropertyConnect } from \"../components\";\n\nfunction mapStateToProps(state: AppState) : TenantPropertyStateProps {\n    return { \n      propertyManager: state.properties.propertyManager, \n      apiKey: state.settings.apiKey,\n    };\n};\n\nexport default connect(mapStateToProps)(withSinglePropertyConnect(TenantPropertyScreenBase));\n","/**\n * Prepare these property pages for parent usage. The components in the parent directory\n * should only care about these modules for usage.\n */\n\nimport { withSinglePropertyConnect } from './components';\nimport { DetailedPropertyScreenBase } from './DetailedPropertiesScreen';\nimport { PropertiesScreen } from './PropertiesScreen';\nimport { TenantPropertyScreen} from './TenantPropertyScreen';\n\nexport const DetailedPropertyPage = withSinglePropertyConnect(DetailedPropertyScreenBase);\nexport const PropertiesPage = PropertiesScreen;\nexport const TenantPropertyPage = withSinglePropertyConnect(TenantPropertyScreen);\n","import React from 'react';\nimport { StyleSheet, View, Text, Platform } from 'react-native';\nimport { ApplianceType } from 'homepairs-types';\nimport { ButtonWithBitmap } from 'src/elements';\nimport {bolt, fan, tint, blender} from 'homepairs-images';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { categoryToString } from 'src/utility';\n\nconst styles = StyleSheet.create({\n    container: {\n        width: '100%',\n        alignSelf: 'center',\n        marginTop: BaseStyles.MarginPadding.medium,\n    },\n    formTitle: {\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.small,\n        color: '#AFB3B5',\n    },\n    buttonContainer: {\n        flex: 1,\n        flexDirection:'row', \n        marginBottom: BaseStyles.MarginPadding.large,\n    },\n    leftButtonContainer: {\n        flex: 1,\n        height: '100%',\n        width: '50%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingLeft: '15%',\n        paddingRight: '5%',\n    },\n    rightButtonContainer: {\n        flex: 1,\n        height: '100%',\n        width: '50%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingRight: '15%',\n        paddingLeft: '5%',\n    },\n    button: {\n        alignItems: 'center',\n        backgroundColor: 'white',\n        flexDirection: 'column',\n        padding: 10,\n        minWidth: 110,\n        minHeight: Platform.OS === 'web' ? 105 : 105,\n        maxWidth: 110,\n        width: BaseStyles.ContentWidth.max,\n        borderRadius: 8,\n        borderWidth: 2,\n        borderColor: '#BEC3C7',\n        shadowRadius: 2,\n        shadowOffset: { width: 1, height: 1 },\n        shadowOpacity: .2,\n        elevation: 2,\n    },\n    option: {\n        fontSize : BaseStyles.FontTheme.reg,\n        fontFamily: BaseStyles.FontTheme.primary,\n    },\n});\n\ntype Props = {\n    /**\n     * Id used to identify this component during testing \n     */\n    testID?: string,\n\n    /**\n     * The callback function that should return the selected option to the parent\n     */\n    onPress: (...args) => any,\n}\n\ntype State = {\n    /**\n     * If a button has been selected, this state value will force a string to render \n     */\n    hasBeenClicked: boolean,\n\n    /**\n     * String that will be presented when an option has been selected. \n     */\n    selectedOption: string,\n}\n\n/**\n * ------------------------------------------------------------\n * Choose Service Category Component \n * ------------------------------------------------------------\n * A visual component that shows the user four buttons that help in navigating to different \n * pages for requesting a new requests. If an option is selected, text will instead \n * be rendered.  \n * @param props \n */\nexport default class ChooseServiceCategory extends React.Component<Props, State>{\n\n    onPress\n\n    constructor(props: Readonly<Props>){\n        super(props);\n\n        this.state = {\n            hasBeenClicked: false,\n            selectedOption: '',\n        };\n        const {onPress} = props;\n        this.onPress = onPress;\n    }\n\n    setOptionString(option: string){\n        this.setState({\n            hasBeenClicked: true,\n            selectedOption: option,\n        });\n    }\n\n    setServiceCategory(type: ApplianceType){\n        this.onPress(type);\n        this.setOptionString(categoryToString(type));\n    }\n    \n    render(){\n        const {container, leftButtonContainer, rightButtonContainer, buttonContainer, button, option} = styles;\n        const {hasBeenClicked, selectedOption} = this.state;\n        return hasBeenClicked ? \n        (<View style={{alignSelf: 'center', width: BaseStyles.ContentWidth.reg}}>\n            <Text style={option}>{selectedOption}</Text>\n            </View>\n        ) \n        : \n        (\n            <View style={{alignSelf: 'center', width: BaseStyles.ContentWidth.reg, marginBottom: 10}}>\n                <View style={container}>\n                    <View style={buttonContainer}>\n                        <ButtonWithBitmap \n                            image={bolt} \n                            name='Lighting and Electrical' \n                            onPress={() => {this.setServiceCategory(ApplianceType.LightingAndElectric);}}\n                            containerStyle={leftButtonContainer}\n                            buttonStyle={button}/>\n                        <ButtonWithBitmap \n                            image={tint} \n                            name='Plumbing' \n                            onPress={() => {this.setServiceCategory(ApplianceType.Plumbing);}}\n                            containerStyle={rightButtonContainer}\n                            buttonStyle={button}/>\n                    </View>\n                    <View style={buttonContainer}>\n                        <ButtonWithBitmap \n                            image={fan} \n                            name={`Heating and\\nAir Conditioning`}\n                            onPress={() => {this.setServiceCategory(ApplianceType.HVAC);}}\n                            containerStyle={leftButtonContainer}\n                            buttonStyle={button}/>\n                        <ButtonWithBitmap \n                            image={blender} \n                            name='Appliance' \n                            onPress={() => {this.setServiceCategory(ApplianceType.GeneralAppliance);}}\n                            containerStyle={rightButtonContainer}\n                            buttonStyle={button}/>\n                    </View>\n                </View>\n            </View>\n        );\n    };\n}\n\nChooseServiceCategory.defaultProps = {\n    testID: 'choose-service-category',\n};","import React, { Component } from 'react';\nimport {\n    View,\n    Text,\n    ScrollView,\n    StyleSheet,\n    TouchableOpacity,\n} from 'react-native';\nimport {\n    HomePairsDimensions, ServiceRequest, ServiceProvider,\n} from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport Colors from 'homepairs-colors';\nimport { ServiceProviderButton, ThinButton, ThinButtonProps } from 'src/elements';\n\nconst colors = BaseStyles.LightColorTheme;\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginBottom: BaseStyles.MarginPadding.small,\n    },\n    pallet: {\n        backgroundColor: colors.secondary,\n        width: BaseStyles.ContentWidth.max,\n        flex: 1,\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        alignSelf: 'center',\n    },\n    addBottomMargin: {\n        flex: 1,\n        marginBottom: BaseStyles.MarginPadding.largeConst,\n    },\n    buttonContainer: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        padding: BaseStyles.MarginPadding.mediumConst,\n        width: BaseStyles.ContentWidth.reg,\n    },\n    textContainer: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        marginTop: BaseStyles.MarginPadding.large,\n        marginHorizontal: BaseStyles.MarginPadding.largeConst + 5,\n    },\n    title: {\n        fontFamily: BaseStyles.FontTheme.primary,\n        color: colors.lightGray,\n    },\n    option: {\n        fontSize: BaseStyles.FontTheme.reg,\n        fontFamily: BaseStyles.FontTheme.primary,\n    },\n    selectedLeftButton: {\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.primary,\n        height: 30,\n        marginHorizontal: BaseStyles.MarginPadding.statusButton,\n    },\n    selectedRightButton: {\n        alignItems: 'flex-end',\n        justifyContent: 'center',\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.primary,\n        height: 30,\n    },\n    selectedText: {\n        color: colors.shadow,\n        fontSize: BaseStyles.FontTheme.reg,\n        fontFamily: BaseStyles.FontTheme.secondary,\n        alignSelf: 'center',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    unselectedLeftButton: {\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        backgroundColor: colors.transparent,\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.lightGray,\n        height: 30,\n        marginHorizontal: BaseStyles.MarginPadding.statusButton,\n    },\n    unselectedRightButton: {\n        alignItems: 'flex-end',\n        justifyContent: 'center',\n        backgroundColor: colors.transparent,\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.lightGray,\n        height: 30,\n    },\n    unselectedText: {\n        color: colors.darkGray,\n        fontSize: BaseStyles.FontTheme.reg - 1,\n        alignSelf: 'center',\n    },\n    networkText: {\n        textAlign: 'center',\n        alignSelf: 'center',\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.reg,\n    },\n    networkErrorText: {\n        textAlign: 'center',\n        alignSelf: 'center',\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.reg,\n        color: BaseStyles.LightColorTheme.red,\n    },\n});\n\nexport type ServiceProviderRadioState = {\n    preferredProvidersSelected: boolean,\n    networkProvidersFound: boolean,\n    networkError: boolean,\n    providerName: string,\n    clicked: boolean,\n}\n\nexport type ServiceProviderRadioProps = {\n    parentCallBack?: (childData: number) => any;\n    serviceProviders: ServiceProvider[],\n}\n\nconst initialState: ServiceProviderRadioState = {\n    preferredProvidersSelected: true,\n    networkProvidersFound: false,\n    networkError: true,\n    providerName: '',\n    clicked: false,\n};\n\nfunction filterTabbedObjects(unfilteredServiceProviders: ServiceRequest[]) {\n    const filteredServiceProviders: ServiceRequest[] = unfilteredServiceProviders.filter(sp => sp);\n    /* TO DO - IMPLEMENT THIS ONCE WE CAN FILTER SERVICE PROVIDERS. RIGHT NOW, THEY ONLY HAVE A SKILL FIELD,\n       BUT NOT NECESSARILY ANY FIELD THAT CAN CORRESPOND WITH REQUEST OR APPLIANCE TYPES */\n    return filteredServiceProviders;\n}\n\n/**\n * ------------------------------------------------------------\n * Choose Service Provider Component \n * ------------------------------------------------------------\n * A visual component that shows the user two tabs for navigating the type of service provider they would like to ß\n */\n\nexport default class ChooseServiceProvider extends Component<ServiceProviderRadioProps, ServiceProviderRadioState> {\n\n    // eslint-disable-next-line react/static-property-placement\n    static defaultProps: ServiceProviderRadioProps = {\n        parentCallBack: (childData: number) => { return childData; },\n        serviceProviders: [],\n    }\n\n    constructor(props: Readonly<ServiceProviderRadioProps>) {\n        super(props);\n        console.log(\"set to false\");\n        this.state = initialState;\n        this.onPressNetwork = this.onPressNetwork.bind(this);\n        this.onPressGetNetworkProviders = this.onPressGetNetworkProviders.bind(this);\n        this.onPressPreferred = this.onPressPreferred.bind(this);\n        this.selectProvider = this.selectProvider.bind(this);\n    }\n\n    onPressNetwork() {\n        this.setState({ preferredProvidersSelected: false });\n    }\n\n    onPressGetNetworkProviders() {\n        console.log(\"change to true\");\n        this.setState({ networkProvidersFound: true });\n    }\n\n    onPressPreferred() {\n        this.setState({ preferredProvidersSelected: true });\n    }\n\n    selectProvider(provId: number, name: string) {\n        const { parentCallBack } = this.props;\n        parentCallBack(provId);\n        this.setState({ providerName: name, clicked: true });\n    }\n\n    renderProviderTypeRadioButton(preferredProvidersSelected: boolean) {\n        const leftButtonStyle = preferredProvidersSelected ? styles.selectedLeftButton : styles.unselectedLeftButton;\n        const rightButtonStyle = preferredProvidersSelected ? styles.unselectedRightButton : styles.selectedRightButton;\n        return (\n            <View style={{ width: '100%', alignSelf: 'center', justifyContent: 'center', alignItems: 'center'}}>\n                <View style={styles.buttonContainer}>\n                    <TouchableOpacity\n                        testID='service-radio-preferred'\n                        style={leftButtonStyle}\n                        onPressIn={this.onPressPreferred}>\n                        <Text style={preferredProvidersSelected ?\n                            styles.selectedText : styles.unselectedText}>\n                            {\"Preferred\"}\n                        </Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        testID='service-radio-network'\n                        style={rightButtonStyle}\n                        onPressIn={this.onPressNetwork}>\n                        <Text style={preferredProvidersSelected ?\n                            styles.unselectedText : styles.selectedText}>\n                            {\"Network\"}\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        );\n\n    }\n\n    renderServiceProviders() {\n        const { preferredProvidersSelected, networkProvidersFound } = this.state;\n\n        const buttonProps: ThinButtonProps = {\n            name: 'Continue',\n            containerStyle: {\n                flex: 1,\n                alignSelf: 'center',\n                justifyContent: 'center',\n                marginTop: BaseStyles.MarginPadding.largeConst,\n                marginBottom: BaseStyles.MarginPadding.xlarge,\n                minHeight: 50,\n            },\n            buttonStyle: {\n                alignItems: 'center',\n                backgroundColor: Colors.LightModeColors.transparent,\n                padding: BaseStyles.MarginPadding.mediumConst,\n                maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n                minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n                borderRadius: BaseStyles.BorderRadius.large,\n                borderWidth: 1,\n                borderColor: Colors.LightModeColors.blueButton,\n            },\n            buttonTextStyle: {\n                color: Colors.LightModeColors.blueButtonText,\n                fontSize: BaseStyles.FontTheme.reg,\n                alignSelf: 'center',\n            },\n        };\n\n        return (\n            // eslint-disable-next-line no-nested-ternary\n            preferredProvidersSelected ? this.renderPreferredProviders()\n                : (networkProvidersFound ? this.renderNetworkProviders() :\n                    <View>\n                        <View style={styles.textContainer}>\n                            <Text style={styles.networkText}>\n                                {\"\\tYour request will be sent to the Roopairs\\n network. When your service request is ready,\\n you'll be able to choose from a handful of bids\\n from qualified service professionals.\"}\n                            </Text>\n                        </View>\n                        <ThinButton\n                            onClick={() => this.onPressGetNetworkProviders()}\n                            name={buttonProps.name}\n                            containerStyle={buttonProps.containerStyle}\n                            buttonStyle={buttonProps.buttonStyle}\n                            buttonTextStyle={buttonProps.buttonTextStyle}\n                        />\n                    </View>)\n        );\n    }\n\n\n\n    renderNetworkProviders() {\n        const { serviceProviders } = this.props;\n        const { networkProvidersFound, networkError } = this.state;\n        /* const filteredServiceProviders = serviceProviders; // TO DO IMPLEMENT FILTER\n\n        return (\n            filteredServiceProviders.map(\n                serviceProvider => {\n                    return (<ServiceProviderButton onClick={this.selectProvider} key={serviceProvider.name} serviceProvider={serviceProvider} />);\n                })); */\n        return (\n            ((networkError || !networkProvidersFound) ?\n                <View style={styles.textContainer}>\n                    <Text style={styles.networkErrorText}>\n                        {\"Network Providers are not currently implemented. \\nPlease choose a preferred provider.\"}\n                    </Text>\n                </View>\n                : this.selectProvider(serviceProviders[0].provId, \"Network\")\n            ));\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    renderPreferredProviders() {\n        const { serviceProviders } = this.props;\n        const filteredServiceProviders = serviceProviders; // TO DO IMPLEMENT FILTER\n\n        return (\n            filteredServiceProviders.map(\n                serviceProvider => {\n                    return (<ServiceProviderButton onClick={this.selectProvider} key={serviceProvider.name} serviceProvider={serviceProvider} />);\n                }));\n    }\n\n    render() {\n        const { preferredProvidersSelected, clicked, providerName } = this.state;\n\n        return clicked ? (\n            <View style={{ alignSelf: 'center', width: BaseStyles.ContentWidth.reg }}>\n                <Text style={styles.option}>{providerName}</Text>\n            </View>) : (\n                <ScrollView style={{ flexGrow: 1 }}>\n                    <View style={styles.addBottomMargin}>\n                        {this.renderProviderTypeRadioButton(preferredProvidersSelected)}\n                        {this.renderServiceProviders()}\n                    </View>\n                </ScrollView>\n            );\n    }\n}","import React, { Component } from 'react';\nimport {View, Text, StyleSheet } from 'react-native';\nimport {ThinButton, ThinButtonProps, ApplianceCategorizer } from 'src/elements';\nimport {Appliance, ApplianceType } from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport Colors from 'homepairs-colors';\nimport { categoryToString } from 'src/utility';\nimport { Divider } from 'react-native-elements';\n\n\nexport type ChooseApplianceProps = {\n    parentCallBack?: (child? : any) => any, \n    appliances?: Appliance[],\n    applianceType?: ApplianceType,\n}\n\n\nexport type ChooseApplianceState = {\n    clicked: boolean, \n    selected: string, \n}\n\nconst initialState : ChooseApplianceState = {\n    clicked: false, \n    selected: '',\n};\n\nconst styles = StyleSheet.create({\n    selectedText: {\n        color: Colors.LightModeColors.greyButtonText, \n        fontSize: BaseStyles.FontTheme.reg,\n        alignSelf: 'flex-start',\n        padding: 5,\n        paddingLeft: 10,\n    },\n    resultContainerStyle: {\n        flex: 1,\n        alignSelf: 'center',\n        justifyContent: 'center',\n        marginTop: BaseStyles.MarginPadding.small,\n        marginBottom: BaseStyles.MarginPadding.small,\n        minHeight: 50,\n        width: BaseStyles.ContentWidth.thin,\n        borderRadius: BaseStyles.BorderRadius.large,\n        borderWidth: 2,\n        borderColor: Colors.LightModeColors.greyButton,\n    }, \n});\n\nexport default class ChooseAppliance extends Component<ChooseApplianceProps,ChooseApplianceState> {\n\n    buttonProps: ThinButtonProps = {\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.large,\n            minHeight: 50,\n            maxWidth: 400,\n            width: BaseStyles.ContentWidth.max,\n        }, \n        buttonStyle: {\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 2,\n            borderColor: Colors.LightModeColors.greyButton,\n            height: 50,\n        },\n        buttonTextStyle: {\n            color: Colors.LightModeColors.greyButtonText, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'flex-start',\n            padding: 5,\n        },\n    }\n\n    constructor(props: Readonly<ChooseApplianceProps>) {\n        super(props);\n        this.state = initialState;\n        this.setSelectedAppliance = this.setSelectedAppliance.bind(this);\n    }\n\n    setSelectedAppliance(appliance: Appliance) {\n        const {parentCallBack} = this.props;\n        this.setState({selected: appliance.appName, clicked: true});\n        parentCallBack(appliance.applianceId);\n    }\n    \n    render() {\n        const {clicked, selected} = this.state;\n        const {appliances, applianceType} = this.props;\n\n        return clicked ? \n            <View style={styles.resultContainerStyle}>\n                <Text style={styles.selectedText}>{selected}</Text>\n            </View> :\n        (\n            <View>\n                <ThinButton \n                    key={categoryToString(applianceType)}\n                    name={`${categoryToString(applianceType)} (No Appliance)`}\n                    containerStyle={this.buttonProps.containerStyle}\n                    buttonStyle={this.buttonProps.buttonStyle}\n                    buttonTextStyle={this.buttonProps.buttonTextStyle}\n                    onClick={() => {\n                        const app : Appliance = {\n                            applianceId: '-1',\n                            appName: `General ${categoryToString(applianceType)} (No Appliance)`, \n                            modelNum: 0, \n                            serialNum: 0, \n                            category: ApplianceType.None, \n                            manufacturer: '', \n                            location: '',\n                        };\n                        this.setSelectedAppliance(app);\n                    }}\n                />\n                <Divider />\n                <ApplianceCategorizer onClick={this.setSelectedAppliance} appliances={appliances} buttonName='Select'/>\n            </View>\n\n        );\n    }\n}","import React, { Component } from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { Property, ApplianceType, NewServiceRequest, HomePairsDimensions, Appliance, ServiceProvider, AccountTypes } from 'homepairs-types';\nimport Colors from 'homepairs-colors';\nimport { StyleSheet, Text, View} from 'react-native';\nimport { stringToCategory, isEmptyOrSpaces, categoryToString, isPositiveWholeNumber, isPhoneNumberValid, isAlphaCharacterOnly } from 'src/utility';\nimport {NavigationRouteScreenProps} from 'homepairs-routes';\nimport {AddressPanel, InputForm, InputFormProps, ThinButton, ThinButtonProps, ServiceTypePanel, DatePicker} from 'homepairs-elements';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HelperText } from 'react-native-paper';\nimport axios from 'axios';\nimport { HOMEPAIRS_PROPERTY_ENDPOINT, postNewServiceRequest, HOMEPAIRS_PREFERRED_PROVIDER_ENDPOINT } from 'homepairs-endpoints';\nimport {ChooseServiceCategory, ChooseAppliance, ChooseServiceProvider} from './components';\n\ntype NewRequestState = {\n    address: string,\n    addressState: boolean,\n    propId: string,\n    serviceCategory: ApplianceType,\n    serviceCategoryState: boolean,\n    applianceId: string,\n    applianceState: boolean,\n    providerId: number,\n    providerState: boolean,\n    serviceType: string,\n    serviceTypeState: boolean,\n    details: string,\n    detailsState: boolean,\n    serviceDate: Date,\n    dateState: boolean,\n    poc: string, \n    pocState: boolean,\n    pocName: string,\n    pocNameState: boolean,\n    appliances: Appliance[],\n    errorMsg: string,\n    errorCheck: boolean,\n    serviceProviders: ServiceProvider[],\n};\n\nconst initialState: NewRequestState = {\n    address: '',\n    addressState: false,\n    propId: '',\n    serviceCategory: ApplianceType.None,\n    serviceCategoryState: false,\n    applianceId: '',\n    applianceState: false,\n    providerId: -1,\n    providerState: false,\n    serviceType: '',\n    serviceTypeState: false,\n    details: '',\n    detailsState: false,\n    serviceDate: null,\n    dateState: false,\n    poc: '', \n    pocState: false,\n    pocName: '',\n    pocNameState: false,\n    appliances: [],\n    errorMsg: '',\n    errorCheck: false,\n    serviceProviders: [],\n};\n\nconst styles = StyleSheet.create({\n    scrollContainer: {\n        padding: BaseStyles.MarginPadding.large,\n    },\n    formTitle: {\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.reg,\n        color: '#AFB3B5',\n        paddingVertical: BaseStyles.MarginPadding.large,\n    },\n    datePickerContainer: {\n        padding: BaseStyles.MarginPadding.medium,\n        backgroundColor: 'red',\n    },\n    iconImage: {\n        height: 20,\n        width: 20,\n    },\n    errorStyle: {\n        fontFamily: BaseStyles.FontTheme.secondary,\n        fontSize: 16,\n    },\n    option: {\n        fontSize : BaseStyles.FontTheme.reg,\n        fontFamily: BaseStyles.FontTheme.primary,\n    },\n    input: {\n        alignItems: 'center',\n        alignSelf: 'center',\n        margin: BaseStyles.MarginPadding.xsmallConst,\n        minWidth: 40,\n        width: BaseStyles.ContentWidth.max,\n        height: 40,\n        borderColor: BaseStyles.LightColorTheme.lightGray,\n        borderWidth: 1,\n        borderRadius: BaseStyles.BorderRadius.small,\n        paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n    },\n});\n\nexport type NewRequestScreenStateProps = {\n    accountType: AccountTypes,\n    properties: Property[],\n    token: string,\n    pmId: number,\n    phoneNumber: string,\n}\n\nexport type NewRequestScreenProps =\n    & NavigationRouteScreenProps\n    & NewRequestScreenStateProps\n\nexport class NewServiceRequestBase extends Component<NewRequestScreenProps, NewRequestState> {\n\n    addressRef;\n\n    serviceCategoryRef;\n\n    applianceIdRef;\n\n    serviceProviderRef;\n\n    serviceTypeRef;\n\n    descriptionRef;\n\n    serviceDateRef;\n\n    pocRef;\n\n    pocNameRef;\n\n    formProps : InputFormProps = {\n        inputStyle: {\n            alignItems: 'center',\n            alignSelf: 'center',\n            margin: 1,\n            minWidth: 40,\n            width: '100%',\n            height: 100,\n            borderColor: '#AFB3B5',\n            borderWidth: 1,\n            borderRadius: 4,\n            padding: 10,\n        },\n        numberOfLines: 3,\n        multiline: true,\n        maxLength: 500,\n    }\n\n    buttonProps: ThinButtonProps = {\n        name: 'Send Request',\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n        buttonStyle: {\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: Colors.LightModeColors.blueButton,\n        },\n        buttonTextStyle: {\n            color: Colors.LightModeColors.blueButtonText,\n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n    }\n\n    constructor(props: Readonly<NewRequestScreenProps>) {\n        super(props);\n\n        this.getFormAddress = this.getFormAddress.bind(this);\n        this.getFormCategory = this.getFormCategory.bind(this);\n        this.getFormAppliance = this.getFormAppliance.bind(this);\n        this.getFormServiceType = this.getFormServiceType.bind(this);\n        this.getFormServiceProvider = this.getFormServiceProvider.bind(this);\n        this.getFormDescription = this.getFormDescription.bind(this);\n        this.getFormDate = this.getFormDate.bind(this);\n        this.getPOC = this.getPOC.bind(this);\n        this.getPOCName = this.getPOCName.bind(this);\n        this.fetchAppliances = this.fetchAppliances.bind(this);\n        this.displayError = this.displayError.bind(this);\n        this.fetchServiceProviders = this.fetchServiceProviders.bind(this);\n\n        // Fix the address if only one address is included in the property. \n        this.state = (props.properties.length === 1) ? \n            {...initialState, address: props.properties[0].address, addressState: true, propId: props.properties[0].propId} \n            : \n            initialState;\n\n        this.addressRef = React.createRef();\n        this.serviceCategoryRef = React.createRef();\n        this.applianceIdRef = React.createRef();\n        this.serviceProviderRef = React.createRef();\n        this.serviceTypeRef = React.createRef();\n        this.descriptionRef = React.createRef();\n        this.serviceDateRef = React.createRef();\n        this.pocRef = React.createRef();\n        this.pocNameRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const {properties, accountType} = this.props;\n\n        if(accountType === AccountTypes.Tenant){\n            console.log(properties);\n            const [tenantProperty] = properties;\n            const {address, propId} = tenantProperty; \n            this.setState({address, addressState: true, propId});\n        }\n\n        this.fetchServiceProviders();\n    }\n\n    async getFormAddress(childData: string, propId: string) {\n        this.setState({ address: childData, propId, addressState: true });\n        await this.fetchAppliances(propId);\n    }\n\n    getFormCategory(childData: ApplianceType) {\n        this.setState({ serviceCategory: childData, serviceCategoryState: true });\n    }\n\n    getFormAppliance(childData: string) {\n        this.setState({ applianceId: childData, applianceState: true });\n    }\n\n    getFormServiceProvider(childData: number) {\n        this.setState({ providerId: childData, providerState: true });\n    }\n\n    getFormServiceType(childData: string) {\n        this.setState({ serviceType: childData, serviceTypeState: true });\n    }\n\n    getFormDescription(childData: string) {\n        this.setState({ details: childData, detailsState: true });\n    }\n\n    getFormDate(childData: Date) {\n        this.setState({ serviceDate: childData, dateState: true });\n    }\n\n    getPOC(childData: string) {\n        this.setState({poc: childData, pocState: true});\n    }\n\n    getPOCName(childData: string) {\n        this.setState({pocName: childData, pocNameState: true});\n    }\n\n    fetchAppliances = async (propId: string) => {\n        if (propId !== '') {\n            await axios.get(`${HOMEPAIRS_PROPERTY_ENDPOINT}${propId}`).then((result) => {\n                const { appliances } = result.data;\n                const applianceInfo: Appliance[] = [];\n                appliances.forEach(appliance => {\n                    const { appId, category, name, manufacturer, modelNum, serialNum, location } = appliance;\n\n                    applianceInfo.push({\n                        applianceId: appId,\n                        category: stringToCategory(category),\n                        appName: name, manufacturer, modelNum, serialNum, location,\n                    });\n                });\n                this.setState({ appliances: applianceInfo });\n            });\n        }\n    };\n\n    fetchServiceProviders = async () => {\n        const {pmId} = this.props;\n        await axios.get(`${HOMEPAIRS_PREFERRED_PROVIDER_ENDPOINT}${pmId}/`).then((result) =>{\n            const {providers} = result.data;\n            const providerInfo: ServiceProvider[] = [];\n            providers.forEach(provider => {\n                const { provId, prefId, name, email, phoneNum, contractLic, skills, founded, rate, timesHired, earliestHire, logo, address } = provider;\n                providerInfo.push({provId, prefId, name, email, phoneNum, contractLic, skills, founded, payRate: rate, timesHired, earliestHire, logo, address});\n            });\n            this.setState({serviceProviders: providerInfo});\n        });  \n    };\n\n    displayError(msg: string) {\n        this.setState({ errorMsg: msg, errorCheck: true });\n    }\n\n    async clickSubmitButton() {\n        const { serviceCategory, applianceId, providerId, serviceType, details, serviceDate, propId, poc, pocName} = this.state;\n        const {navigation, token, accountType, phoneNumber} = this.props;\n        this.setState({errorCheck: false});\n        if (this.validateForms()) {\n            const pm = accountType === AccountTypes.PropertyManager;\n            const newServiceRequest: NewServiceRequest = {\n                token,\n                propId,\n                appId: applianceId,\n                providerId,\n                serviceType,\n                serviceCategory: categoryToString(serviceCategory),\n                serviceDate: serviceDate.toISOString(),\n                details,\n                poc, \n                pocName,\n                phoneNumber,\n            };\n            await postNewServiceRequest(newServiceRequest, this.displayError, navigation, pm).catch(error => console.log(error));\n        }\n    }\n\n    validateForms() {\n        const {address, serviceCategory, applianceId, providerId, serviceType, serviceDate, poc, pocName} = this.state;\n        let check = true;\n        if (isEmptyOrSpaces(address))\n            check = false;\n        if (serviceCategory === ApplianceType.None)\n            check = false;\n        if (isEmptyOrSpaces(applianceId))\n            check = false;\n        if (serviceDate === null)\n            check = false;\n        if (isEmptyOrSpaces(serviceType))\n            check = false;\n        if (!isPositiveWholeNumber(providerId.toString()))\n            check = false;\n        if(!isPhoneNumberValid(poc)) {\n            this.pocRef.current.setError(true);\n            check = false;\n        }\n        if (!isAlphaCharacterOnly(pocName)) {\n            this.pocNameRef.current.setError(true);\n            check = false;\n        }\n        return check;\n    }\n\n    renderError() {\n        const { errorMsg, errorCheck } = this.state;\n        return <View style={{ alignSelf: 'center' }}>\n            <HelperText type='error' visible={errorCheck} style={styles.errorStyle}>{errorMsg}</HelperText>\n        </View>;\n    }\n\n    render() {\n        const {properties, accountType} = this.props;\n        const {\n            addressState,\n            serviceCategoryState,\n            applianceState,\n            providerState,\n            serviceTypeState,\n            detailsState,\n            dateState,\n            appliances,\n            serviceCategory,\n            serviceProviders,\n            serviceDate,\n            pocState, \n            pocNameState,\n        } = this.state;\n        // TODO: Write Address Screen If only one property exists\n        return (\n            <View style={styles.scrollContainer}>\n                <Text style={styles.formTitle}>ADDRESS</Text>\n                {properties.length === 1 || accountType === AccountTypes.Tenant ? \n                    <View style={{alignSelf: 'center', width: BaseStyles.ContentWidth.reg}}>\n                        <Text style={styles.option}>{properties[0].address}</Text> \n                    </View>\n                    :\n                    <AddressPanel properties={properties} parentCallBack={this.getFormAddress}/> \n                }\n                {addressState ? \n                    <>\n                        <Text style={styles.formTitle}>SERVICE CATEGORY</Text>\n                        <ChooseServiceCategory onPress={this.getFormCategory} />\n                    </> : <></>\n                }\n                {serviceCategoryState ?\n                    <>\n                        <Text style={styles.formTitle}>APPLIANCE (IF APPLICABLE)</Text>\n                        <ChooseAppliance parentCallBack={this.getFormAppliance} applianceType={serviceCategory} appliances={appliances} />\n                    </> : <></>\n                }\n                {applianceState ?\n                    <>\n                        <Text style={styles.formTitle}>SERVICE PROVIDER</Text>\n                        <ChooseServiceProvider serviceProviders={serviceProviders} parentCallBack={this.getFormServiceProvider} />\n                    </> : <></>\n\n\n                }\n                {providerState ?\n                    <>\n                        <Text style={styles.formTitle}>SERVICE TYPE</Text>\n                        <ServiceTypePanel parentCallBack={this.getFormServiceType} />\n                    </> : <></>\n\n                }\n                {serviceTypeState ?\n                    <>\n                        <View style={{ marginBottom: '-7.5%' }}>\n                            <Text style={styles.formTitle}>WHAT HAPPENED?</Text>\n                            <InputForm\n                                parentCallBack={this.getFormDescription}\n                                numberOfLines={this.formProps.numberOfLines}\n                                inputStyle={this.formProps.inputStyle}\n                                multiline={this.formProps.multiline}\n                                maxLength={this.formProps.maxLength}\n                            />\n                        </View>\n                    </> : <></>\n                }\n                {detailsState ?\n                    <>\n                        <Text style={styles.formTitle}>WHEN DO YOU WANT IT TO BE FIXED?</Text>\n                        <DatePicker serviceDate={serviceDate} getFormDate={this.getFormDate}/> \n                        \n                    </> : <></>\n                }\n                {dateState ? \n                <>\n                    <Text style={styles.formTitle}>WHO SHOULD THEY ASK FOR?</Text>\n                    <InputForm \n                        ref={this.pocNameRef}\n                        parentCallBack={this.getPOCName}\n                        inputStyle={styles.input}\n                        errorMessage=\"Name cannot be empty\"\n                    />\n                </> : <></>}\n                {pocNameState ? \n                <>\n                    <Text style={styles.formTitle}>WHAT&apos;S THEIR PHONE NUMBER?</Text>\n                    <InputForm \n                        ref={this.pocRef}\n                        parentCallBack={this.getPOC}\n                        inputStyle={styles.input}\n                        errorMessage=\"Must be valid, non-empty phone number\"\n                    />\n                </> : <></>}\n                {pocState ? \n                <>\n                    {this.renderError()}\n                    <ThinButton \n                        name={this.buttonProps.name}\n                        onClick={async () => {await this.clickSubmitButton();}}\n                        containerStyle={this.buttonProps.containerStyle}\n                        buttonStyle={this.buttonProps.buttonStyle}\n                        buttonTextStyle={this.buttonProps.buttonTextStyle}\n                    />\n                </> : <></>}\n            </View>\n        );\n    }\n}","import React from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet,\n    TouchableOpacity,\n} from 'react-native';\nimport { ServiceRequestButton, ServiceRequestAddressPanel, SearchForm } from 'src/elements';\nimport {\n    ServiceRequest,\n    ServiceState,\n    HeaderState,\n    ServiceRequestStatus,\n    ServiceRequestCompletionStatus,\n    ServiceRequestStatusEnums,\n    Property,\n    MainAppStackType,\n    AccountTypes,\n    Contact,\n    HomePairsDimensions,\n} from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport strings from 'homepairs-strings';\nimport { NavigationRouteScreenProps, navigationPages, MainAppStack } from 'src/routes';\nimport { fetchServiceRequests } from 'homepairs-endpoints';\nimport { stringToCategory } from 'src/utility';\nimport { SceneInjectedProps } from '../../components';\n\n\nexport type ServiceRequestScreenStateProps = {\n    pmInfo?: Contact;\n    serviceRequestsState: ServiceState;\n    header: HeaderState;\n    properties: Property[];\n    accountType: AccountTypes;\n};\n\nexport type ServiceRequestsScreenDispatchProps = {\n    onUpdateHeader: (selected: MainAppStackType) => any;\n};\n\ntype ServiceRequestRadioState = {\n    currentRequestsSelected: boolean,\n    requestSelected: ServiceRequestStatus,\n    waitingApproval: number,\n    pending: number;\n    scheduled: number;\n    inProgress: number;\n    completed: number;\n    canceled: number;\n    declined: number;\n}\n\ntype ServiceRequestState = ServiceRequestRadioState & {\n    serviceRequests: ServiceRequest[],\n    originalList: ServiceRequest[],\n}\n\nexport type ServiceRequestRadioProps = {\n    parentCallBack?: (childData: ServiceRequestCompletionStatus) => any;\n    parentCallBack2?: (childData2: ServiceRequestStatus) => any;\n}\n\nexport type ServiceRequestScreenProps = NavigationRouteScreenProps &\n    SceneInjectedProps &\n    ServiceRequestScreenStateProps &\n    ServiceRequestsScreenDispatchProps &\n    ServiceRequestRadioProps\n\nconst colors = BaseStyles.LightColorTheme;\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingRight: BaseStyles.MarginPadding.xxlargConst,\n        marginBottom: BaseStyles.MarginPadding.small,\n    },\n    pallet: {\n        backgroundColor: colors.secondary,\n        width: BaseStyles.ContentWidth.max,\n        flex: 1,\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        alignSelf: 'center',\n    },\n    addBottomMargin: {\n        flex: 1,\n        marginBottom: BaseStyles.MarginPadding.largeConst,\n    },\n    buttonContainer: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        padding: BaseStyles.MarginPadding.mediumConst,\n        width: BaseStyles.ContentWidth.reg,\n    },\n    titleContainer: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        marginTop: BaseStyles.MarginPadding.large,\n        width: BaseStyles.ContentWidth.max,\n    },\n    title: {\n        fontFamily: BaseStyles.FontTheme.primary,\n        color: colors.lightGray,\n    },\n    currentArchivedButtonText: {\n        color: colors.darkGray,\n        fontSize: BaseStyles.FontTheme.reg,\n        textDecorationLine: 'underline',\n        alignSelf: 'center',\n    },\n    currentButtonStyle: {\n        justifyContent: 'center',\n        backgroundColor: colors.transparent,\n        width: BaseStyles.ContentWidth.half,\n        borderColor: colors.darkGray,\n        height: 40,\n    },\n    archivedButtonStyle: {\n        justifyContent: 'center',\n        backgroundColor: colors.transparent,\n        width: BaseStyles.ContentWidth.half,\n        borderColor: colors.darkGray,\n        height: 40,\n    },\n    selectedLeftThirdButton: {\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.primary,\n        height: 30,\n    },\n    selectedMiddleThirdButton: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.primary,\n        height: 30,\n        marginHorizontal: BaseStyles.MarginPadding.statusButton,\n    },\n    selectedRightThirdButton: {\n        alignItems: 'flex-end',\n        justifyContent: 'center',\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.primary,\n        height: 30,\n    },\n    selectedText: {\n        color: colors.shadow,\n        fontSize: BaseStyles.FontTheme.small,\n        fontFamily: BaseStyles.FontTheme.secondary,\n        alignSelf: 'center',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    unselectedLeftThirdButton: {\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        backgroundColor: colors.transparent,\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.lightGray,\n        height: 30,\n    },\n    unselectedMiddleThirdButton: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: colors.transparent,\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.lightGray,\n        height: 30,\n        marginHorizontal: BaseStyles.MarginPadding.statusButton,\n    },\n    unselectedRightThirdButton: {\n        alignItems: 'flex-end',\n        justifyContent: 'center',\n        backgroundColor: colors.transparent,\n        width: BaseStyles.ContentWidth.almostThird,\n        borderBottomWidth: 1,\n        borderColor: colors.lightGray,\n        height: 30,\n    },\n    unselectedText: {\n        color: colors.darkGray,\n        fontSize: BaseStyles.FontTheme.small - 1,\n        alignSelf: 'center',\n    },\n    underline: {\n        borderBottomWidth: 2,\n    },\n    formTitle: {\n        alignSelf: 'center',\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.xsmal,\n        color: '#AFB3B5',\n        paddingTop: BaseStyles.MarginPadding.statusTitle,\n        paddingBottom: BaseStyles.MarginPadding.xsmall,\n    },\n});\n\nconst serviceRequestStrings = strings.serviceRequestPage;\n\nconst initialRadioState: ServiceRequestState = {\n    currentRequestsSelected: true,\n    requestSelected: ServiceRequestStatusEnums.Pending,\n    serviceRequests: [],\n    waitingApproval: 0,\n    pending: 0,\n    scheduled: 0,\n    inProgress: 0,\n    completed: 0,\n    canceled: 0,\n    declined: 0,\n};\n\nfunction filterTabbedObjects(unfilteredServiceRequests: ServiceRequest[], requestStatus: ServiceRequestStatus) {\n    const filteredServiceRequests: ServiceRequest[] = unfilteredServiceRequests.filter(sr => sr.status === requestStatus);\n    return filteredServiceRequests;\n}\n\n/**\n * ---------------------------------------------------\n * Service Request Screen Base\n * ---------------------------------------------------\n */\n\nexport class ServiceRequestScreenBase extends React.Component<ServiceRequestScreenProps, ServiceRequestState>{\n\n    currentServiceRequests;\n\n    // eslint-disable-next-line react/static-property-placement\n    static defaultProps: ServiceRequestRadioProps = {\n        parentCallBack: (childData: ServiceRequestCompletionStatus) => { return childData; },\n        parentCallBack2: (childData2: ServiceRequestStatus) => { return childData2; },\n    };\n\n    constructor(props: Readonly<ServiceRequestScreenProps>) {\n        super(props);\n        this.state = initialRadioState;\n\n        this.onPressInactiveRequests = this.onPressInactiveRequests.bind(this);\n        this.onPressActiveRequests = this.onPressActiveRequests.bind(this);\n        this.onPressPendingRequests = this.onPressPendingRequests.bind(this);\n        this.onPressScheduledRequests = this.onPressScheduledRequests.bind(this);\n        this.onPressInProgressRequests = this.onPressInProgressRequests.bind(this);\n        this.onPressCompletedRequests = this.onPressCompletedRequests.bind(this);\n        this.onPressCanceledRequests = this.onPressCanceledRequests.bind(this);\n        this.onPressDeclinedRequests = this.onPressDeclinedRequests.bind(this);\n        this.openServiceRequestModal = this.openServiceRequestModal.bind(this);\n        this.callFetchServiceRequests = this.callFetchServiceRequests.bind(this);\n        this.populateServiceRequests = this.populateServiceRequests.bind(this);\n        this.countServiceRequestStatus = this.countServiceRequestStatus.bind(this);\n        this.renderCompletionStatusRadioButton = this.renderCompletionStatusRadioButton.bind(this);\n        this.renderActiveStatusRadioButton = this.renderActiveStatusRadioButton.bind(this);\n        this.renderInactiveStatusRadioButton = this.renderInactiveStatusRadioButton.bind(this);\n        this.renderServiceRequests = this.renderServiceRequests.bind(this);\n        this.renderFilteredServiceRequests = this.renderFilteredServiceRequests.bind(this);\n        this.renderFilteredServiceRequestsWaitingApproval = this.renderFilteredServiceRequestsWaitingApproval.bind(this);\n        this.renderFilteredServiceRequestsSubtitles = this.renderFilteredServiceRequestsSubtitles.bind(this);\n        this.render = this.render.bind(this);\n        this.callFetchServiceRequests = this.callFetchServiceRequests.bind(this);\n        this.populateServiceRequests = this.populateServiceRequests.bind(this);\n        this.countServiceRequestStatus = this.countServiceRequestStatus.bind(this);\n\n        props.parentCallBack(ServiceRequestCompletionStatus.Current);\n        props.parentCallBack2(ServiceRequestStatusEnums.Pending);\n\n    }\n\n    async componentDidMount() {\n        const { onUpdateHeader, accountType, properties } = this.props;\n\n        // Fetch the service requests if the account Type is a Tenant or if the Account only has one property \n        if (accountType === AccountTypes.Tenant || properties.length === 1) {\n            await this.callFetchServiceRequests(properties[0].propId);\n        }\n\n        // When the component is mounted, update the header. This component can be navigated from a different stack so \n        // we need to make sure the header remains updated in the case this happens\n        onUpdateHeader(MainAppStack[1]);\n    }\n\n    componentWillUnmount() {\n        this.setState({\n            serviceRequests: [],\n            originalList: [],\n        });\n    }\n\n    onPressInactiveRequests() {\n        const { parentCallBack, parentCallBack2 } = this.props;\n        this.setState({ currentRequestsSelected: false });\n        parentCallBack(ServiceRequestCompletionStatus.Archived);\n        this.setState({ requestSelected: ServiceRequestStatusEnums.Completed });\n        parentCallBack2(ServiceRequestStatusEnums.Completed);\n    }\n\n    onPressActiveRequests() {\n        const { parentCallBack, parentCallBack2 } = this.props;\n        this.setState({ currentRequestsSelected: true });\n        parentCallBack(ServiceRequestCompletionStatus.Current);\n        this.setState({ requestSelected: ServiceRequestStatusEnums.Pending });\n        parentCallBack2(ServiceRequestStatusEnums.Pending);\n    }\n\n    onPressPendingRequests() {\n        const { parentCallBack2 } = this.props;\n        this.setState({ requestSelected: ServiceRequestStatusEnums.Pending });\n        parentCallBack2(ServiceRequestStatusEnums.Pending);\n    }\n\n    onPressScheduledRequests() {\n        const { parentCallBack2 } = this.props;\n        this.setState({ requestSelected: ServiceRequestStatusEnums.Scheduled });\n        parentCallBack2(ServiceRequestStatusEnums.Scheduled);\n    }\n\n    onPressInProgressRequests() {\n        const { parentCallBack2 } = this.props;\n        this.setState({ requestSelected: ServiceRequestStatusEnums.InProgress });\n        parentCallBack2(ServiceRequestStatusEnums.InProgress);\n    }\n\n    onPressCompletedRequests() {\n        const { parentCallBack2 } = this.props;\n        this.setState({ requestSelected: ServiceRequestStatusEnums.Completed });\n        parentCallBack2(ServiceRequestStatusEnums.Completed);\n    }\n\n    onPressCanceledRequests() {\n        const { parentCallBack2 } = this.props;\n        this.setState({ requestSelected: ServiceRequestStatusEnums.Canceled });\n        parentCallBack2(ServiceRequestStatusEnums.Canceled);\n    }\n\n    onPressDeclinedRequests() {\n        const { parentCallBack2 } = this.props;\n        this.setState({ requestSelected: ServiceRequestStatusEnums.Declined });\n        parentCallBack2(ServiceRequestStatusEnums.Declined);\n    }\n\n    openServiceRequestModal(serviceRequest: ServiceRequest) {\n        const { navigation } = this.props;\n        navigation.navigate(navigationPages.ServiceRequestModal, { serviceRequest }, true);\n    }\n\n    async callFetchServiceRequests(propId: string) {\n        await fetchServiceRequests(propId).then(response => {\n            const { data } = response;\n            const { reqs } = data;\n\n            this.populateServiceRequests(reqs);\n            const { serviceRequests } = this.state;\n            this.countServiceRequestStatus(serviceRequests);\n\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    populateServiceRequests(reqs) {\n        const serviceRequests: ServiceRequest[] = [];\n        // explicitly set initial state- guarantees that the state gets updated even if given property has no requests\n        this.setState({ serviceRequests: [] });\n\n        reqs.forEach(req => {\n            const { appFixed, location, serviceDate, status, serviceCompany, details, id } = req;\n            const appliance = {\n                applianceId: appFixed.appId,\n                category: appFixed.category && stringToCategory(appFixed.category),\n                appName: appFixed.name,\n                manufacturer: appFixed.manufacturer,\n                modelNum: appFixed.modelNum,\n                serialNum: appFixed.serialNum,\n                location: appFixed.location,\n            };\n            const serviceRequest: ServiceRequest = {\n                reqId: id,\n                address: location,\n                startDate: serviceDate,\n                companyName: serviceCompany,\n                details,\n                appliance,\n                status: ServiceRequestStatusEnums[status],\n            };\n            serviceRequests.push(serviceRequest);\n        });\n\n        this.setState({ serviceRequests: serviceRequests, originalList: serviceRequests });\n    }\n\n    countServiceRequestStatus(serviceRequests:ServiceRequests[]) {\n        let waitingApproval: number = 0;\n        let pending: number = 0;\n        let scheduled: number = 0;\n        let inProgress: number = 0;\n        let completed: number = 0;\n        let canceled: number = 0;\n        let declined: number = 0;\n\n        // explicitly set initial state- guarantees that the state gets updated even if given property has no requests\n        this.setState({ waitingApproval: 0, pending: 0, scheduled: 0, inProgress: 0, completed: 0, canceled: 0, declined: 0 });\n\n        serviceRequests.forEach(sr => {\n            const { status } = sr;\n            switch (ServiceRequestStatusEnums[status]) {\n                case ServiceRequestStatusEnums.WaitingApproval:\n                    waitingApproval += 1;\n                    break;\n                case ServiceRequestStatusEnums.Pending:\n                    pending += 1;\n                    break;\n                case ServiceRequestStatusEnums.InProgress:\n                    inProgress += 1;\n                    break;\n                case ServiceRequestStatusEnums.Scheduled:\n                    scheduled += 1;\n                    break;\n                case ServiceRequestStatusEnums.Completed:\n                    completed += 1;\n                    break;\n                case ServiceRequestStatusEnums.Canceled:\n                    canceled += 1;\n                    break;\n                case ServiceRequestStatusEnums.Declined:\n                    declined += 1;\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        this.setState({ waitingApproval, pending, scheduled, inProgress, completed, canceled, declined });\n    }\n\n    renderCompletionStatusRadioButton(currentRequestsSelected: boolean) {\n        return (\n            currentRequestsSelected ?\n                <>\n                    <View style={{ alignItems: 'center' }}>\n                        <TouchableOpacity\n                            testID='service-radio-completed'\n                            style={styles.archivedButtonStyle}\n                            onPress={this.onPressInactiveRequests}>\n                            <Text style={styles.currentArchivedButtonText}>\n                                {serviceRequestStrings.tabB}\n\n                            </Text>\n                        </TouchableOpacity>\n                    </View>\n                </>\n                :\n                <>\n                    <View style={{ alignItems: 'center' }}>\n                        <TouchableOpacity\n                            testID='service-radio-current'\n                            style={styles.currentButtonStyle}\n                            onPress={this.onPressActiveRequests}>\n                            <Text style={styles.currentArchivedButtonText}>\n                                {serviceRequestStrings.tabA}\n                            </Text>\n                        </TouchableOpacity>\n                    </View>\n                </>\n        );\n    }\n\n    renderActiveStatusRadioButton(requestsSelected: ServiceRequestStatus) {\n        const leftThirdButtonStyle = (requestsSelected === ServiceRequestStatusEnums.Pending) ? styles.selectedLeftThirdButton : styles.unselectedLeftThirdButton;\n        const middleThirdButtonStyle = (requestsSelected === ServiceRequestStatusEnums.Scheduled) ? styles.selectedMiddleThirdButton : styles.unselectedMiddleThirdButton;\n        const rightThirdButtonStyle = (requestsSelected === ServiceRequestStatusEnums.InProgress) ? styles.selectedRightThirdButton : styles.unselectedRightThirdButton;\n        const { waitingApproval, pending, scheduled, inProgress } = this.state;\n\n        return (\n            <>\n                <View style={styles.buttonContainer}>\n                    <TouchableOpacity\n                        testID='service-radio-pending'\n                        style={leftThirdButtonStyle}\n                        onPress={this.onPressPendingRequests}>\n                        <Text style={(requestsSelected === ServiceRequestStatusEnums.Pending) ?\n                            styles.selectedText : styles.unselectedText}>\n                            {`${serviceRequestStrings.tabA1}(${waitingApproval + pending})`}\n                        </Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        testID='service-radio-scheduled'\n                        style={middleThirdButtonStyle}\n                        onPress={this.onPressScheduledRequests}>\n                        <Text style={(requestsSelected === ServiceRequestStatusEnums.Scheduled) ?\n                            styles.selectedText : styles.unselectedText}>\n                            {`${serviceRequestStrings.tabA2}(${scheduled})`}\n                        </Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        testID='service-radio-inprogress'\n                        style={rightThirdButtonStyle}\n                        onPress={this.onPressInProgressRequests}>\n                        <Text style={(requestsSelected === ServiceRequestStatusEnums.InProgress) ?\n                            styles.selectedText : styles.unselectedText}>\n                            {`${serviceRequestStrings.tabA3}(${inProgress})`}\n\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n            </>\n        );\n    }\n\n    renderInactiveStatusRadioButton(requestsSelected: ServiceRequestStatus) {\n        const leftThirdButtonStyle = (requestsSelected === ServiceRequestStatusEnums.Completed) ? styles.selectedLeftThirdButton : styles.unselectedLeftThirdButton;\n        const middleThirdButtonStyle = (requestsSelected === ServiceRequestStatusEnums.Canceled) ? styles.selectedMiddleThirdButton : styles.unselectedMiddleThirdButton;\n        const rightThirdButtonStyle = (requestsSelected === ServiceRequestStatusEnums.Declined) ? styles.selectedRightThirdButton : styles.unselectedRightThirdButton;\n        const { completed, canceled, declined } = this.state;\n\n        return (\n            <>\n                <View style={styles.buttonContainer}>\n                    <TouchableOpacity\n                        testID='service-radio-completed'\n                        style={leftThirdButtonStyle}\n                        onPress={this.onPressCompletedRequests}>\n                        <Text style={(requestsSelected === ServiceRequestStatusEnums.Completed) ?\n                            styles.selectedText : styles.unselectedText}>\n                            {`${serviceRequestStrings.tabB1}(${completed})`}\n                        </Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        testID='service-radio-canceled'\n                        style={middleThirdButtonStyle}\n                        onPress={this.onPressCanceledRequests}>\n                        <Text style={(requestsSelected === ServiceRequestStatusEnums.Canceled) ?\n                            styles.selectedText : styles.unselectedText}>\n                            {`${serviceRequestStrings.tabB2}(${canceled})`}\n\n                        </Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        testID='service-radio-declined'\n                        style={rightThirdButtonStyle}\n                        onPress={this.onPressDeclinedRequests}>\n                        <Text style={(requestsSelected === ServiceRequestStatusEnums.Declined) ?\n                            styles.selectedText : styles.unselectedText}>\n                            {`${serviceRequestStrings.tabB3}(${declined})`}\n\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n            </>\n        );\n    }\n\n    renderServiceRequests() {\n        const { properties, accountType } = this.props;\n        const { currentRequestsSelected, requestSelected, serviceRequests, originalList } = this.state;\n\n        console.log(\"original list: \");\n        console.log({ originalList });\n        console.log(\"updated list: \");\n        console.log({ serviceRequests });\n\n        return (\n            <View>\n                {\n                    accountType === AccountTypes.Tenant ?\n                        <></> :\n                        <View style={{ marginTop: 30, width: BaseStyles.ContentWidth.reg, alignSelf: 'center', paddingHorizontal: 3 } /* Styled to be the same width as the SearchForm */}>\n                            <ServiceRequestAddressPanel properties={properties} parentCallBack={async (propId: string) => { await this.callFetchServiceRequests(propId); }} />\n                        </View>\n                }\n                <View style={{ width: BaseStyles.ContentWidth.reg, alignSelf: 'center', marginTop: 10, height: 50 } /* TODO: Update these styles so it renders properly on all devices */}>\n                    <SearchForm<ServiceRequest>\n                        objects={originalList}\n                        parentCallBack={(filtered: ServiceRequest[]) => { this.setState({ serviceRequests: filtered }); this.countServiceRequestStatus(filtered); } /* TODO: Insert Your Service Requests Set State Function Here!!! */}\n                        placeholder=\"Search requests...\"\n                        trim />\n                    {/** TODO: Add Panel Here. */}\n                </View>\n                {this.renderCompletionStatusRadioButton(currentRequestsSelected)}\n                <View style={{ width: '100%', alignSelf: 'center', justifyContent: 'center', alignItems: 'center', paddingTop: BaseStyles.MarginPadding.medium }}>\n                    {currentRequestsSelected ? this.renderActive(requestSelected) : this.renderInactive(requestSelected)}\n                </View>\n                <View style={{ justifyContent: 'center' }}>\n                    {this.renderFilteredServiceRequests()}\n                </View>\n            </View>\n        );\n    }\n\n    renderActive(requestSelected: ServiceRequestStatus) {\n        return (<>{this.renderActiveStatusRadioButton(requestSelected)}</>);\n    }\n\n    renderInactive(requestSelected: ServiceRequestStatus) {\n        return (<>{this.renderInactiveStatusRadioButton(requestSelected)}</>);\n    }\n\n    renderFilteredServiceRequests() {\n        const { requestSelected, serviceRequests } = this.state;\n        const filteredServiceRequests: ServiceRequest[] = filterTabbedObjects(serviceRequests, requestSelected);\n\n        return (\n            <>\n                {this.renderFilteredServiceRequestsWaitingApproval()}\n                <>\n                    {this.renderFilteredServiceRequestsSubtitles()}\n                    {filteredServiceRequests.map(\n                        serviceRequest => {\n                            const { appliance } = serviceRequest;\n                            const { applianceId } = appliance;\n                            const active = serviceRequest.status === \"Pending\" || serviceRequest.status === \"Scheduled\" || serviceRequest.status === \"InProgress\";\n                            return (<ServiceRequestButton key={applianceId} onClick={this.openServiceRequestModal} serviceRequest={serviceRequest} active={active} />);\n                        })}\n                </>\n            </>\n        );\n    }\n\n    renderFilteredServiceRequestsWaitingApproval() {\n        const { requestSelected, serviceRequests, waitingApproval } = this.state;\n\n        return (\n            <>\n                {requestSelected === ServiceRequestStatusEnums.Pending && waitingApproval > 0\n                    ? <>\n                        <Text style={styles.formTitle}>WAITING APPROVAL</Text>\n                        {filterTabbedObjects(serviceRequests, ServiceRequestStatusEnums.WaitingApproval).map(\n                            serviceRequest => {\n                                const { appliance } = serviceRequest;\n                                const { applianceId } = appliance;\n                                return (<ServiceRequestButton key={applianceId} onClick={this.openServiceRequestModal} serviceRequest={serviceRequest} />);\n                            })}\n                    </>\n                    : <></>}\n            </>\n        );\n    }\n\n    renderFilteredServiceRequestsSubtitles() {\n        const { requestSelected, pending, scheduled, inProgress, completed, canceled, declined } = this.state;\n        let printActive: boolean = false;\n        let printInactive: boolean = false;\n\n        switch (ServiceRequestStatusEnums[requestSelected]) {\n            case ServiceRequestStatusEnums.Pending:\n                if (pending > 0) { printActive = true; }\n                break;\n            case ServiceRequestStatusEnums.Scheduled:\n                if (scheduled > 0) { printActive = true; }\n                break;\n            case ServiceRequestStatusEnums.InProgress:\n                if (inProgress > 0) { printActive = true; }\n                break;\n            case ServiceRequestStatusEnums.Completed:\n                if (completed > 0) { printInactive = true; }\n                break;\n            case ServiceRequestStatusEnums.Canceled:\n                if (canceled > 0) { printInactive = true; }\n                break;\n            case ServiceRequestStatusEnums.Declined:\n                if (declined > 0) { printInactive = true; }\n                break;\n            default:\n                break;\n        }\n        if (printActive) {\n            return (<>< Text style={styles.formTitle} >ACTIVE</Text></>);\n        }\n\n        if (printInactive) {\n            return (<><Text style={styles.formTitle}>INACTIVE</Text></>);\n        }\n\n        return (<></>);\n    }\n\n\n    render() {\n        return (\n            <View style={styles.addBottomMargin}>\n                {this.renderServiceRequests()}\n            </View>\n        );\n    }\n}","import { AppState, PropertyManagerAccount, TenantAccount } from 'homepairs-types';\nimport { connect } from 'react-redux';\nimport { convertObjectValuesToArray } from 'src/utility';\nimport { NewServiceRequestBase, NewRequestScreenStateProps } from './NewRequestScreenBase';\n\nfunction mapStateToProps(state: AppState) : NewRequestScreenStateProps {\n    const properties = convertObjectValuesToArray(state.properties.properties);\n    return {\n        accountType: state.accountProfile.accountType,\n        properties,\n        token: (state.accountProfile as (PropertyManagerAccount)).roopairsToken,\n        pmId: (state.accountProfile as (PropertyManagerAccount)).pmId,\n        phoneNumber: (state.accountProfile as (TenantAccount)).phoneNumber,\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n)(NewServiceRequestBase);\n\n","\nimport { ServiceRequestScreen } from './ServiceRequestScreen';\nimport { NewRequestScreen } from './NewRequest';\n\n/**\n * ---------------------------------------------------\n * ServiceRequestScreen\n * ---------------------------------------------------\n * This is intended to be used in the Main Navigation Stack. This component is connected to the \n * HomePairs redux store, the react-native Navigator, and our very own withSceneHeader HOC. It also \n * can be injected with a Modal; this gives this component the capability to reveal a smaller page \n * that allows the user to add a new service request to their account. \n */\nexport const ServiceRequestPage = ServiceRequestScreen;\nexport const NewRequestPage = NewRequestScreen;\n","import { AppState, MainAppStackType } from 'homepairs-types';\nimport { connect } from 'react-redux';\nimport { updateSelectedPage } from 'homepairs-redux-actions';\nimport { convertObjectValuesToArray } from 'src/utility';\nimport {\n    ServiceRequestScreenBase,\n    ServiceRequestScreenStateProps,\n    ServiceRequestsScreenDispatchProps,\n} from './ServiceRequestScreenBase';\n\nfunction mapStateToProps(state: AppState): ServiceRequestScreenStateProps {\n    const {header, serviceRequests, properties, accountProfile} = state;\n    return {\n        pmInfo: properties.propertyManager,\n        accountType: accountProfile.accountType,\n        serviceRequestsState: serviceRequests,\n        header,\n        properties: convertObjectValuesToArray(properties.properties),\n    };\n}\n\nfunction mapDispatchToProps(dispatch:any): ServiceRequestsScreenDispatchProps {\n    return {\n        onUpdateHeader: (selected: MainAppStackType) => {\n            dispatch(updateSelectedPage(selected));\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ServiceRequestScreenBase);\n","import React from 'react'; //* *For every file that uses jsx, YOU MUST IMPORT REACT  */\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { isNullOrUndefined } from 'src/utility';\nimport { ThinButton } from 'src/elements';\n\nexport type SceneHeaderProps = {\n    /**\n     * String that will be rendered at the top of the page \n     */\n    title: String;\n\n    /**\n     * Name of the button at the right side of the header \n     */\n    buttonTitle?: String;\n\n    /**\n     * Callback function for the button rendered\n     */\n    onButtonPress?: (arg0?: any) => any;\n};\n\nconst colorTheme = BaseStyles.LightColorTheme;\nconst styles = StyleSheet.create({\n    container: {\n        marginHorizontal: 15,\n        alignSelf: 'center',\n        marginTop: 20,\n        width: BaseStyles.ContentWidth.reg,\n        borderBottomWidth: 1,\n        borderBottomColor: colorTheme.veryLightGray,\n        paddingBottom: 4,\n        flexDirection: 'row',\n    },\n    pageTitle: {\n        marginLeft: BaseStyles.MarginPadding.small,\n        fontSize: 32,\n        maxWidth: 450,\n        color: colorTheme.tertiary,\n        fontFamily: BaseStyles.FontTheme.primary,\n        flex: 2,\n    },\n    thinButtonContainer: {\n        flex: 1.2,\n        justifyContent: 'center',\n        paddingHorizontal: 10,\n        height: 50,\n        width: 150,\n        alignSelf: 'flex-end',\n    },\n    thinButton: {\n        alignItems: 'center',\n        backgroundColor: colorTheme.transparent,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: colorTheme.primary,\n        height: 30,\n        justifyContent: 'center',\n    },\n    thinButtonText: {\n        color: colorTheme.primary,\n        fontSize: BaseStyles.FontTheme.reg,\n        alignSelf: 'center',\n    },\n});\n\n/**\n * ---------------------------------------------------\n * SceneHeader\n * ---------------------------------------------------\n * The stylized title and button that is rendered for most pages \n * of the main HomePairs UI. \n * \n * @param {SceneHeaderProps} props \n */\nexport default function SceneHeader(props: SceneHeaderProps) {\n    const {buttonTitle, onButtonPress, title } = props;\n\n    \n    function renderButton() {\n        return !isNullOrUndefined(buttonTitle) ?\n            <ThinButton \n                name={buttonTitle}\n                containerStyle={styles.thinButtonContainer}\n                buttonStyle={styles.thinButton}\n                buttonTextStyle={styles.thinButtonText}\n                onClick={onButtonPress}/> \n        :\n            <></>;\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.pageTitle}>{title}</Text>\n            {renderButton()}\n        </View>\n    );\n}\n\nSceneHeader.defaultProps = {\n    buttonTitle: null,\n    onButtonPress: () => {},\n};\n","import React from 'react';\nimport {View, StyleSheet, FlatList, TouchableOpacity, Platform} from 'react-native';\nimport {ImageTile, TextTile} from 'src/elements';\nimport { AppState, ProviderDictionary, ServiceProvider, PropertyManagerAccount, AccountTypes } from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { connect } from 'react-redux';\nimport { NavigationRouteScreenProps, NavigationRouteHandler, prepareNavigationHandlerComponent, navigationPages, MainAppStack} from 'src/routes';\nimport { isNullOrUndefined } from 'src/utility';\n\nconst {AddServiceProviderModal, PreferredProviderModal} = navigationPages;\n\nconst styles = StyleSheet.create({\n    container: {\n        maxWidth: '100%',\n        width: BaseStyles.ContentWidth.max,\n        paddingVertical: Platform.OS === 'web' ? 0 : 12.5,\n        backgroundColor: \"#374245\",\n        maxHeight: 100,\n        minHeight: 80,\n        justifyContent: 'center',\n        alignSelf:'center', \n        borderColor: 'white',\n    },\n    flatListTileContainer: {\n        flex: 1,\n        justifyContent: 'center',\n        marginHorizontal: 11, \n        marginBottom: Platform.OS === 'web' ? 5 : undefined,\n    },\n});\n\nexport type PreferredProviderFlatListStateProps = {\n    pmId: number,\n    serviceProviders: ProviderDictionary,\n    shouldRender: boolean,\n}\n\nexport type PreferredProviderFlatListProps = \n    & PreferredProviderFlatListStateProps\n    & NavigationRouteScreenProps\n\n\n/* * Helper types for the renderComponent used for the flatList * */\ntype TypeGuardTile = {\n    type: 'add' | 'provider'\n    tile: ServiceProvider,\n    pmId: number,\n    phoneNum: string,\n};\ntype RenderProviderTilesItem = NavigationRouteScreenProps & TypeGuardTile;\n/* * Helper types for the renderComponent used for the flatList * */\n\n/**\n * A Render Component that is passed into the Flatlist of Base Component: \n * PreferredProviderFlatListBase. This Component handles the individual tile \n * and allows to the the detailed information modal of the selected service \n * provider or to the AddPreferredProviderModal in the case of the last \n * tile selected.\n * @param {RenderProviderTilesItem} props \n */\nfunction renderProviderTiles(props: RenderProviderTilesItem){\n    const {type, tile, pmId, navigation} = props;\n    async function onClickProvider(){\n        navigation.navigate(PreferredProviderModal, {serviceProvider: tile.phoneNum}, true);\n    }\n\n    async function onClickAdd(){\n        navigation.navigate(AddServiceProviderModal, {}, true);\n    }\n\n    // Helper function that that renders a Text tile for logos without images and \n    // Image tiles for those with images. This function assumes that tile is defined.\n    function renderProperTile() {\n        const {logo, name} = tile;\n\n        // Render remote images. Need to format in {uri: string} to work on iOS\n        const image = Platform.OS === 'web' ? logo : {uri: logo} ;\n        return isNullOrUndefined(logo) ? \n            <TextTile text={name} fontSize={16}/>\n            :\n            <ImageTile image={image}/>;     \n    }\n\n    return type === 'add' ? \n    (\n        <TouchableOpacity style={styles.flatListTileContainer} onPress={onClickAdd}>\n            <TextTile text=\"+\" adjustFontSizeToFit/>\n        </TouchableOpacity>\n    ) : (\n        <TouchableOpacity style={styles.flatListTileContainer} onPress={onClickProvider}>\n            {renderProperTile()}\n        </TouchableOpacity>\n    );\n}\n\n/**\n * A helper function that converts the state representation of preferred service providers into \n * the format needed to render for the Flatlist. \n * @param {ProviderDictionary} serviceProviders -The Service Provider Information recieved from \n * the redux state\n * @param {NavigationRouteHandler} navigation -The parents navigation handler. We the parents \n * instead of the prepare function to reduce the amount of computations needed.\n */\nfunction prepareRenderTiles(serviceProviders: ProviderDictionary, navigation: NavigationRouteHandler) : RenderProviderTilesItem[]{\n    let tiles: RenderProviderTilesItem[] = [];\n\n    Object.entries(serviceProviders).forEach(([, serviceProvider]) => {\n        tiles.push({ type: 'provider', tile: serviceProvider, navigation});\n    });\n    tiles.push({type: 'add', tile: null, navigation});\n    return tiles;\n}\n\n/**\n * ---------------------------------------------------\n * Preferred Provider FlatList\n * ---------------------------------------------------\n * Component that whom intially is intended to rendered within the Service Requests \n * page. It has a scrollable set of preffered service providers that is recieved from \n * the redux store. It also holds a navigator that navigates to a Preffered Provider \n * modal (based on the service provider selected) or an add Service Provider modal. \n * This component reads from the Redux Store to check if it should render itself, please\n * refer to mapStateWithProps to adjust the conditions in which this component will \n * render. \n * \n * @param {PreferredProviderFlatListProps} props -Base component that will be contained \n */\nexport function PreferredProviderFlatListBase(props: PreferredProviderFlatListProps){\n    const {serviceProviders, navigation, pmId, shouldRender} = props;\n    const renderTiles = prepareRenderTiles(serviceProviders, navigation);\n    if(!shouldRender){\n        return <></>;\n    }\n    return (\n        <View style={styles.container}>\n            {/* * TODO: To rerender a FlatList, you must use the extraData prop * */}\n            <FlatList\n                initialNumToRender={3}\n                style={{flex:1, marginTop: 5}}\n                contentContainerStyle={{flexGrow: 1, justifyContent: 'center', alignContent: 'center'}}\n                data={renderTiles}\n                renderItem={({item}) => renderProviderTiles({...item, pmId})}\n                keyExtractor={(item, index) => index.toString()}\n                horizontal/>\n        </View>);\n} \n\n\n/* * Converting the Base into a Smart Component  * */ \nfunction mapStateToProps(state: AppState): PreferredProviderFlatListStateProps{  \n    const {preferredProviders, accountProfile, header} = state;\n    const {pmId, accountType} = accountProfile;\n    const {serviceProviders} = preferredProviders;\n    const {currentPage} = header;\n\n    const ServiceRequestNavigation: string = MainAppStack[1].navigate;\n\n    // This component should only render itself if the current page is the service \n    // request page and if the account is for a Property Manager\n    const shouldRender: boolean = (\n        accountType === AccountTypes.PropertyManager \n        && currentPage.navigate === ServiceRequestNavigation);\n\n    return {\n        shouldRender,\n        pmId,\n        serviceProviders,\n    };\n};\n\n\nconst PreferredProviderFlatList = connect(mapStateToProps)(\n    prepareNavigationHandlerComponent(PreferredProviderFlatListBase));\n/* * Converting the Base into a Smart Component  * */ \n\nexport default PreferredProviderFlatList;\n","import React from 'react';\nimport { MainAppStackType, HomePairsDimensions } from 'homepairs-types';\nimport {\n    Platform,\n    View,\n    ScrollView,\n    SafeAreaView,\n    StyleSheet,\n} from 'react-native';\nimport { HeaderActions } from 'homepairs-redux-actions';\nimport { connect } from 'react-redux';\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport {NavigationRouteHandler} from 'src/routes';\nimport { PreferredProviderFlatList } from './PreferredProviderFlatList';\nimport SceneHeader from './SceneHeader';\n\ntype SceneDispatchProps = {\n    onSetNavHeaderGoBackButton?: (isSet: boolean) => any;\n    onCloseNavHeaderMenu?: () => any;\n};\n\nexport type SceneInjectedProps = SceneDispatchProps & {\n    navigation?: NavigationRouteHandler\n}\n\ntype Props = NavigationStackScreenProps<any, any> &\nSceneDispatchProps;\n\ntype State = {\n    showModal: boolean;\n};\n\nconst colorTheme = BaseStyles.LightColorTheme;\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        alignSelf: 'center',\n        width: '100%',\n        backgroundColor: colorTheme.secondary,\n        flexGrow: 1,\n    },\n    pallet: {\n        backgroundColor: colorTheme.secondary,\n        width: '100%',\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        minWidth: HomePairsDimensions.MIN_PALLET,\n        alignSelf: 'center',\n        flex: 1,\n    },\n    viewStyle: {\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        backgroundColor: colorTheme.secondary,\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.max,\n        flex: 1,\n    },\n    scrollViewContentContainer: {\n        maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n        backgroundColor: colorTheme.secondary,\n        alignSelf: 'center',\n        width: BaseStyles.ContentWidth.max,\n        flexGrow: 1,\n    },\n});\n\n\n\n/**\n * ---------------------------------------------------\n * withSceneHeader\n * ---------------------------------------------------\n * A HOC that renders content based off of the Page parameter into a  \n * component. It will provide the component with a title, potentially a button,\n * a background, and a maximum width. Please refer to MainAppStackType for information\n * regarding configuring the button.  \n * \n * @param {any} WrappedComponent -Base component that will be contained \n * @param {MainAppStackType} Page -Parameters that determine title, button, and button behavior \n * @param {boolean} withScrollView -Determines if the scene header requires a scrollview, by default it is true \n */\nexport function withSceneHeader(WrappedComponent: any, Page: MainAppStackType, withScrollView: boolean = false) {\n\n    const ReduxComponent = class ReduxComponentBase extends React.Component<Props,State> {\n\n        constructor(props: Readonly<Props>) {\n            super(props);\n            this.onPressButton = this.onPressButton.bind(this);\n        }\n\n        // Based on the passed input, this invokes the change modal visibility for this \n        // HOC or it passes in the neccessary props of this component to allow for \n        // navigation. NOTE: REMEMBER TO CALL withNavigation if a navigator is to be used. \n        onPressButton() {\n            return Page.onNavButtonClick(this.props);\n        }\n\n        renderChosenView() {\n            const {onSetNavHeaderGoBackButton,onCloseNavHeaderMenu,navigation} = this.props;\n            const directionalLockEnabled = true;\n            const automaticallyAdjustContentInsets = false;\n            return withScrollView || Platform.OS !== 'web' ? (\n                <ScrollView\n                        style={{flex: 1}}\n                        testID='with-scene-header-container-view'\n                        contentContainerStyle={styles.scrollViewContentContainer}\n                        directionalLockEnabled={directionalLockEnabled}\n                        automaticallyAdjustContentInsets={automaticallyAdjustContentInsets}>\n                        <WrappedComponent\n                            testID='with-scene-header-wrapped-component'\n                            onSetNavHeaderGoBackButton={onSetNavHeaderGoBackButton}\n                            onCloseNavHeaderMenu={onCloseNavHeaderMenu}\n                            navigation={navigation}/>\n                    </ScrollView>\n            ) : (\n                <View style={{flex: 1}}>\n                <View\n                    testID='with-scene-header-container-view'\n                    style={styles.viewStyle}>\n                        <WrappedComponent\n                            testID='with-scene-header-wrapped-component'\n                            onSetNavHeaderGoBackButton={onSetNavHeaderGoBackButton}\n                            onCloseNavHeaderMenu={onCloseNavHeaderMenu}\n                            navigation={navigation}/>\n                    </View>\n                </View>\n            );\n        }\n\n        renderContents() {\n            return (\n                <View style={{flex:1}}>\n                    <SceneHeader\n                        title={Page.title}\n                        buttonTitle={Page.button}\n                        onButtonPress={this.onPressButton}/>\n                    {this.renderChosenView()}\n                </View>\n            );\n        }\n\n        render() {\n            return !(Platform.OS === 'ios') ? (\n                <View style={styles.container}>\n                    <PreferredProviderFlatList />\n                    <View style={styles.pallet}>\n                        {this.renderContents()}\n                    </View>\n                </View>\n            ) : (\n                <View style={styles.container}>\n                    <PreferredProviderFlatList />\n                    <SafeAreaView style={styles.pallet}>\n                        {this.renderContents()}\n                    </SafeAreaView>\n                </View>\n            );\n        }\n    };\n    \n    // Connects dispatch props to this component since all these pages will have the \n    // capability of navigating to a different page. \n    function mapDispatchToProps(dispatch: any): SceneDispatchProps {\n        return {\n            onSetNavHeaderGoBackButton: (isSet: boolean) => {\n                dispatch(HeaderActions.showGoBackButton(isSet));\n                dispatch(HeaderActions.toggleMenu(false));\n            },\n            onCloseNavHeaderMenu: () => {\n                dispatch(HeaderActions.toggleMenu(false));\n            },\n        };\n    }\n\n    const WithSceneHeaderComponent = connect(null, mapDispatchToProps)(ReduxComponent);\n    return WithSceneHeaderComponent;\n}\n","import React from 'react';\nimport { MainAppStack, MainAppStackTenant, HOME_INDEX } from 'src/routes';\nimport {updateSelectedPage} from 'homepairs-redux-actions';\nimport { connect } from 'react-redux';\nimport { AppState, MainAppStackType, AccountTypes } from 'homepairs-types';\n\n\nexport type WithHeaderUpdateInjectedProps = {\n    /**\n     * Method that will update the header when the component is mounted.\n     */\n    onUpdateHeader: () => void;\n} & any;\n\n/**\n * -----------------------------------------------\n * withHeaderUpdate\n * -----------------------------------------------\n * \n * A High Order Component that maps the component with the menu item in the \n * homepairs header reducer.\n * \n * @param {any} WrappedComponent - Page component attached to header\n * @param {number} pageIndex - Referenced value on the app page index. If the page does not have a \n * proper mapping, set it to -1 so nothing is selected.\n * @param {boolean} withRef - Defines if the Connected Component should be accessed using react \n * references. \n */\nexport default function withHeaderUpdate(WrappedComponent: any, page: number | MainAppStackType = HOME_INDEX, withRef?: boolean){\n\n    // Define the updateHeader function so the Smart Component can be returned \n    function mapStateToProps(state: AppState) {\n        const {accountProfile} = state;\n        return {\n            accountType: accountProfile.accountType,\n        };\n    }\n\n    const mapDispatchToProps = dispatch => ({\n        onUpdateHeader: (selectedPage: MainAppStackType) => {\n            dispatch(updateSelectedPage(selectedPage));\n        },\n    });\n\n    class UpdateHeaderComponent extends React.Component<WithHeaderUpdateInjectedProps>{\n        MainAppStack: MainAppStackType[];\n\n        constructor(props: Readonly<WithHeaderUpdateInjectedProps>){\n            super(props);\n            this.MainAppStack = props.accountType === AccountTypes.PropertyManager ? MainAppStack : MainAppStackTenant;\n        };\n\n        componentDidMount(){\n            const {onUpdateHeader} = this.props;\n            let selectedPage: MainAppStackType = {title: '', navigate: ''};\n\n            if(typeof page === 'object'){\n                selectedPage = page;\n            } else if (page !== -1){\n                selectedPage = this.MainAppStack[page];\n            }\n            onUpdateHeader(selectedPage);\n        };\n        \n        render(){\n            return <WrappedComponent {...this.props}/>;\n        };\n    };\n\n    return connect(mapStateToProps, mapDispatchToProps, null, {withRef})(UpdateHeaderComponent);\n}","import { prepareNavigationHandlerComponent, navigationPages, HOME_INDEX, SERVICE_REQUEST, NEW_SERVICE_REQUEST } from 'src/routes';\nimport { MainAppStackType } from 'homepairs-types';\nimport { DetailedPropertyPage, TenantPropertyPage, PropertiesPage} from './Properties';\nimport { ServiceRequestPage, NewRequestPage, ServiceRequestScreenProps } from './ServiceRequest';\nimport { AccountPage} from './Account';\nimport { withSceneHeader, withHeaderUpdate } from './components';\n\nconst propertySceneParams: MainAppStackType = {\n    title: 'My Properties',\n    navigate: 'AccountProperties',\n    button: 'Add Property',\n    onNavButtonClick: (props:any)=> {\n        props.navigation.navigate(navigationPages.AddNewPropertyModal, null, true);\n    },\n    doesButtonUseNavigate: true,\n};\n\nconst sceneParam: MainAppStackType = {\n    title: 'Service Requests',\n    navigate: SERVICE_REQUEST,\n    button: 'New Request',\n    onNavButtonClick: (props: ServiceRequestScreenProps) => {\n        props.navigation.navigate(navigationPages.NewRequest);\n        props.onSetNavHeaderGoBackButton(true);\n    },\n    doesButtonUseNavigate: true,\n};\n\nconst newRequestSceneParam: MainAppStackType = {\n    title: 'New Service Request',\n    navigate: NEW_SERVICE_REQUEST,\n};\n\nconst accountSceneParam: MainAppStackType = {\n    title: 'Account Settings',\n    navigate: 'Account',\n};\n\nexport const DetailedProperty = prepareNavigationHandlerComponent(DetailedPropertyPage);\n\n/**\n * ---------------------------------------------------\n * PropertiesScreen\n * ---------------------------------------------------\n * This is intended to be used in the Main Navigation Stack. This component is connected to the \n * HomePairs redux store, the react-native Navigator, and our very own withSceneHeader HOC. It also \n * has been injected with a Modal; this gives this component the capability to reveal a smaller page \n * that allows the user to add a new property to their account. \n */\nexport const Properties = withHeaderUpdate(prepareNavigationHandlerComponent(withSceneHeader(PropertiesPage, propertySceneParams)));\nexport const TenantProperty = withHeaderUpdate(prepareNavigationHandlerComponent(TenantPropertyPage), HOME_INDEX);\n\n\n\n/**\n * ---------------------------------------------------\n * ServiceRequestScreen\n * ---------------------------------------------------\n * This is intended to be used in the Main Navigation Stack. This component is connected to the \n * HomePairs redux store, the react-native Navigator, and our very own withSceneHeader HOC. It also \n * can be injected with a Modal; this gives this component the capability to reveal a smaller page \n * that allows the user to add a new service request to their account. \n */\nexport const ServiceRequest = withHeaderUpdate(prepareNavigationHandlerComponent(withSceneHeader(ServiceRequestPage, sceneParam, false)), sceneParam);\n\nexport const NewRequest = prepareNavigationHandlerComponent(withHeaderUpdate(\n    withSceneHeader(prepareNavigationHandlerComponent(NewRequestPage), newRequestSceneParam), newRequestSceneParam, false));\n\nexport const Account = prepareNavigationHandlerComponent(withSceneHeader(AccountPage, accountSceneParam, false));\n","import {StyleSheet} from 'react-native';\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        aspectRatio: 1, // Use this to make the component dimensions relative to its height/width\n        alignSelf: 'flex-end',\n        justifyContent: 'center',\n        paddingHorizontal: '5%',\n        marginRight: '5%',\n    },\n    button: {\n        flex: 1,\n        aspectRatio: 1, // Use this to make the component dimensions relative to its height/width\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        borderRadius: 8,\n        height: 45,\n        width: 45,\n        borderColor: '#rgba(0,0,0, .08)',\n    },\n    imageStyle: {\n        height: 45, \n        width: 45,\n        aspectRatio: 1,\n        justifyContent: 'center',\n        resizeMode: 'contain',\n    },\n});\n\nexport {styles};","import React from 'react';\nimport {\n    TouchableOpacity,\n    View,\n    Image,\n    Text,\n} from 'react-native';\nimport {hamburger} from 'homepairs-images';\nimport {styles} from './styles';\n\nexport type HamburgerButtonProps = {\n    /**\n     * Used to find an instance of the component when testing\n     */\n    testID?: string,\n\n    /**\n     * Unique indicator for when many of these instances are created\n     */\n    key?: any;\n\n    /**\n     * Callback button that invokes when a full press/click (click and release) has been invoked\n     */\n    onClick?: () => any;\n\n    /**\n     * Callback button that invokes when a button has been pressed.\n     */\n    onPressIn?: () => any;\n\n    /**\n     * Callback button that invokes when a button has been released from a press/click\n     */\n    onPressOut?: () => any;\n};\n\n /**\n  * ------------------------------------------------------------\n  * Hamburger Button\n  * ------------------------------------------------------------\n  * A simple button that by default, renders a thin button with a \n  * hamburger (congruence) symbol. This is intended to be used with\n  * navigation menus.\n  *  \n  * @param {HamburgerButtonProps} props \n  */\nexport default function HamburgerButton(props: HamburgerButtonProps) {\n    // This function will call the parent callback function.\n    const {onClick} = props;\n\n    const {container, button, imageStyle} = styles;\n    function onPress() {\n        onClick();\n    }\n\n    return (\n        <View style={container}>\n            <TouchableOpacity\n                testID='click-hamburger-button'\n                style={button}\n                onPress={onPress}>\n                <Image style={imageStyle} source={hamburger}/>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nHamburgerButton.defaultProps = {\n    onClick: () => {},\n};\n\n","import { LightColorTheme, FontTheme } from 'homepairs-base-styles';\nimport { StyleSheet } from 'react-native';\n\nconst colorScheme = LightColorTheme;\nexport default StyleSheet.create({\n    \n    homePairsTitleContainer: {\n        padding: 15,\n        paddingRight: 0,\n        height: 80,\n        width: '100%',\n        backgroundColor: colorScheme.secondary,\n    },\n    homePairsTitleContainerNavSet: {\n        flexDirection: 'row',\n        padding: 15,\n        paddingRight: 0,\n        height: 80,\n        minWidth: 175,\n        maxWidth: 185,\n        backgroundColor: colorScheme.secondary,\n    },\n    homePairsTitle: {\n        fontFamily: FontTheme.primary,\n        fontSize: 32,\n        color: colorScheme.primary,\n    },\n    \n});","import {\n    View,\n    Text,\n} from 'react-native';\nimport React from 'react';\nimport styles from './styles';\n\n\nexport type HomePairsHeaderTitleProps = {\n\n    /**\n     * Used to indicate instances of this component during testing\n     */\n    testID?: string;\n\n    /**\n     * Indicates to the header whether the menu is rendered a nav bar or \n     * dropdown menu. \n     */\n    isDropDown: boolean;\n};\n\n/**\n * ---------------------------------------------------\n * HomePairs Header Title\n * ---------------------------------------------------\n * This class is intended to hold all information for the first component of the header. There are a few\n * conditions. This page is essentially the same if running as a native app or if the web page window has\n * a resolution of less than 600px.\n */\nexport function HomePairsHeaderTitle(props:HomePairsHeaderTitleProps) {\n    const {isDropDown} = props;\n\n    function getProperTitleStyle() {\n        return isDropDown\n            ? styles.homePairsTitleContainer\n            : styles.homePairsTitleContainerNavSet;\n    }\n\n    return (\n        <>\n        <View testID='homepairs-header-title-style' style={getProperTitleStyle()}>\n            <Text style={styles.homePairsTitle}>HomePairs</Text>\n        </View>\n        </>\n    ); \n}\n\nHomePairsHeaderTitle.defaultProps = {\n    testID: 'homepairs-header-title',\n};","import {StyleSheet, Dimensions, Platform} from 'react-native';\nimport {LightColorTheme, FontTheme} from 'homepairs-base-styles';\n\nconst {width} = Dimensions.get('window');\nconst colorScheme = LightColorTheme;\n\nexport default (isDropDown: boolean) => {\n    const newStyle = StyleSheet.create({\n        \n        container: {\n            flexDirection: 'row',\n            flex: 1,\n            maxWidth: width,\n            maxHeight: 150,\n            width: Platform.OS === 'web' ? undefined : '100%',\n            backgroundColor: colorScheme.secondary,\n        },\n        containerDropDown: {\n            flexDirection: 'column',\n            width: '100%',\n            minWidth: 300,\n            backgroundColor: colorScheme.secondary,\n        },\n        menuText: {\n            fontFamily: FontTheme.primary,\n            paddingVertical: 15,\n            maxHeight: 50,\n            fontSize: 16,\n            color: colorScheme.tertiary,\n            paddingLeft: isDropDown ? 33 : 15,\n        },\n        menuSelectedText: {\n            fontFamily: FontTheme.primary,\n            paddingVertical: 15,\n            maxHeight: 50,\n            fontSize: 16,\n            color: colorScheme.lightGray,\n            paddingLeft: isDropDown ? 33 : 15,\n        },\n        selectable: { \n            marginHorizontal: 3, \n            justifyContent: 'center',\n        },\n    });\n    return newStyle;\n};\n","/* eslint-disable react/static-property-placement */\nimport { View, Text, TouchableOpacity} from 'react-native';\nimport React from 'react';\nimport { MainAppStackType, AccountTypes } from 'homepairs-types';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { \n    NavigationRouteHandler, \n    MainAppStack as MainAppStackManager, \n    MainAppStackTenant,\n    ChooseMainPage, \n} from 'src/routes';\nimport setStyles from './styles';\n\nexport type HomePairsMenuProps = {\n\n    /**\n     * Used to indicate an instance of this component during testing\n     */\n    testID?: string;\n\n    /**\n     * Navigator passed from the parent that will be used to navigate between\n     * the various stacks and screens of the application.\n     */\n    navigation: NavigationRouteHandler;\n\n    /**\n     * Value of the page that is currently navigated to and whose text is \n     * slightly\n     */\n    selectedPage: MainAppStackType;\n\n    /**\n     * Function intended invoke actions after navigation has occurred. \n     */\n    parentCallBack?: (arg0?: any) => any;\n\n    /**\n     * Indicates to component if the drop down menu should be rendered or if a \n     * nav bar should be rendered\n     */\n    isDropDown?: boolean;\n\n    /**\n     * If the component is a dropdown menu, this indicates if the drop down contents \n     * should be revealed or not.\n     */\n    showMenu?: boolean;\n\n    /**\n     * \n     */\n    setAuthenticatedState?: (auth: boolean) => any;\n\n    /**\n     * Callback function intended to change the state of the menu from hiding or showing\n     * the dropdown menu. \n     */\n    toggleMenu?: (arg0?: any) => any;\n\n    /**\n     * Identifier that allows the header to navigate and render properly based on account status\n     */\n    accountType: AccountTypes\n};\n\ntype Props = HomePairsMenuProps;\n\nlet styles = null;\n\n/**\n * ---------------------------------------------------\n * HomePairs Header Menu \n * ---------------------------------------------------\n * A child component for the HomePairs header that will contain the navigation\n * fields for the header. This component has the ability to navigate between \n * the different stacks. It also is capable of rendering as a dropdown or a \n * navigation bar based on a passed property of the state of the parent. \n * @param {HomePairsMenuProps} props \n */\nexport default class HomePairsMenu extends React.Component<Props> {\n    pages: any[];\n\n    colorScheme: any;\n\n    MainAppStack: MainAppStackType[];\n\n    static defaultProps = {\n        testID: 'homepairs-header-menu',\n        parentCallBack: (page?: any) => {return page;},\n        isDropDown: false,\n        showMenu: false,\n        toggleMenu: (toggle?: boolean) => {return toggle;},\n        setAuthenticatedState: (auth: boolean) => {return auth;},\n    };\n\n    constructor(props: Readonly<Props>) {\n        super(props);\n\n        this.navigatePages = this.navigatePages.bind(this);\n        this.setSelected = this.setSelected.bind(this);\n        this.closeMenu = this.closeMenu.bind(this);\n        this.buttonFormat = this.buttonFormat.bind(this);\n        this.displayCorrectMenu = this.displayCorrectMenu.bind(this);\n\n        this.MainAppStack = props.accountType === AccountTypes.PropertyManager ? MainAppStackManager : MainAppStackTenant;\n        this.colorScheme = BaseStyles.LightColorTheme;\n        styles = setStyles(props.isDropDown);\n    }\n\n    /**\n     * After a user has clicked on a menu item, the item's information will invoke the \n     * parent's callback function\n     * @param {MainAppStackType} value \n     */\n    setSelected(value: MainAppStackType) {\n        const {parentCallBack} = this.props;\n        const [first] = this.MainAppStack; \n        let page = value;\n        if (value.title === this.MainAppStack[this.MainAppStack.length - 1].title)\n            page = first;\n        parentCallBack(page);\n    }\n\n    /**\n     * After a menu item has been clicked, the header is notified of change to be \n     * rerendered. Then the user is navigated to the selcted page.\n     * @param {MainAppStackType} value \n     */\n    navigatePages(value: MainAppStackType) {\n        const {navigation, setAuthenticatedState, accountType} = this.props;\n        // Check to see if logout had been clicked. If so, set the selected value \n        // to the Properties\n        this.setSelected(value);\n        this.closeMenu();\n        if(value.title === 'Log Out'){\n            setAuthenticatedState(false);\n        }\n\n        if(value.title === 'My Properties'){\n            ChooseMainPage(accountType, navigation);\n        }else{\n            navigation.navigate(value.navigate);\n        }\n    }\n\n    closeMenu() {\n        const {toggleMenu} = this.props;\n        toggleMenu();\n    }\n\n    /**\n     * Renders the menu based on if the isDropDown value. On true, it renders\n     * a dropDown menu which can render the menu's contents based on the showMenu\n     * value. Otherwise, nothing is rendered and the menu is rendered with \n     * the homepairs title. \n     * @param {MainAppStackType} currentPage \n     */\n    displayCorrectMenu(currentPage: MainAppStackType) {\n        const {isDropDown, showMenu} = this.props;\n        if (isDropDown) {\n            if (!showMenu) {\n                return <></>;\n            }\n        }\n        return this.buttonFormat(currentPage);\n    }\n\n\n     /**\n      * This function renders all the selections of a button in the format the we want.\n      * Notice the use of the maps function. This function requires that we iterate through a list\n      * of objects with a specific key. Each key must be unique in the array/list.\n      * @param {MainAppStackType} currentPage \n      */\n    buttonFormat(currentPage: MainAppStackType) {\n        return this.MainAppStack.map((page, i) => {\n            return (\n                <View \n                    // eslint-disable-next-line react/no-array-index-key\n                    key={i}\n                    style={styles.selectable}>\n                    <TouchableOpacity \n                        testID='homepairs-header-menu-buttons' \n                        onPress={() => this.navigatePages(page)}>\n                        <Text \n                            style={ \n                                /* Highlight the selected item if currently on the page. */\n                                page.navigate === currentPage.navigate \n                                ? styles.menuSelectedText \n                                : styles.menuText }>\n                            {page.title}\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n            );\n        });\n    }\n\n    render() {\n        const {isDropDown, selectedPage} = this.props;\n        styles = setStyles(isDropDown);\n\n        return (\n            <View\n                style={!isDropDown ? styles.container : styles.containerDropDown}>\n                {this.displayCorrectMenu(selectedPage)}\n            </View>\n        );\n    }\n}","import {StyleSheet} from 'react-native';\nimport * as BaseStyles from 'homepairs-base-styles';\n\nconst colorScheme = BaseStyles.LightColorTheme;\n\nexport default StyleSheet.create({\n    container: {\n        backgroundColor: 'transparent',\n        marginBottom: 5,\n        shadowRadius: 10, \n        shadowOffset: {width: 1, height: 1} , \n        shadowOpacity: .2,\n    },\n    titleContainer:{\n        marginLeft: BaseStyles.MarginPadding.largeConst,\n    },\n    titleBackContainer:{\n        flexDirection: 'row', \n        backgroundColor: colorScheme.secondary,\n    },\n    homePairsTitle: {\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.title,\n        color: colorScheme.primary,\n        flex: 1,\n    },\n    goBackSymbol: {\n        fontFamily: BaseStyles.FontTheme.primary,\n        fontSize: BaseStyles.FontTheme.lg,\n        color: colorScheme.primary,\n        flex: 1,\n    },\n    goBackButton: {\n        backgroundColor: colorScheme.secondary,\n        padding: BaseStyles.MarginPadding.mediumConst,\n        paddingTop: 20,\n        alignItems: 'center',\n        position: 'absolute',\n        zIndex: 1,\n    },\n    goBackButtonEnd: {\n        backgroundColor: colorScheme.secondary,\n        padding: BaseStyles.MarginPadding.mediumConst,\n        paddingTop: 20,\n        alignItems: 'center',\n        position: 'absolute',\n        zIndex: 1,\n        opacity: .2,\n    },\n    hamburgerContainer: { \n        flex: 1, \n    },\n    dropDownFlexDirection: { \n        flexDirection: 'column',\n    },\n    navBarFlexDirection: { \n        flexDirection: 'row',\n    },\n    \n});","/* eslint-disable react/static-property-placement */\nimport {\n    View,\n    Platform,\n    TouchableOpacity,\n    Text,\n    Dimensions,\n    ScrollView,\n} from 'react-native';\nimport React from 'react';\nimport {\n    HomePairsDimensions,\n    HeaderState,\n    MainAppStackType,\n    AccountTypes,\n} from 'homepairs-types';\nimport { NavigationRouteHandler, navigationPages } from 'src/routes';\nimport { isNullOrUndefined } from 'src/utility';\nimport HamburgerButton from './HamburgerButton/HamburgerButton';\nimport { HomePairsHeaderTitle } from './HomePairsHeaderTitle/HomePairsHeaderTitle';\nimport HomePairsMenu from './HomePairsHeaderMenu/HomePairsHeaderMenu';\nimport styles from './styles';\n\n\nconst backSymbol = '<';\nconst { DROP_MENU_WIDTH } = HomePairsDimensions;\n\n/**\n * These are a list of all pages the define a root of a stack navigation\n * Users in mobile should not be able to navigate backwards from these \n * pages. However, web should permit these pages.\n */\nconst HeaderNavigators: string[] = [\n    navigationPages.PropertiesScreen,\n    navigationPages.ServiceRequestScreen,\n    navigationPages.AccountSettings,\n    navigationPages.LoginScreen,\n    navigationPages.TenantProperty,\n];\n\nexport type HomePairsHeaderStateProps = {\n    header: HeaderState;\n    accountType: AccountTypes\n};\nexport type HomePairsHeaderDispatchProps = {\n    onToggleMenu: (showMenu: boolean) => any;\n    onShowGoBackbutton: (showBackButton: boolean) => any;\n    onSwitchNavBar: (switchNavBar: boolean) => any;\n    onUpdateSelected: (selected: MainAppStackType) => any;\n    onLogOut: (authed:boolean) => any;\n    onClickBackButton: () => any;\n};\n\nexport type HomePairsHeaderProps = \n& HomePairsHeaderDispatchProps \n& HomePairsHeaderStateProps \n& NavigationRouteHandler \n& {\n    /**\n     * Used to indicate an instance of this component when testing\n     */\n    testID?: string,\n\n    children?: any,\n};\n\n/**\n * ---------------------------------------------------\n * HomePairs Header Base\n * ---------------------------------------------------\n * The main component used for the homepairs header navigator. It is capable of rendering \n * itself based on the dimension size of the window. It renders as a dropdown menu when below \n * DROP_MENU_WIDTH and as a navBar when larger. It is intended to have functionality with the \n * redux store's header reducer.\n * \n * Children Components: \n *  HomePairsHeaderMenu\n *  HomePairsTitle\n */\nexport default class HomePairsHeaderBase extends React.Component<HomePairsHeaderProps> {\n\n    static defaultProps = {\n        testID: 'homepairs-header-base',\n    };\n\n    constructor(props: Readonly<HomePairsHeaderProps>) {\n        super(props);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.changePage = this.changePage.bind(this);\n        this.goBack = this.goBack.bind(this);\n        this.renderHamburger = this.renderHamburger.bind(this);\n    }\n\n    componentDidMount() {        \n        // Here we will add our window listener\n        const { width } = Dimensions.get('window');\n        const { onSwitchNavBar } = this.props;\n        if (width < DROP_MENU_WIDTH) {\n            onSwitchNavBar(true);\n        }\n        Dimensions.addEventListener('change', this.handleChange);\n    }\n    \n    componentWillUnmount() {\n        // Here we clean up our component by removing the listener\n        Dimensions.removeEventListener('change', this.handleChange);\n    }\n\n    changePage(page: MainAppStackType) {\n        const { onUpdateSelected } = this.props;\n        onUpdateSelected(page);\n    }\n\n    /**\n     * Callback function to be passed into the Dimensions eventlistenter. It will \n     * invoke a state change to this component based on the width of the window. \n     */\n    handleChange() {\n        const { width } = Dimensions.get('window');\n        const { onSwitchNavBar } = this.props;\n\n        if (width < DROP_MENU_WIDTH) {\n            onSwitchNavBar(true);\n        } else {\n            onSwitchNavBar(false);\n        }\n    }\n\n    toggleMenu() {\n        const { onToggleMenu, header } = this.props;\n        onToggleMenu(!header.showMenu);\n    }\n\n    /**\n     * This function navigates to the previous screen and then hides the goBack button\n     * if the screen is the first in the navigation stack.\n     *\n     * Navigation Stack stores its indices in the state. If the index is not defined or\n     * if the index is 0, then we are at the beggining of the stack.\n     * */\n    goBack() {\n        const { navigation, onToggleMenu, onClickBackButton } = this.props;\n        navigation.goBack();\n        onClickBackButton();\n        onToggleMenu(false);\n    }\n\n    showBackButton() {\n        const { header } = this.props;\n        const showBackButton = !(header.currentPage != null && HeaderNavigators.includes(header.currentPage.navigate));\n        \n        // If header is not dropdown and is on a web platform, do not show the back button.\n        if (!header.isDropDown && Platform.OS === 'web'){\n            return <></>;\n        } \n\n        // If on mobile, show the back button when the showBackButton is set. Otherwise, we are at a drop down menu on web\n        // which implies a mobile view on web. Always render the back button in this case.\n        return (showBackButton || Platform.OS === 'web') ? (\n            <TouchableOpacity \n                testID='homepairs-header-go-back'\n                onPress={this.goBack} \n                style={styles.goBackButton}>\n                <Text style={styles.goBackSymbol}>{backSymbol}</Text>\n            </TouchableOpacity>\n        ) : (\n            <View \n                testID='homepairs-header-go-back-disabled'\n                style={styles.goBackButtonEnd}>\n                 <Text style={styles.goBackSymbol}>{backSymbol}</Text>\n                </View>\n        );\n    }\n\n    renderHamburger() {\n        const { header } = this.props;\n        if (header.isDropDown) {\n            return (\n                <View style={styles.hamburgerContainer}>\n                    <HamburgerButton \n                        testID='homepairs-header-hamburger-button' \n                        onClick={this.toggleMenu} />\n                </View>\n            );\n        }\n        return <></>;\n    }\n\n    render() {\n        const { header, navigation, accountType, onLogOut, children } = this.props;\n        return (\n            <>\n            <View style={styles.container}>\n                <View\n                    style={header.isDropDown ? styles.dropDownFlexDirection : styles.navBarFlexDirection}>\n                    <View\n                        style={styles.titleBackContainer}>\n                        {this.showBackButton()}\n                        <View\n                            style={styles.titleContainer}>\n                            <HomePairsHeaderTitle\n                                testID='homepairs-header-title'\n                                isDropDown={header.isDropDown}/>\n                        </View>\n                        {this.renderHamburger()}\n                    </View>\n                    <HomePairsMenu\n                        testID='homepairs-header-menu'\n                        navigation={navigation}\n                        selectedPage={header.currentPage}\n                        parentCallBack={this.changePage}\n                        toggleMenu={this.toggleMenu}\n                        isDropDown={header.isDropDown}\n                        showMenu={header.showMenu}\n                        setAuthenticatedState={(authed:boolean) => onLogOut(authed)}\n                        accountType={accountType}/>\n            </View>\n            </View>\n            {\n                isNullOrUndefined(children) \n                ? <></>\n                : <ScrollView style={{flex: 1}} contentContainerStyle={{flexGrow: 1}}>\n                    {children}\n                  </ScrollView>\n            }\n            </>\n        );\n    }\n}\n","import { AppState, MainAppStackType } from \"homepairs-types\";\nimport { connect } from \"react-redux\";\nimport { HeaderActions, SessionActions, onGoBack } from 'homepairs-redux-actions';\nimport {prepareNavigationHandlerComponent} from 'src/routes';\nimport HomePairsHeaderBase , { HomePairsHeaderStateProps, HomePairsHeaderDispatchProps } from \"./HomePairsHeaderBase\";\n\nfunction mapStateToProps(state: AppState): HomePairsHeaderStateProps{ \n  return {\n    header: state.header,\n    accountType: state.accountProfile.accountType,\n  };\n};\n\nconst mapDispatchToProps: (dispatch:any) => HomePairsHeaderDispatchProps = dispatch => ({\n  onToggleMenu: (showMenu:boolean) => {\n      dispatch(HeaderActions.toggleMenu(showMenu));\n  },\n  onShowGoBackbutton: (showBackButton: boolean) => {\n      dispatch(HeaderActions.showGoBackButton(showBackButton));\n  },\n  onSwitchNavBar: (switchNavBar: boolean) => {\n    dispatch(HeaderActions.switchDropdownNavbar(switchNavBar));\n  },\n  onUpdateSelected: (selected: MainAppStackType) => {\n    dispatch(HeaderActions.showGoBackButton(false));\n    dispatch(HeaderActions.updateSelectedPage(selected));\n  },\n  onLogOut: (authed:boolean) => {\n    dispatch(SessionActions.setAccountAuthenticationState(authed));\n  },\n  onClickBackButton: () => {\n    dispatch(onGoBack());\n  },\n});\n\nconst HomePairsHeader = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(HomePairsHeaderBase);\n\n/**\n * ---------------------------------------------------\n * HomePairs Navigation Header\n * ---------------------------------------------------\n * A fully functional navigation header that is rendered based on the size of the \n * encapsulating window. It connects to the redux store to maintain a state of how \n * to render itself. It can present itself as navigation bar or a navigation \n * drop down menu. This is intended to be used on the Main App Stack of a react-native\n * navigators although, it should be able to be rendered in all other components \n * provided it is able to invoke the proper dispatch actions from the store.\n * \n * Children Components: \n *  HomePairsHeaderBase\n *  HomePairsHeaderMenu\n *  HomePairsTitle\n */\nexport default prepareNavigationHandlerComponent(HomePairsHeader);\n","import React, { ReactElement } from \"react\";\nimport {\n  ActivityIndicator,\n  StatusBar,\n  StyleSheet,\n} from \"react-native\";\nimport {Card} from 'src/elements';\n\nexport type LoadingModalProps = {\n  children?: ReactElement[] | ReactElement;\n};\n\nconst styles = StyleSheet.create({\n  loadingCardContents: {\n    flex: 1,\n    alignContent: \"center\",\n    justifyContent: \"center\",\n    alignSelf: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#fff\",\n    maxHeight: 100,\n    width: \"75%\",\n    maxWidth: 350,\n    shadowColor: \"#aaa\",\n    shadowRadius: 10,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 200,\n    elevation: 9,\n    borderRadius: 10,\n  },\n});\n\n/**\n * ------------------------------------------------------------\n * Loading Modal\n * ------------------------------------------------------------\n * A card component that should be navigated to when assets, requests,\n * and async awaits are being loaded/invoked. It is capable of taking in \n * children to show messages about the status of what is invoked.\n * @param {LoadingModalProps} props \n */\nexport function LoadingModal(props: LoadingModalProps) {\n  const {children} = props;\n  return (\n    <Card\n      containerStyle={styles.loadingCardContents}\n      wrapperStyle={{ alignItems: \"center\" }}\n    >\n      <ActivityIndicator />\n      <StatusBar barStyle=\"default\" />\n      <>{children}</>\n    </Card>\n  );\n}\n","import React from 'react';\nimport {Text, StyleSheet, View} from 'react-native';\nimport {LoadingModal} from './LoadingModal';\n\nconst styles = StyleSheet.create({\n    container: {\n        flex:1,\n        width: '75%',\n        minWidth: 100,\n        maxWidth: 300,\n        justifyContent: 'center',\n        alignSelf:'center',\n        alignItems:'center',\n    },\n});\n\n/**\n * ------------------------------------------------------------\n * Logging In Modal\n * ------------------------------------------------------------\n * A component that should be used when a user is attempting to authenticate \n * via user credentials. \n * \n * -Child Component: \n *  LoadingModal\n */\nexport function LoggingInModal(){\n    return <View style={styles.container}><LoadingModal><Text>Logging In...</Text></LoadingModal></View>;\n}\n\n/**\n * ------------------------------------------------------------\n * Logging In Modal\n * ------------------------------------------------------------\n * A component that should be used when a user is attempting to create a Homepairs \n * account. \n * \n * -Child Component: \n *  LoadingModal\n */\nexport function CreatingAccountModal(){\n    return <View style={styles.container}><LoadingModal><Text>Creating Your Account...</Text></LoadingModal></View>;\n}","import React from \"react\";\nimport { ScrollView, View, Text, Platform} from 'react-native';\nimport { ThinButtonProps, Card, ThinButton, ImageTile} from 'src/elements';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, ServiceProvider, ProviderDictionary  } from 'homepairs-types';\nimport Colors from 'homepairs-colors';\nimport {NavigationRouteScreenProps, NavigationRouteHandler} from 'src/routes';\nimport {HelperText} from 'react-native-paper';\nimport setInputStyles from './styles';\n\n\nexport type PreferredProviderModalDispatchProps = {\n    onRemoveServiceProvider: (\n        serviceProvider: ServiceProvider, \n        displayError: (error:string) => void,\n        navigation: NavigationRouteHandler) => any\n}\n\nexport type PreferredProviderStateProps = {\n    preferredProvider: ProviderDictionary,\n}\n\nexport type PreferredProviderProps = NavigationRouteScreenProps & PreferredProviderModalDispatchProps & PreferredProviderStateProps;\n\ntype PreferredProviderModalState = {\n    errorMsg: string, \n    errorCheck: boolean\n}\n\nconst initialState : PreferredProviderModalState = {\n    errorMsg: '', \n    errorCheck: false,\n};\n\nconst preferredProviderStrings = strings.preferredProviderModal;\n\nexport class PreferredProvidertModalBase extends React.Component<PreferredProviderProps, PreferredProviderModalState> {\n    styles;\n\n    serviceProvider;\n\n    servicePhoneNum;\n\n    submitButton : ThinButtonProps = {\n        name: 'Remove Provider', \n        onClick: () => {this.clickRemoveButton();},\n        buttonStyle: {\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: BaseStyles.LightColorTheme.red,\n        },\n        buttonTextStyle: {\n            color: BaseStyles.LightColorTheme.red, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n    };\n\n    constructor(props: Readonly<PreferredProviderProps>) {\n        super(props);\n        this.styles = setInputStyles(null);\n        this.servicePhoneNum = props.navigation.getParam('serviceProvider');\n        this.serviceProvider = props.preferredProvider[this.servicePhoneNum];\n        this.state = initialState;\n        this.setInitialState = this.setInitialState.bind(this);\n        this.displayError = this.displayError.bind(this);\n    }\n\n    setInitialState() {\n        this.setState(initialState);\n    }\n\n    displayError(msg: string) {\n        this.setState({errorMsg: msg, errorCheck: true});\n    }\n\n    clickRemoveButton() {\n        const {navigation, onRemoveServiceProvider} = this.props;\n        this.setState({errorCheck: false});\n        console.log('Clciked');\n        onRemoveServiceProvider(this.serviceProvider, this.displayError, navigation);\n        console.log('Clciked after request');\n\n    }\n\n    renderHeader() {\n        const {logo} = this.serviceProvider;\n        const image = Platform.OS === 'web' ? logo : {uri: logo} ;\n        return (\n            <View>\n                <View style={this.styles.tileContainer} >\n                    <ImageTile image={image} enlarge/>\n                </View>\n                <View>\n                    <Text style={this.styles.companyName}>{this.serviceProvider.name}</Text>\n                </View>\n                <View style={this.styles.horizontalLine}/>\n                <View style={this.styles.payRateContainer}>\n                    <Text style={this.styles.payRate}>${this.serviceProvider.payRate} / hour</Text>\n                    <Text style={this.styles.starting}> starting cost</Text>\n                </View>\n            </View>\n        );\n    }\n\n    renderError () {\n        const {errorMsg, errorCheck} = this.state;\n        return <View style={{alignSelf:'center'}}>\n            <HelperText \n                type='error' \n                visible={errorCheck} \n                style={this.styles.errorStyle}>\n                    {errorMsg}\n            </HelperText>\n        </View>;\n    }\n\n    renderBody() {\n        const {founded, email, phoneNum, contractLic, skills} = this.serviceProvider;\n        const dateFounded = new Date(this.serviceProvider.founded);\n        console.log(`Render Body ${email}`);\n        console.log(this.serviceProvider);\n\n        return (\n            <View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{preferredProviderStrings.overview}</Text>\n                    <Text style={this.styles.detailText}>Founded: {dateFounded.toDateString()}</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{preferredProviderStrings.companyEmail}</Text>\n                    <Text style={this.styles.detailText}>{this.serviceProvider.email}</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{preferredProviderStrings.phoneNum}</Text>\n                    <Text style={this.styles.detailText}>{this.serviceProvider.phoneNum} Repair</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{preferredProviderStrings.license}</Text>\n                    <Text style={this.styles.detailText}>#{this.serviceProvider.contractLic}</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{preferredProviderStrings.skills}</Text>\n                    <Text style={this.styles.detailText}>{this.serviceProvider.skills}</Text>\n                </View>\n            </View>            \n        );\n    }\n\n    render() {\n        const {navigation} = this.props;\n        const showCloseButton = true;\n        return(\n                <>\n                <ScrollView style={this.styles.scrollStyle}\n                contentContainerStyle={this.styles.scrollContentContainerStyle}\n                showsHorizontalScrollIndicator={false}>\n                    <Card\n                        containerStyle={this.styles.cardContainer}\n                        showCloseButton={showCloseButton}\n                        closeButtonStyle={this.styles.closeButton}\n                        title={preferredProviderStrings.title} \n                        closeButtonPressedCallBack={() => navigation.goBack()} \n                        titleStyle={this.styles.cardTitle}\n                        titleContainerStyle={this.styles.cardTitleContainer}\n                        wrapperStyle={this.styles.cardWrapperStyle}\n                        >\n                        {this.renderHeader()}\n                        {this.renderBody()}\n                        <ThinButton\n                            name={this.submitButton.name}\n                            onClick={this.submitButton.onClick}\n                            buttonStyle={this.submitButton.buttonStyle}\n                            buttonTextStyle={this.submitButton.buttonTextStyle}\n                            containerStyle={this.submitButton.containerStyle}\n                        />\n                    </Card>\n                </ScrollView>\n            </>\n       );\n    }\n}\n\n","import React from 'react';\nimport {Platform, StyleSheet, Dimensions} from 'react-native';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions } from 'homepairs-types';\n\n\nexport default function setInputStyles(){\n    const {width} = Dimensions.get('window');\n    const colors = BaseStyles.LightColorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        subContainer: {\n            marginBottom: '3.5%',\n            paddingTop: 1,\n            paddingHorizontal: 3,\n            borderRadius: 4,\n            width: '100%',\n            opacity: 50,\n        },\n        modalContainer: {\n            flex:1, // Might break on mobile devices \n            maxWidth: HomePairsDimensions.MAX_PALLET,\n            width: Platform.OS === 'web' ? width : BaseStyles.ContentWidth.max,\n            alignSelf: 'center',\n        },\n        scrollStyle: {\n            width: '100%',\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.reg,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: 1, // Needed to center the contents of the scroll container\n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n        },\n        cardTitle: {\n            color: 'white',\n            fontFamily: 'nunito-regular',\n            fontSize: 20,\n            alignSelf: 'center',\n        },\n        cardTitleContainer: {\n            borderTopRightRadius: 7,\n            borderTopLeftRadius: 7,\n            width: BaseStyles.ContentWidth.max,\n            backgroundColor: colors.primary, \n            paddingVertical: BaseStyles.MarginPadding.largeConst,\n            paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n            alignSelf: 'center',\n            justifyContent: 'flex-start',\n        },\n        cardWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginTop: BaseStyles.MarginPadding.small,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        errorStyle: {\n            fontFamily: BaseStyles.FontTheme.secondary, \n            fontSize: 16,\n        },\n        closeButton: {\n            flex:1,\n            fontSize: 20,\n            color: colors.secondary, \n            fontFamily: BaseStyles.FontTheme.primary,\n        },\n        detailText: {\n            fontSize: BaseStyles.FontTheme.reg + 2, \n            fontFamily: BaseStyles.FontTheme.primary, \n        },\n        horizontalLine: {\n            alignSelf: 'center',\n            marginVertical: BaseStyles.MarginPadding.mediumConst,\n            width: 80,\n            borderBottomWidth: 3, \n            borderBottomColor: colors.primary,\n        },\n        payRateContainer: {\n            flexDirection: 'row', \n            justifyContent: 'center',\n        },\n        payRate: {\n            alignSelf: 'baseline',\n            color: colors.primary, \n            fontSize: BaseStyles.FontTheme.reg, \n            fontFamily: BaseStyles.FontTheme.primary,\n            fontWeight: 'bold',\n        }, \n        starting: {\n            alignSelf: 'baseline',\n            color: colors.lightGray,\n            fontSize: BaseStyles.FontTheme.small, \n            fontFamily: BaseStyles.FontTheme.primary,\n        },\n        companyName: {\n            alignSelf: 'center', \n            fontSize: 22, \n            fontFamily: BaseStyles.FontTheme.secondary, \n            fontWeight: 'bold',\n            color: BaseStyles.LightColorTheme.gray,\n        },\n        companyImage: {\n            alignSelf: 'center',\n            marginVertical: 17,\n            width: 200,\n            height: 200,\n        },\n        tileContainer: {\n            maxHeight: 200,\n            alignSelf: 'center', \n            marginVertical: 19,\n        },\n    });\n}","import { fetchPropertyAppliancesAndTenants } from 'homepairs-endpoints';\nimport { storePropertyApplianceAndTenants } from 'homepairs-redux-actions';\nimport { connect } from 'react-redux';\n\n\nexport type DetailedPropertyMutatorDispatchProps = {\n    setAppliancesAndTenants: (propId: string) => any\n}\n\nexport const DetailedPropertyDispatchProps: (\n    dispatch: any\n) => DetailedPropertyMutatorDispatchProps = dispatch => ({\n    // Calls an api requesst from the backend and then updates the store \n    setAppliancesAndTenants: async (propId: string) => {\n        await fetchPropertyAppliancesAndTenants(propId).then(response => {\n            const {tenants, appliances} = response;\n            dispatch(storePropertyApplianceAndTenants(tenants,appliances));\n        }).catch(error => {console.log(error);});\n    },\n});\n\nexport const DetailedPropertyMutatorModal = (SmartComponent: any) => connect(\n    null,\n    DetailedPropertyDispatchProps,\n)(SmartComponent);","import React from \"react\";\nimport { ScrollView, StyleSheet, SafeAreaView, Platform, StatusBar, Dimensions, View } from \"react-native\";\nimport {ThinButton, Card, InputForm, InputFormProps } from 'src/elements';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, TenantInfo} from 'homepairs-types';\nimport { isEmailSyntaxValid, isAlphaCharacterOnly, isPhoneNumberValid } from 'src/utility';\nimport {navigationPages, prepareNavigationHandlerComponent, NavigationRouteScreenProps} from 'src/routes';\nimport { updateTenant } from \"homepairs-endpoints\";\nimport { DetailedPropertyMutatorDispatchProps, DetailedPropertyMutatorModal } from '../CommonDispatchProps';\n\nconst {SingleProperty} = navigationPages;\n\ntype Props =  NavigationRouteScreenProps & DetailedPropertyMutatorDispatchProps;\n\ntype EditTenantState = TenantInfo\n\n// Needed to maintain the proper size of each modal. \nfunction setInputStyles(){\n    const {width} = Dimensions.get('window');\n    const colors = BaseStyles.LightColorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        input: {\n                alignItems: 'center',\n                alignSelf: 'center',\n                margin: BaseStyles.MarginPadding.xsmallConst,\n                minWidth:40,\n                width: BaseStyles.ContentWidth.max,\n                height: 40,\n                color: colors.lightGray,\n                borderColor: colors.lightGray,\n                borderWidth: 1,\n                borderRadius: BaseStyles.BorderRadius.small,\n                paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n        },\n        modalContainer: {\n            flex: 1,\n            maxWidth: HomePairsDimensions.MAX_PALLET,\n            width: Platform.OS === 'web' ? width : BaseStyles.ContentWidth.max,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf:'center',\n        },\n        scrollStyle: {\n            marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n            alignSelf: 'center',\n            width: '100%',\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.reg,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: 1, // Needed to center the contents of the scroll container\n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n        },\n        cardTitle: {\n            color: colors.tertiary,\n            fontFamily: 'nunito-regular',\n            fontSize: 20,\n        },\n        cardTitleContainer: {\n            width: BaseStyles.ContentWidth.max,\n            borderBottomColor: '#AFB3B5',\n            paddingVertical: BaseStyles.MarginPadding.largeConst,\n            paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n            borderBottomWidth: 1,\n            alignSelf: 'center',\n            maxHeight: 75,\n            minHeight: 50,\n            justifyContent: 'flex-start',\n        },\n        cardWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'center',\n        },\n        editTenantButtonStyle: {\n            alignItems: 'center',\n            backgroundColor: BaseStyles.LightColorTheme.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: BaseStyles.LightColorTheme.primary,\n        },\n        editTenantButtonTextStyle: {\n            color: BaseStyles.LightColorTheme.primary, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        removeTenantButtonStyle: {\n            alignItems: 'center',\n            backgroundColor: BaseStyles.LightColorTheme.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: BaseStyles.LightColorTheme.red,\n        },\n        removeTenantButtonTextStyle: {\n            color: BaseStyles.LightColorTheme.red, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        editButtonContainerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            marginRight: BaseStyles.MarginPadding.mediumConst,\n            minHeight: 50,\n            width: '90%',\n        },\n        removeButtonContainerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            marginLeft: BaseStyles.MarginPadding.mediumConst,\n            minHeight: 50,\n            width: '90%',\n        },\n        \n    });\n};\n\n\nexport class EditTenantModalBase extends React.Component<Props, EditTenantState> {\n    styles;\n\n    firstNameRef;\n\n    lastNameRef;\n\n    emailRef;\n\n    phoneNumberRef;\n\n    currentTenant: TenantInfo;\n\n    propId : number;\n  \n    constructor(props: Readonly<Props>) {\n        super(props);\n        this.styles = setInputStyles(null);\n        this.getFormFirstName = this.getFormFirstName.bind(this);\n        this.getFormLastName = this.getFormLastName.bind(this);\n        this.getFormEmail = this.getFormEmail.bind(this);\n        this.getFormPhoneNumber = this.getFormPhoneNumber.bind(this);\n        this.goBackToPreviousPage = this.goBackToPreviousPage.bind(this);\n        this.resetForms = this.resetForms.bind(this);\n        this.setInitialState = this.setInitialState.bind(this);\n        this.currentTenant = props.navigation.getParam('tenant');\n        this.propId = props.navigation.getParam('propId');\n        const {firstName, lastName, email, phoneNumber} = this.currentTenant;\n        this.state = {\n            firstName, \n            lastName, \n            email, \n            phoneNumber, \n        };\n        this.firstNameRef = React.createRef();\n        this.lastNameRef = React.createRef();\n        this.emailRef = React.createRef();\n        this.phoneNumberRef = React.createRef();\n    } \n  \n    getFormFirstName(firstName : string) {\n        this.setState({firstName});\n    }\n\n    getFormLastName(lastName : string) {\n        this.setState({lastName});\n    }\n\n    getFormEmail(email : string) {\n        this.setState({email});\n    }\n\n    getFormPhoneNumber(phoneNumber: string) {\n        this.setState({phoneNumber});\n    }\n\n    goBackToPreviousPage() {\n        const {navigation} = this.props;\n        navigation.resolveModalReplaceNavigation(SingleProperty, {propId: this.propId});\n    }\n\n    setInitialState() {\n        const {firstName, lastName, email, phoneNumber} = this.currentTenant;\n        this.setState({\n            firstName,\n            lastName,\n            email,\n            phoneNumber,\n        });\n    }\n\n    validateForms() {\n        const {firstName, lastName, email, phoneNumber} = this.state;\n        let check = true;\n        if (!isAlphaCharacterOnly(firstName)) {\n            this.firstNameRef.current.setError(true);\n            check = false;\n        } \n        if (!isAlphaCharacterOnly(lastName)) {\n            this.lastNameRef.current.setError(true);\n            check = false;\n        } \n        if (!isEmailSyntaxValid(email)) {\n            this.emailRef.current.setError(true);\n            check = false;\n        } \n        if (!isPhoneNumberValid(phoneNumber)) {\n            this.phoneNumberRef.current.setError(true);\n            check = false;\n        } \n        return check;\n    }\n\n    generateNewTenantInfo(){\n        const {firstName, lastName, email, phoneNumber} = this.state;\n        const newTenantInfo : TenantInfo = {\n            firstName,\n            lastName,\n            email,\n            phoneNumber,\n        };\n        return newTenantInfo;\n    }\n\n    resetForms() {\n        this.firstNameRef.current.setError(false);\n        this.lastNameRef.current.setError(false);\n        this.emailRef.current.setError(false);\n        this.phoneNumberRef.current.setError(false);\n    }\n\n    async clickSubmitButton() {\n        this.resetForms();\n        const {setAppliancesAndTenants} = this.props;\n        if (this.validateForms()) {\n            const newTenantInfo : TenantInfo = this.generateNewTenantInfo();\n            const postValues = {propId: this.propId, ...newTenantInfo};\n            await updateTenant(postValues).then(() => {\n                setAppliancesAndTenants(String(this.propId));\n            }); \n            this.goBackToPreviousPage();\n        };\n    }\n\n    clickRemoveButton() {\n        this.resetForms();\n        alert('We need the backend to create the endpoint in order to remove this tenant');\n        this.goBackToPreviousPage();\n    }\n\n    renderInputForms() {\n        const {firstName, lastName, email, phoneNumber } = this.state;\n        const inputForms: InputFormProps[]  = [\n            {\n                ref: this.firstNameRef,\n                key: 'FIRST NAME',\n                name: 'FIRST NAME',\n                parentCallBack: this.getFormFirstName,\n                formTitleStyle: this.styles.formTitle,\n                inputStyle: this.styles.input,\n                value: firstName,\n                errorMessage: 'Tenant must have a first name.',\n            }, \n            {\n                ref: this.lastNameRef,\n                key: 'LAST NAME',\n                name: 'LAST NAME',\n                parentCallBack: this.getFormLastName,\n                formTitleStyle: this.styles.formTitle,\n                inputStyle: this.styles.input,\n                value: lastName,\n                errorMessage: 'Tenant must have a last name.',\n            }, \n            {\n                ref: this.emailRef,\n                key: 'EMAIL',\n                name: 'EMAIL',\n                parentCallBack: this.getFormEmail,\n                formTitleStyle: this.styles.formTitle,\n                inputStyle: this.styles.input,\n                value: email, \n                errorMessage: 'Tenant must have an email.',\n            }, \n            {\n                ref: this.phoneNumberRef,\n                key: 'PHONE NUMBER',\n                name: 'PHONE NUMBER',\n                parentCallBack: this.getFormPhoneNumber,\n                formTitleStyle: this.styles.formTitle,\n                inputStyle: this.styles.input,\n                value: phoneNumber,\n                errorMessage: 'Tenant must have a phone number',\n            }, \n        ];\n\n        return inputForms.map(inputFormProp => {\n            const {ref, key, name, parentCallBack, formTitleStyle, inputStyle, errorMessage, \n                secureTextEntry, errorStyle, value, placeholder} = inputFormProp;\n            return <InputForm\n                        ref={ref}\n                        key={key}\n                        name={name}\n                        parentCallBack={parentCallBack}\n                        formTitleStyle={formTitleStyle}\n                        inputStyle={inputStyle}\n                        errorStyle={errorStyle}\n                        secureTextEntry={secureTextEntry}\n                        value={value}\n                        placeholder={placeholder}\n                        errorMessage={errorMessage}/>;\n        });\n    }\n\n    renderThinButtons() {\n        return (\n            <View style={{flexDirection: 'row', width: '100%', justifyContent: 'center', alignSelf: 'center', marginBottom: 40}}>\n                <View style={{flex: 1}}>\n                <ThinButton \n                    name='Save'\n                    onClick={() => {this.clickSubmitButton();}} \n                    buttonStyle={this.styles.editTenantButtonStyle}\n                    buttonTextStyle={this.styles.editTenantButtonTextStyle}\n                    containerStyle={{marginLeft: 3, width: '90%'}}\n                    />\n                </View>\n                <View style={{flex: 1}}>\n                <ThinButton \n                    name='Remove'\n                    onClick={() => {this.clickRemoveButton();}} \n                    buttonStyle={this.styles.removeTenantButtonStyle}\n                    buttonTextStyle={this.styles.removeTenantButtonTextStyle}\n                    containerStyle={{ marginRight: 6, width: '90%', alignSelf:'flex-end'}}\n                    />\n                </View>\n            </View>\n        );\n    }\n    \n    render() {\n        const showCloseButton = true;\n        const {navigation} = this.props;\n        return(\n            <SafeAreaView style={this.styles.modalContainer}>\n            <ScrollView style={this.styles.scrollStyle}\n            contentContainerStyle={this.styles.scrollContentContainerStyle}\n            showsHorizontalScrollIndicator={false}>\n                <Card\n                    containerStyle={this.styles.cardContainer}\n                    showCloseButton={showCloseButton}\n                    titleStyle={this.styles.cardTitle}\n                    titleContainerStyle={this.styles.cardTitleContainer}\n                    wrapperStyle={this.styles.cardWrapperStyle}\n                    title='Edit Tenant'\n                    closeButtonPressedCallBack={() => {\n                        navigation.goBack();\n                        this.setInitialState();\n                        this.resetForms();\n                    }}\n                    >\n                    <>{this.renderInputForms()}</>\n                    {this.renderThinButtons()}\n                </Card>\n            </ScrollView>\n        </SafeAreaView>);\n    }\n}\n\nconst EditTenantModal = DetailedPropertyMutatorModal(EditTenantModalBase);\nexport default prepareNavigationHandlerComponent(EditTenantModal);","import React from \"react\";\nimport { ScrollView, StyleSheet, SafeAreaView, Platform, StatusBar, Dimensions} from \"react-native\";\nimport {ThinButton, Card, InputForm, InputFormProps } from 'src/elements';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, TenantInfo } from 'homepairs-types';\nimport { isEmailSyntaxValid, isAlphaCharacterOnly, isPhoneNumberValid } from 'src/utility';\nimport { updateTenant } from \"homepairs-endpoints\";\nimport { navigationPages, NavigationRouteScreenProps, prepareNavigationHandlerComponent } from 'src/routes';\nimport { DetailedPropertyMutatorDispatchProps, DetailedPropertyMutatorModal } from '../CommonDispatchProps';\n\n\nconst {SingleProperty} = navigationPages;\n\ntype Props =  NavigationRouteScreenProps & DetailedPropertyMutatorDispatchProps ;\n\ntype AddTenantState = TenantInfo\n\nfunction setInputStyles(){\n    const {width} = Dimensions.get('window');\n    const colors = BaseStyles.LightColorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        input: {\n                alignItems: 'center',\n                alignSelf: 'center',\n                margin: BaseStyles.MarginPadding.xsmallConst,\n                minWidth:40,\n                width: BaseStyles.ContentWidth.max,\n                height: 40,\n                color: colors.lightGray,\n                borderColor: colors.lightGray,\n                borderWidth: 1,\n                borderRadius: BaseStyles.BorderRadius.small,\n                paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n        },\n        modalContainer: {\n            flex: 1,\n            maxWidth: HomePairsDimensions.MAX_PALLET,\n            width: Platform.OS === 'web' ? width : BaseStyles.ContentWidth.max,\n            alignSelf:'center',\n        },\n        scrollStyle: {\n            marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n            alignSelf: 'center',\n            width: '100%',\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.reg,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: Platform.OS === 'web' ? null : 1, // Needed to center the contents of the scroll container\n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n        },\n        cardTitle: {\n            color: colors.tertiary,\n            fontFamily: 'nunito-regular',\n            fontSize: 20,\n        },\n        cardTitleContainer: {\n            width: BaseStyles.ContentWidth.max,\n            borderBottomColor: '#AFB3B5',\n            paddingVertical: BaseStyles.MarginPadding.largeConst,\n            paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n            borderBottomWidth: 1,\n            alignSelf: 'center',\n            maxHeight: 75,\n            minHeight: 50,\n            justifyContent: 'flex-start',\n        },\n        cardWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginTop: BaseStyles.MarginPadding.small,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        editTenantButtonStyle: {\n            alignItems: 'center',\n            backgroundColor: BaseStyles.LightColorTheme.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: BaseStyles.LightColorTheme.primary,\n        },\n        editTenantButtonTextStyle: {\n            color: BaseStyles.LightColorTheme.primary, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        removeTenantButtonStyle: {\n            alignItems: 'center',\n            backgroundColor: BaseStyles.LightColorTheme.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: BaseStyles.LightColorTheme.red,\n        },\n        removeTenantButtonTextStyle: {\n            color: BaseStyles.LightColorTheme.red, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        buttonContainerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n        \n    });\n};\n\n\nexport class AddTenantModalBase extends React.Component<Props, AddTenantState> {\n    firstNameRef;\n\n    lastNameRef;\n\n    emailRef;\n\n    phoneNumberRef;\n\n    propId : number;\n  \n    styles;\n\n    constructor(props: Readonly<Props>) {\n        super(props);\n        this.styles = setInputStyles();\n        this.getFormFirstName = this.getFormFirstName.bind(this);\n        this.getFormLastName = this.getFormLastName.bind(this);\n        this.getFormEmail = this.getFormEmail.bind(this);\n        this.getFormPhoneNumber = this.getFormPhoneNumber.bind(this);\n        this.goBackToPreviousPage = this.goBackToPreviousPage.bind(this);\n        this.resetForms = this.resetForms.bind(this);\n        this.propId = props.navigation.getParam('propId');\n        this.state = {\n            firstName : '', \n            lastName: '', \n            email: '', \n            phoneNumber: '', \n        };\n        this.firstNameRef = React.createRef();\n        this.lastNameRef = React.createRef();\n        this.emailRef = React.createRef();\n        this.phoneNumberRef = React.createRef();\n    } \n\n    getFormFirstName(firstName : string) {\n        this.setState({firstName});\n    }\n\n    getFormLastName(lastName : string) {\n        this.setState({lastName});\n    }\n\n    getFormEmail(email : string) {\n        this.setState({email});\n    }\n\n    getFormPhoneNumber(phoneNumber: string) {\n        this.setState({phoneNumber});\n    }\n\n    goBackToPreviousPage() {\n        const{navigation} = this.props;\n        navigation.resolveModalReplaceNavigation(SingleProperty, {propId: this.propId});\n    }\n\n    generateNewTenantInfo(){\n        const {firstName, lastName, email, phoneNumber} = this.state;\n        const newTenantInfo : TenantInfo = {\n            firstName,\n            lastName,\n            email,\n            phoneNumber,\n        };\n        return newTenantInfo;\n    }\n\n    validateForms() {\n        const {firstName, lastName, email, phoneNumber} = this.state;\n        let check = true;\n        if (!isAlphaCharacterOnly(firstName)) {\n            this.firstNameRef.current.setError(true);\n            check = false;\n        } \n        if (!isAlphaCharacterOnly(lastName)) {\n            this.lastNameRef.current.setError(true);\n            check = false;\n        } \n        if (!isEmailSyntaxValid(email)) {\n            this.emailRef.current.setError(true);\n            check = false;\n        } \n        if (!isPhoneNumberValid(phoneNumber)) {\n            this.phoneNumberRef.current.setError(true);\n            check = false;\n        } \n        return check;\n    }\n\n    resetForms() {\n        this.firstNameRef.current.setError(false);\n        this.lastNameRef.current.setError(false);\n        this.emailRef.current.setError(false);\n        this.phoneNumberRef.current.setError(false);\n    }\n\n    async clickSubmitButton() {\n        const {setAppliancesAndTenants} = this.props;\n        this.resetForms();\n        if (this.validateForms()) {\n            const newTenantInfo : TenantInfo = this.generateNewTenantInfo();\n            const postValues = {propId: this.propId, ...newTenantInfo};\n            await updateTenant(postValues).then(() => {\n                setAppliancesAndTenants(String(this.propId));\n            }); \n            this.goBackToPreviousPage();\n        }; \n    }\n\n    renderInputForms() {\n        const inputForms: InputFormProps[]  = [\n            {\n                ref: this.firstNameRef,\n                key: 'FIRST NAME',\n                name: 'FIRST NAME',\n                parentCallBack: this.getFormFirstName,\n                formTitleStyle: this.styles.formTitle,\n                inputStyle: this.styles.input,\n                errorMessage: 'Tenant must have a first name.',\n            }, \n            {\n                ref: this.lastNameRef,\n                key: 'LAST NAME',\n                name: 'LAST NAME',\n                parentCallBack: this.getFormLastName,\n                formTitleStyle: this.styles.formTitle,\n                inputStyle: this.styles.input,\n                errorMessage: 'Tenant must have a last name.',\n            }, \n            {\n                ref: this.emailRef,\n                key: 'EMAIL',\n                name: 'EMAIL',\n                parentCallBack: this.getFormEmail,\n                formTitleStyle: this.styles.formTitle,\n                inputStyle: this.styles.input,\n                errorMessage: 'Tenant must have an email.',\n            }, \n            {\n                ref: this.phoneNumberRef,\n                key: 'PHONE NUMBER',\n                name: 'PHONE NUMBER',\n                parentCallBack: this.getFormPhoneNumber,\n                formTitleStyle: this.styles.formTitle,\n                inputStyle: this.styles.input,\n                errorMessage: 'Tenant must have a phone number',\n            }, \n        ];\n\n        return inputForms.map(inputFormProp => {\n            const {ref, key, name, parentCallBack, formTitleStyle, inputStyle, errorMessage, \n                secureTextEntry, errorStyle, value, placeholder} = inputFormProp;\n            return <InputForm\n                        ref={ref}\n                        key={key}\n                        name={name}\n                        parentCallBack={parentCallBack}\n                        formTitleStyle={formTitleStyle}\n                        inputStyle={inputStyle}\n                        errorStyle={errorStyle}\n                        secureTextEntry={secureTextEntry}\n                        value={value}\n                        placeholder={placeholder}\n                        errorMessage={errorMessage}/>;\n        });\n    }\n\n    render() {\n        const showCloseButton = true;\n        return(\n            <SafeAreaView style={this.styles.modalContainer}>\n            <ScrollView style={this.styles.scrollStyle}\n            contentContainerStyle={this.styles.scrollContentContainerStyle}\n            showsHorizontalScrollIndicator={false}>\n                <Card\n                    containerStyle={this.styles.cardContainer}\n                    showCloseButton={showCloseButton}\n                    titleStyle={this.styles.cardTitle}\n                    titleContainerStyle={this.styles.cardTitleContainer}\n                    wrapperStyle={this.styles.cardWrapperStyle}\n                    title='Add Tenant'\n                    closeButtonPressedCallBack={() => {\n                        this.goBackToPreviousPage();\n                        this.resetForms();\n                    }}\n                    >\n                    <>{this.renderInputForms()}</>\n                    <ThinButton \n                        name='Add'\n                        onClick={() => {this.clickSubmitButton();}} \n                        buttonStyle={this.styles.editTenantButtonStyle}\n                        buttonTextStyle={this.styles.editTenantButtonTextStyle}\n                        containerStyle={this.styles.buttonContainerStyle}/>\n                </Card>\n            </ScrollView>\n        </SafeAreaView>);\n    }\n}\n\nconst AddTenantModal = DetailedPropertyMutatorModal(AddTenantModalBase);\nexport default prepareNavigationHandlerComponent(AddTenantModal);","import React from \"react\";\nimport { ScrollView, StyleSheet, StatusBar, Platform, View, Dimensions } from 'react-native';\nimport { ThinButton, ThinButtonProps, Card, InputFormProps, InputForm, GoogleInputForm } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, Property, AddNewPropertyState } from 'homepairs-types';\nimport Colors from 'homepairs-colors';\nimport {isPositiveWholeNumber, isEmptyOrSpaces, isNullOrUndefined } from 'src/utility';\nimport { navigationPages, NavigationRouteHandler, PROPERTY_LIST } from 'src/routes';\nimport {HelperText} from 'react-native-paper';\nimport {FontTheme} from 'homepairs-base-styles';\n\nexport type AddNewPropertyDispatchProps = {\n    onCreateProperty: (newProperty: Property, info: AddNewPropertyState, setInitialState: () => void, \n         displayError: (msg: string) => void, navigation: NavigationRouteHandler) => void\n}\n\ntype Props = AddNewPropertyDispatchProps &\n    AddNewPropertyState & {\n        navigation: NavigationRouteHandler,\n    };\n\ntype CreateState = {\n    address: string, \n    bedrooms: string, \n    bathrooms: string, \n    tenants: string,\n    errorMsg: string,\n    errorCheck: boolean,\n};\n\nconst addPropertyStrings = strings.propertiesPage.addProperty;\nconst inputFormStrings = addPropertyStrings.inputForm;\n\nconst initialState : CreateState = {\n    address: '', \n    bedrooms: '', \n    bathrooms: '',\n    tenants: '',\n    errorMsg: '',\n    errorCheck: false,\n};\n\nfunction setInputStyles(colorTheme?: BaseStyles.ColorTheme){\n    const {width} = Dimensions.get('window');\n    const colors = isNullOrUndefined(colorTheme) ? BaseStyles.LightColorTheme : colorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        input: {\n            alignItems: 'center',\n            alignSelf: 'center',\n            margin: BaseStyles.MarginPadding.xsmallConst,\n            minWidth: 40,\n            width: BaseStyles.ContentWidth.max,\n            height: 40,\n            color: colors.lightGray,\n            borderColor: colors.lightGray,\n            borderWidth: 1,\n            borderRadius: BaseStyles.BorderRadius.small,\n            paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n        },\n        modalContainer: {\n            flex:1,\n            maxWidth: HomePairsDimensions.MAX_PALLET,\n            width: Platform.OS === 'web' ? width : BaseStyles.ContentWidth.max,\n            alignSelf: 'center',\n        },\n        scrollStyle: {\n            flex:1,\n            marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n            width: '100%',\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.reg,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: Platform.OS === 'web' ? null : 1, // Needed to be able to scroll the contents of the view in mobile\n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n            flex: 1,\n        },\n        cardTitle: {\n            color: colors.tertiary,\n            fontFamily: 'nunito-regular',\n            fontSize: 20,\n        },\n        cardTitleContainer: {\n            width: BaseStyles.ContentWidth.max,\n            borderBottomColor: '#AFB3B5',\n            paddingVertical: BaseStyles.MarginPadding.largeConst,\n            paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n            borderBottomWidth: 1,\n            alignSelf: 'center',\n            justifyContent: 'flex-start',\n        },\n        cardWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginTop: BaseStyles.MarginPadding.small,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        errorStyle: {\n            fontFamily: FontTheme.secondary, \n            fontSize: 16,\n        },\n    });\n}\n\n\nexport default class AddNewPropertyModalBase extends React.Component<Props,CreateState> {\n    inputFormStyle;\n\n    addressRef;\n\n    bedRef;\n\n    bathRef;\n\n    tenantRef;\n\n    submitButton : ThinButtonProps = {\n        name: addPropertyStrings.button, \n        onClick: () => {this.clickSubmitButton();}, \n        buttonStyle: {\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: Colors.LightModeColors.blueButton,\n        },\n        buttonTextStyle: {\n            color: Colors.LightModeColors.blueButtonText, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n    };\n\n    constructor(props: Readonly<Props>) {\n        super(props);\n        this.inputFormStyle = setInputStyles(null);\n        this.getFormAddress = this.getFormAddress.bind(this);\n        this.getFormNumBed = this.getFormNumBed.bind(this);\n        this.getFormNumBath = this.getFormNumBath.bind(this);\n        this.getFormMaxTenants = this.getFormMaxTenants.bind(this);\n        this.setInitialState = this.setInitialState.bind(this);\n        this.resetForms = this.resetForms.bind(this);\n        this.displayError = this.displayError.bind(this);\n        this.state = initialState;\n        this.addressRef = React.createRef();\n        this.bedRef = React.createRef();\n        this.bathRef = React.createRef();\n        this.tenantRef = React.createRef();\n    }\n\n    getFormAddress(childData : string) {\n        this.setState({address: childData});\n    }\n\n    getFormNumBed(childData : string) {\n        this.setState({bedrooms: childData});\n    }\n\n    getFormNumBath(childData : string) {\n        this.setState({bathrooms: childData});\n    }\n\n    getFormMaxTenants(childData: string) {\n        this.setState({tenants: childData});\n    }\n\n    setInitialState() {\n        this.setState(initialState);\n    }\n\n    validateForms() {\n        const {address, bedrooms, bathrooms, tenants} = this.state;\n        let check = true;\n        if (isEmptyOrSpaces(address)) {\n            this.addressRef.current.setError(true);\n            check = false;\n        } \n        if (!isPositiveWholeNumber(bedrooms) || isEmptyOrSpaces(bedrooms)) {\n            this.bedRef.current.setError(true);\n            check = false;\n        } \n        if (!isPositiveWholeNumber(bathrooms) || isEmptyOrSpaces(bathrooms)) {\n            this.bathRef.current.setError(true);\n            check = false;\n        }\n        if (!isPositiveWholeNumber(tenants) || isEmptyOrSpaces(tenants)) {\n            this.tenantRef.current.setError(true);\n            check = false;\n        }\n        return check;\n    }\n\n    resetForms() {\n        this.addressRef.current.setError(false);\n        this.tenantRef.current.setError(false);\n        this.bedRef.current.setError(false);\n        this.bathRef.current.setError(false);\n    }\n\n    displayError(msg: string) {\n        this.setState({errorMsg: msg, errorCheck: true});\n    }\n\n    goBackToPreviousPage(){\n        const {navigation} = this.props;\n        navigation.resolveModalReplaceNavigation(PROPERTY_LIST);\n    }\n\n    clickSubmitButton() {\n        const {address, tenants, bathrooms, bedrooms} = this.state;\n        const {email, navigation, onCreateProperty, roopairsToken} = this.props;\n        this.resetForms();\n        this.setState({errorCheck: false});\n        if (this.validateForms()) {\n            const newProperty : Property = {\n                propId: undefined,\n                address,\n                tenants: Number(tenants),\n                bedrooms: Number(bedrooms), \n                bathrooms: Number(bathrooms),\n            };\n            const info : AddNewPropertyState = {email, roopairsToken};\n            onCreateProperty(newProperty, info, this.setInitialState, \n                this.displayError, navigation);\n        }\n    }\n\n    renderInputForms() {\n        const { bedrooms, bathrooms, tenants} = this.state;\n        const inputForms: InputFormProps[]  = [\n            {\n                ref: this.tenantRef,\n                key: inputFormStrings.maxTenants,\n                name: inputFormStrings.maxTenants,\n                parentCallBack: this.getFormMaxTenants,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: tenants,\n                errorMessage: 'Tenants must be a number',\n            },\n            {\n                ref: this.bedRef,\n                key: inputFormStrings.bedrooms,\n                name: inputFormStrings.bedrooms,\n                parentCallBack: this.getFormNumBed,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: bedrooms,\n                errorMessage: 'Bedrooms must be a number',\n            }, \n            {\n                ref: this.bathRef,\n                key: inputFormStrings.bathrooms,\n                name: inputFormStrings.bathrooms,\n                parentCallBack: this.getFormNumBath,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: bathrooms,\n                errorMessage: 'Bathrooms must be a number',\n            }, \n        ];\n\n        return inputForms.map(inputFormProp => {\n            const {ref, key, name, parentCallBack, formTitleStyle, inputStyle,\n                errorMessage, secureTextEntry, errorStyle, value, placeholder } \n                = inputFormProp;\n            return <InputForm\n                        ref={ref}\n                        key={key}\n                        name={name}\n                        parentCallBack={parentCallBack}\n                        formTitleStyle={formTitleStyle}\n                        inputStyle={inputStyle}\n                        errorStyle={errorStyle}\n                        secureTextEntry={secureTextEntry}\n                        value={value}\n                        placeholder={placeholder}\n                        errorMessage={errorMessage}/>;\n        });\n    }\n\n    renderAddressForm() {\n        const {address} = this.state;\n\n        return (\n            <GoogleInputForm \n                ref={this.addressRef}\n                key={inputFormStrings.address}\n                name={inputFormStrings.address}\n                parentCallBack={this.getFormAddress}\n                formTitleStyle={this.inputFormStyle.formTitle}\n                inputStyle={this.inputFormStyle.input}\n                value={address}\n                errorMessage='Address cannot be empty'        \n            />\n        );\n    }\n\n    renderError () {\n        const {errorMsg, errorCheck} = this.state;\n        return <View style={{alignSelf:'center'}}>\n            <HelperText \n                type='error' \n                visible={errorCheck} \n                style={this.inputFormStyle.errorStyle}>\n                    {errorMsg}\n            </HelperText>\n        </View>;\n    }\n\n    render() {\n        const showCloseButton = true;\n        return(\n            <View style={this.inputFormStyle.modalContainer}>\n            <ScrollView style={this.inputFormStyle.scrollStyle}\n            contentContainerStyle={this.inputFormStyle.scrollContentContainerStyle}\n            showsHorizontalScrollIndicator={false}>\n                <Card\n                    containerStyle={this.inputFormStyle.cardContainer}\n                    showCloseButton={showCloseButton}\n                    title={addPropertyStrings.title} \n                    closeButtonPressedCallBack={() => { \n                        this.goBackToPreviousPage();\n                        this.setInitialState();\n                        this.resetForms();\n                    }} \n                    titleStyle={this.inputFormStyle.cardTitle}\n                    titleContainerStyle={this.inputFormStyle.cardTitleContainer}\n                    wrapperStyle={this.inputFormStyle.cardWrapperStyle}\n                    >\n                    <>{this.renderAddressForm()}</>\n                    <>{this.renderInputForms()}</>\n                    {this.renderError()}\n                    <ThinButton\n                    name={this.submitButton.name}\n                    onClick={this.submitButton.onClick}\n                    buttonStyle={this.submitButton.buttonStyle}\n                    buttonTextStyle={this.submitButton.buttonTextStyle}\n                    containerStyle={this.submitButton.containerStyle}\n                    />\n                </Card>\n            </ScrollView>\n        </View>);\n    }\n}\n","import { connect } from \"react-redux\";\nimport { Property, AppState, AddNewPropertyState, PropertyManagerAccount } from 'homepairs-types';\nimport { prepareNavigationHandlerComponent, NavigationRouteHandler } from 'src/routes';\nimport { postNewProperty } from 'homepairs-endpoints';\nimport  AddNewPropertyModalBase, { AddNewPropertyDispatchProps} from './AddNewPropertyModalBase';\n\nconst mapDispatchToProps : (dispatch: any) => AddNewPropertyDispatchProps = (dispatch: any) => ({\n    onCreateProperty: (newProperty: Property, info: AddNewPropertyState, setInitialState: () => void, \n         displayError: (msg: string) => void, navigation: NavigationRouteHandler) => \n    {\n        dispatch(postNewProperty(newProperty, info, setInitialState, displayError, navigation));\n    },\n});\n\nfunction mapStateToProps(state: AppState) : any {\n    console.log((state.accountProfile as PropertyManagerAccount).roopairsToken);\n    return {\n        email: state.accountProfile.email, \n        roopairsToken: (state.accountProfile as PropertyManagerAccount).roopairsToken,\n    };\n}\n\n\nconst ConnectedComponent = connect(\n  mapStateToProps, \n  mapDispatchToProps,\n  )(AddNewPropertyModalBase);\n\nexport default prepareNavigationHandlerComponent(ConnectedComponent);\n\n","import React from \"react\";\nimport { ScrollView, StyleSheet, SafeAreaView, Platform, StatusBar, Dimensions, View } from \"react-native\";\nimport {ThinButton, ThinButtonProps, Card, InputForm, GoogleInputForm, InputFormProps } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, Property, EditPropertyState } from 'homepairs-types';\nimport Colors from 'homepairs-colors';\nimport {HelperText} from 'react-native-paper';\nimport { isPositiveWholeNumber, isNullOrUndefined, isEmptyOrSpaces } from 'src/utility';\nimport {navigationPages, NavigationRouteScreenProps, NavigationRouteHandler} from 'homepairs-routes';\n\nconst {SingleProperty} = navigationPages;\n\nexport type EditPropertyDispatchProps = {\n    onEditProperty: (newProperty: Property, info: EditPropertyState, \n        displayError: (msg: string) => void, navigation: NavigationRouteHandler) => void\n}\n\n\ntype Props =  NavigationRouteScreenProps & EditPropertyDispatchProps & EditPropertyState;\n\ntype EditState = {\n    address: string, \n    bedrooms: string, \n    bathrooms: string, \n    tenants: string,\n    errorMsg: string,\n    errorCheck: boolean,\n};\n\n\nconst editPropertyStrings = strings.detailedPropertyPage.editProperty;\nconst inputFormStrings = editPropertyStrings.inputForm;\n\nfunction setInputStyles(colorTheme?: BaseStyles.ColorTheme){\n    const {width} = Dimensions.get('window');\n    const colors = isNullOrUndefined(colorTheme) ? BaseStyles.LightColorTheme : colorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        input: {\n             alignItems: 'center',\n             alignSelf: 'center',\n             margin: BaseStyles.MarginPadding.xsmallConst,\n             minWidth:40,\n             width: BaseStyles.ContentWidth.max,\n             height: 40,\n             color: colors.lightGray,\n             borderColor: colors.lightGray,\n             borderWidth: 1,\n             borderRadius: BaseStyles.BorderRadius.small,\n             paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n        },\n        modalContainer: {\n            flex: 1,\n            maxWidth: HomePairsDimensions.MAX_PALLET,\n            width: Platform.OS === 'web' ? width : BaseStyles.ContentWidth.max,\n            alignSelf:'center',\n        },\n        scrollStyle: {\n            marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n            flex: 1,\n            width: '100%',\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.reg,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: Platform.OS === 'web' ? null : 1, // Needed to center the contents of the scroll container\n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n        },\n        cardTitle: {\n            color: colors.tertiary,\n            fontFamily: 'nunito-regular',\n            fontSize: 20,\n        },\n        cardTitleContainer: {\n            width: BaseStyles.ContentWidth.max,\n            borderBottomColor: '#AFB3B5',\n            paddingVertical: BaseStyles.MarginPadding.largeConst,\n            paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n            borderBottomWidth: 1,\n            alignSelf: 'center',\n            maxHeight: 75,\n            minHeight: 50,\n            justifyContent: 'flex-start',\n        },\n        cardWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginTop: BaseStyles.MarginPadding.small,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        errorStyle: {\n            fontFamily: BaseStyles.FontTheme.secondary, \n            fontSize: 16,\n        },\n    });\n}\n\nexport default class EditNewPropertyModalBase extends React.Component<Props, EditState> {\n    inputFormStyle;\n\n    addressRef;\n\n    bedRef;\n\n    bathRef;\n\n    tenantRef;\n\n    oldProperty: Property;\n\n    submitButton : ThinButtonProps = {\n        name: editPropertyStrings.title, \n        onClick: () => {this.clickSubmitButton();}, \n        buttonStyle: {\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: Colors.LightModeColors.blueButton,\n        },\n        buttonTextStyle: {\n            color: Colors.LightModeColors.blueButtonText, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n    };\n\n    constructor(props: Readonly<Props>) {\n        super(props);\n        this.inputFormStyle = setInputStyles(null);\n        this.getFormAddress = this.getFormAddress.bind(this);\n        this.getFormNumBed = this.getFormNumBed.bind(this);\n        this.getFormNumBath = this.getFormNumBath.bind(this);\n        this.getFormMaxTenants = this.getFormMaxTenants.bind(this);\n        this.displayError = this.displayError.bind(this);\n        this.resetForms = this.resetForms.bind(this);\n        this.setInitialState = this.setInitialState.bind(this);\n        const {oldProp} = this.props;\n        const {address, bedrooms, bathrooms, tenants} = oldProp;\n        this.state = {\n            address, \n            bedrooms: bedrooms.toString(), \n            bathrooms: bathrooms.toString(),\n            tenants: tenants.toString(),\n            errorMsg: '',\n            errorCheck: false,\n        };\n        this.addressRef = React.createRef();\n        console.log(this.addressRef);\n        this.bedRef = React.createRef();\n        console.log(this.bedRef);\n        this.bathRef = React.createRef();\n        console.log(this.bathRef);\n        this.tenantRef = React.createRef();\n        console.log(this.tenantRef);\n    } \n\n    getFormAddress(childData : string) {\n        this.setState({address: childData});\n    }\n\n    getFormNumBed(childData : string) {\n        this.setState({bedrooms: childData});\n    }\n\n    getFormMaxTenants(childData: string) {\n        this.setState({tenants: childData});\n    }\n\n    getFormNumBath(childData: string) {\n        this.setState({bathrooms: childData});\n    } \n\n    goBackToPreviousPage() {\n        const{navigation} = this.props;\n        const propId = navigation.getParam('propId');\n        navigation.resolveModalReplaceNavigation(SingleProperty, {propId});\n    }\n\n    setInitialState() {\n        const {oldProp} = this.props;\n        const {address, bedrooms, bathrooms, tenants} = oldProp;\n        this.setState({\n            address,\n            bedrooms: bedrooms.toString(), \n            bathrooms: bathrooms.toString(),\n            tenants: tenants.toString(),\n        });\n    }\n\n    validateForms() {\n        const {address, bedrooms, bathrooms, tenants} = this.state;\n        let check = true;\n        if (isEmptyOrSpaces(address)) {\n            this.addressRef.current.setError(true);\n            check = false;\n        } \n        if (!isPositiveWholeNumber(bedrooms)) {\n            this.bedRef.current.setError(true);\n            check = false;\n        } \n        if (!isPositiveWholeNumber(bathrooms)) {\n            this.bathRef.current.setError(true);\n            check = false;\n        }\n        if (!isPositiveWholeNumber(tenants)) {\n            this.tenantRef.current.setError(true);\n            check = false;\n        }\n        return check;\n    }\n\n    resetForms() {\n        this.addressRef.current.setError(false);\n        this.tenantRef.current.setError(false);\n        this.bedRef.current.setError(false);\n        this.bathRef.current.setError(false);\n    }\n\n    displayError(msg: string) {\n        this.setState({errorMsg: msg, errorCheck: true});\n    }\n\n    clickSubmitButton() {\n        const {email, navigation, onEditProperty, propId, oldProp, roopairsToken} = this.props;\n        const {address, bedrooms, bathrooms, tenants} = this.state;\n        this.resetForms();\n        if (this.validateForms()) {\n            const newProperty : Property = {\n                propId: oldProp.propId,\n                address,\n                bedrooms: Number(bedrooms), \n                bathrooms: Number(bathrooms), \n                tenants: Number(tenants),\n            };\n            const info : EditPropertyState = { email, propId, oldProp, roopairsToken};\n            onEditProperty(newProperty, info, this.displayError, navigation);\n        } \n    }\n\n    renderInputForms() {\n        const {bedrooms, bathrooms, tenants} = this.state;\n        const inputForms: InputFormProps[]  = [ \n            {\n                ref: this.tenantRef,\n                key: inputFormStrings.maxTenants,\n                name: inputFormStrings.maxTenants,\n                parentCallBack: this.getFormMaxTenants,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: tenants,\n                errorMessage: 'Tenants must be a number',\n            },\n            {\n                ref: this.bedRef,\n                key: inputFormStrings.bedrooms,\n                name: inputFormStrings.bedrooms,\n                parentCallBack: this.getFormNumBed,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: bedrooms,\n                errorMessage: 'Bedrooms must be a number',\n            }, \n            {\n                ref: this.bathRef,\n                key: inputFormStrings.bathrooms,\n                name: inputFormStrings.bathrooms,\n                parentCallBack: this.getFormNumBath,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: bathrooms,\n                errorMessage: 'Bathrooms must be a number',\n            }, \n        ];\n\n        /**\n         * NOTE: As with AddNewProperty Modal I have also changed the EditPropertyModal to use the actual Inputform instead \n         * of the helper function. \n         */\n        return inputForms.map(inputFormProp => {\n            const {ref, key, name, parentCallBack, formTitleStyle, inputStyle,errorMessage, secureTextEntry, errorStyle, value, placeholder} = inputFormProp;\n            return <InputForm\n                        ref={ref}\n                        key={key}\n                        name={name}\n                        parentCallBack={parentCallBack}\n                        formTitleStyle={formTitleStyle}\n                        inputStyle={inputStyle}\n                        errorStyle={errorStyle}\n                        secureTextEntry={secureTextEntry}\n                        value={value}\n                        placeholder={placeholder}\n                        errorMessage={errorMessage}/>;\n        });\n    }\n\n    renderAddressForm() {\n        const {address} = this.state;\n        console.log(this.addressRef);\n        return (\n            <GoogleInputForm \n                ref={this.addressRef}\n                key={inputFormStrings.address}\n                name={inputFormStrings.address}\n                parentCallBack={this.getFormAddress}\n                formTitleStyle={this.inputFormStyle.formTitle}\n                inputStyle={this.inputFormStyle.input}\n                value={address}\n                errorMessage='Address cannot be empty'        \n            />\n        );\n    }\n\n    renderError () {\n        const {errorMsg, errorCheck} = this.state;\n        return <View style={{alignSelf:'center'}}>\n            <HelperText type='error' visible={errorCheck} style={this.inputFormStyle.errorStyle}>{errorMsg}</HelperText>\n        </View>;\n    }\n    \n    render() {\n        const showCloseButton = true;\n        return(\n            <SafeAreaView style={this.inputFormStyle.modalContainer}>\n            <ScrollView style={this.inputFormStyle.scrollStyle}\n            contentContainerStyle={this.inputFormStyle.scrollContentContainerStyle}\n            showsHorizontalScrollIndicator={false}>\n                <Card\n                    containerStyle={this.inputFormStyle.cardContainer}\n                    showCloseButton={showCloseButton}\n                    titleStyle={this.inputFormStyle.cardTitle}\n                    titleContainerStyle={this.inputFormStyle.cardTitleContainer}\n                    wrapperStyle={this.inputFormStyle.cardWrapperStyle}\n                    title={editPropertyStrings.title}\n                    closeButtonPressedCallBack={() => {\n                        this.goBackToPreviousPage();\n                        this.setInitialState();\n                        this.resetForms();\n                    }}>\n                    {this.renderAddressForm()}\n                    <>{this.renderInputForms()}</>\n                    {this.renderError()}\n                    <ThinButton\n                    name={this.submitButton.name}\n                    onClick={this.submitButton.onClick}\n                    buttonStyle={this.submitButton.buttonStyle}\n                    buttonTextStyle={this.submitButton.buttonTextStyle}\n                    containerStyle={this.submitButton.containerStyle}\n                    />\n                </Card>\n            </ScrollView>\n        </SafeAreaView>);\n    }\n}","import { connect } from \"react-redux\";\nimport { Property, AppState, EditPropertyState, PropertyManagerAccount } from 'homepairs-types';\nimport { prepareNavigationHandlerComponent, NavigationRouteHandler } from 'src/routes';\nimport { postUpdatedProperty } from 'homepairs-endpoints';\nimport EditPropertyModalBase, {EditPropertyDispatchProps} from './EditPropertyModalBase';\n\nconst mapDispatchToProps : (dispatch: any) => EditPropertyDispatchProps = (dispatch: any) => ({\n    onEditProperty: (editProperty: Property, info: EditPropertyState, displayError: (msg: string) => void, navigation: NavigationRouteHandler) => \n        {\n            dispatch(postUpdatedProperty(editProperty, info, displayError, navigation));\n        },\n});\n\nfunction mapStateToProps(state: AppState) : EditPropertyState {\n    const propId = state.properties.selectedPropertyId;\n    return {\n        email: state.accountProfile.email, \n        propId, \n        oldProp: state.properties.properties[propId],\n        roopairsToken: (state.accountProfile as PropertyManagerAccount).roopairsToken,\n    };\n}\n\nexport default prepareNavigationHandlerComponent(connect(\n    mapStateToProps, \n    mapDispatchToProps)(EditPropertyModalBase));\n","import React from \"react\";\nimport { ScrollView, StyleSheet, StatusBar, Platform, View, Dimensions, Text } from 'react-native';\nimport { ThinButton, ThinButtonProps, Card, InputFormProps, InputForm, ApplianceCategoryPanel } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, Appliance, AddApplianceState, ApplianceType } from 'homepairs-types';\nimport Colors from 'homepairs-colors';\nimport { isPositiveWholeNumber, isEmptyOrSpaces, isNullOrUndefined } from 'src/utility';\nimport { HelperText } from 'react-native-paper';\nimport { FontTheme } from 'homepairs-base-styles';\nimport { navigationPages, NavigationRouteScreenProps, prepareNavigationHandlerComponent } from 'src/routes';\nimport { postNewAppliance } from 'homepairs-endpoints';\nimport { DetailedPropertyMutatorDispatchProps, DetailedPropertyMutatorModal } from '../CommonDispatchProps';\n\n\n\nconst { SingleProperty } = navigationPages;\n\ntype AddApplianceModalDispatchProps = DetailedPropertyMutatorDispatchProps\n\ntype Props = NavigationRouteScreenProps & AddApplianceModalDispatchProps;\n\ntype CreateState = {\n    category: ApplianceType,\n    appName: string,\n    manufacturer: string,\n    modelNum: string,\n    serialNum: string,\n    location: string,\n    errorMsg: string,\n    errorCheck: boolean,\n};\n\nconst addApplianceStrings = strings.applianceInfo.applianceModal;\n\nconst initialState: CreateState = {\n    category: ApplianceType.None,\n    appName: '',\n    manufacturer: '',\n    modelNum: '',\n    serialNum: '',\n    location: '',\n    errorMsg: '',\n    errorCheck: false,\n};\n\nconst DefaultMessage: string = \"No appliance could be created for the property at this time. This may be a server issue.\";\n\nfunction setInputStyles(colorTheme?: BaseStyles.ColorTheme) {\n    const { width } = Dimensions.get('window');\n    const colors = isNullOrUndefined(colorTheme) ? BaseStyles.LightColorTheme : colorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        input: {\n            alignItems: 'center',\n            alignSelf: 'center',\n            margin: BaseStyles.MarginPadding.xsmallConst,\n            minWidth: 40,\n            width: BaseStyles.ContentWidth.max,\n            height: 40,\n            color: colors.lightGray,\n            borderColor: colors.lightGray,\n            borderWidth: 1,\n            borderRadius: BaseStyles.BorderRadius.small,\n            paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n        },\n        modalContainer: {\n            flex: 1,\n            maxWidth: HomePairsDimensions.MAX_PALLET,\n            width: Platform.OS === 'web' ? width : BaseStyles.ContentWidth.max,\n            alignSelf: 'center',\n        },\n        scrollStyle: {\n            flex: 1,\n            marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n            width: '100%',\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.reg,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: Platform.OS === 'web' ? null : 1, // Needed to center the contents of the scroll container for mobile \n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n            flex: 1,\n        },\n        cardTitle: {\n            color: colors.tertiary,\n            fontFamily: 'nunito-regular',\n            fontSize: 20,\n        },\n        cardTitleContainer: {\n            width: BaseStyles.ContentWidth.max,\n            borderBottomColor: '#AFB3B5',\n            paddingVertical: BaseStyles.MarginPadding.largeConst,\n            paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n            borderBottomWidth: 1,\n            alignSelf: 'center',\n            justifyContent: 'flex-start',\n        },\n        cardWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginTop: BaseStyles.MarginPadding.small,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        errorStyle: {\n            fontFamily: FontTheme.secondary,\n            fontSize: 16,\n        },\n        menuStyle: {\n            backgroundColor: colors.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.large,\n            borderRadius: BaseStyles.BorderRadius.large,\n            padding: BaseStyles.MarginPadding.large,\n            paddingTop: 10,\n            paddingBottom: 30,\n            width: BaseStyles.ContentWidth.thin,\n            alignSelf: 'center',\n            borderColor: colors.lightGray,\n            borderWidth: 1,\n            overflow: 'hidden',\n            marginBottom: 20,\n        },\n        titleText: {\n            fontSize: BaseStyles.FontTheme.reg,\n            fontFamily: 'nunito_regular',\n        },\n    });\n}\n\n\nexport class AddApplianceModalBase extends React.Component<Props, CreateState> {\n    inputFormStyle;\n\n    categoryRef;\n\n    nameRef;\n\n    manufacturerRef;\n\n    modelNumRef;\n\n    serialNumRef;\n\n    locationRef;\n\n    property;\n\n    token;\n\n    submitButton: ThinButtonProps = {\n        name: addApplianceStrings.add,\n        onClick: () => { this.clickSubmitButton(); },\n        buttonStyle: {\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: Colors.LightModeColors.blueButton,\n        },\n        buttonTextStyle: {\n            color: Colors.LightModeColors.blueButtonText,\n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n    };\n\n    constructor(props: Readonly<Props>) {\n        super(props);\n        this.inputFormStyle = setInputStyles(null);\n\n        this.goBackToPreviousPage = this.goBackToPreviousPage.bind(this);\n        this.getFormCategory = this.getFormCategory.bind(this);\n        this.getFormName = this.getFormName.bind(this);\n        this.getFormManufacturer = this.getFormManufacturer.bind(this);\n        this.getFormModelNum = this.getFormModelNum.bind(this);\n        this.getFormSerialNum = this.getFormSerialNum.bind(this);\n        this.getFormLocation = this.getFormLocation.bind(this);\n        this.setInitialState = this.setInitialState.bind(this);\n        this.resetForms = this.resetForms.bind(this);\n        this.displayError = this.displayError.bind(this);\n\n        this.property = props.navigation.getParam('property');\n        this.token = props.navigation.getParam('token');\n        this.state = initialState;\n        this.categoryRef = React.createRef();\n        this.nameRef = React.createRef();\n        this.manufacturerRef = React.createRef();\n        this.modelNumRef = React.createRef();\n        this.serialNumRef = React.createRef();\n        this.locationRef = React.createRef();\n    }\n\n    getFormCategory(childData: ApplianceType) {\n        this.setState({ category: childData });\n    }\n\n    getFormName(childData: string) {\n        this.setState({ appName: childData });\n    }\n\n    getFormManufacturer(childData: string) {\n        this.setState({ manufacturer: childData });\n    }\n\n    getFormModelNum(childData: string) {\n        this.setState({ modelNum: childData });\n    }\n\n    getFormSerialNum(childData: string) {\n        this.setState({ serialNum: childData });\n    }\n\n    getFormLocation(childData: string) {\n        this.setState({ location: childData });\n    }\n\n    setInitialState() {\n        this.setState(initialState);\n    }\n\n    goBackToPreviousPage() {\n        const { navigation } = this.props;\n        const { propId } = this.property;\n        navigation.resolveModalReplaceNavigation(SingleProperty, { propId });\n    }\n\n    validateForms() {\n        const { category, appName, modelNum, serialNum, location } = this.state;\n        let check = true;\n        if (category.toString() === 'None') {\n            check = false;\n        }\n        if (isEmptyOrSpaces(appName)) {\n            this.nameRef.current.setError(true);\n            check = false;\n        }\n        if (!isPositiveWholeNumber(modelNum)) {\n            this.modelNumRef.current.setError(true);\n            check = false;\n        }\n        if (!isPositiveWholeNumber(serialNum)) {\n            this.serialNumRef.current.setError(true);\n            check = false;\n        }\n        if (isEmptyOrSpaces(location)) {\n            this.locationRef.current.setError(true);\n            check = false;\n        }\n        return check;\n    }\n\n    resetForms() {\n        this.nameRef.current.setError(false);\n        this.manufacturerRef.current.setError(false);\n        this.modelNumRef.current.setError(false);\n        this.serialNumRef.current.setError(false);\n        this.locationRef.current.setError(false);\n    }\n\n    displayError(msg: string) {\n        this.setState({ errorMsg: msg, errorCheck: true });\n    }\n\n    async clickSubmitButton() {\n        const { category, appName, manufacturer, modelNum, serialNum, location } = this.state;\n        const { navigation, setAppliancesAndTenants } = this.props;\n        this.resetForms();\n        this.setState({ errorCheck: false });\n        if (this.validateForms()) {\n            const newAppliance: Appliance = {\n                applianceId: undefined,\n                category, appName, manufacturer,\n                modelNum: Number(modelNum),\n                serialNum: Number(serialNum),\n                location,\n            };\n            const info: AddApplianceState = { property: this.property, token: this.token };\n\n     \n            await postNewAppliance(newAppliance, info, this.setInitialState, this.displayError, navigation).then(() => {\n                setAppliancesAndTenants(this.property.propId);\n            }).catch((error: Error) => {\n                if (error.message.includes('500')) {\n                    console.log(error.message);\n                    this.displayError(DefaultMessage);\n                }\n                else {\n                    console.log(error.message);\n                    this.displayError(error.message);\n                }\n            });\n        }\n    }\n\n    renderInputForms() {\n        const { appName, manufacturer, modelNum, serialNum, location } = this.state;\n        const inputForms: InputFormProps[] = [\n            {\n                ref: this.nameRef,\n                key: addApplianceStrings.name,\n                name: addApplianceStrings.name,\n                parentCallBack: this.getFormName,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: appName,\n                errorMessage: 'Display name cannot be empty',\n            },\n            {\n                ref: this.manufacturerRef,\n                key: addApplianceStrings.manufacturer,\n                name: addApplianceStrings.manufacturer,\n                parentCallBack: this.getFormManufacturer,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: manufacturer,\n            },\n            {\n                ref: this.modelNumRef,\n                key: addApplianceStrings.modelNum,\n                name: addApplianceStrings.modelNum,\n                parentCallBack: this.getFormModelNum,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: modelNum,\n                errorMessage: 'Model number must be a number',\n            },\n            {\n                ref: this.serialNumRef,\n                key: addApplianceStrings.serialNum,\n                name: addApplianceStrings.serialNum,\n                parentCallBack: this.getFormSerialNum,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: serialNum,\n                errorMessage: 'Serial number must be a number',\n            },\n            {\n                ref: this.locationRef,\n                key: addApplianceStrings.location,\n                name: addApplianceStrings.location,\n                parentCallBack: this.getFormLocation,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: location,\n                errorMessage: 'Location cannot be empty',\n            },\n        ];\n\n        return inputForms.map(inputFormProp => {\n            const { ref, key, name, parentCallBack, formTitleStyle, inputStyle, errorMessage, secureTextEntry, errorStyle, value, placeholder } = inputFormProp;\n            return <InputForm\n                ref={ref}\n                key={key}\n                name={name}\n                parentCallBack={parentCallBack}\n                formTitleStyle={formTitleStyle}\n                inputStyle={inputStyle}\n                errorStyle={errorStyle}\n                secureTextEntry={secureTextEntry}\n                value={value}\n                placeholder={placeholder}\n                errorMessage={errorMessage} />;\n        });\n    }\n\n    renderError() {\n        const { errorMsg, errorCheck } = this.state;\n        return <View style={{ alignSelf: 'center' }}>\n            <HelperText type='error' visible={errorCheck} style={this.inputFormStyle.errorStyle}>{errorMsg}</HelperText>\n        </View>;\n    }\n\n    render() {\n        const { category } = this.state;\n        const showCloseButton = true;\n        return (\n            <View style={this.inputFormStyle.modalContainer}>\n                <ScrollView style={this.inputFormStyle.scrollStyle}\n                    contentContainerStyle={this.inputFormStyle.scrollContentContainerStyle}\n                    showsHorizontalScrollIndicator={false}>\n                    <Card\n                        containerStyle={this.inputFormStyle.cardContainer}\n                        showCloseButton={showCloseButton}\n                        title={addApplianceStrings.addTitle}\n                        closeButtonPressedCallBack={() => {\n                            this.goBackToPreviousPage();\n                            this.setInitialState();\n                            this.resetForms();\n                        }}\n                        titleStyle={this.inputFormStyle.cardTitle}\n                        titleContainerStyle={this.inputFormStyle.cardTitleContainer}\n                        wrapperStyle={this.inputFormStyle.cardWrapperStyle}\n                    >\n                        <Text style={this.inputFormStyle.formTitle}>{addApplianceStrings.category}</Text>\n                        <ApplianceCategoryPanel initialCategory={category} parentCallBack={this.getFormCategory} />\n                        <>{this.renderInputForms()}</>\n                        {this.renderError()}\n                        <ThinButton\n                            name={this.submitButton.name}\n                            onClick={this.submitButton.onClick}\n                            buttonStyle={this.submitButton.buttonStyle}\n                            buttonTextStyle={this.submitButton.buttonTextStyle}\n                            containerStyle={this.submitButton.containerStyle}\n                        />\n                    </Card>\n                </ScrollView>\n            </View>);\n    }\n}\n\n\n\nconst AddApplianceModal = DetailedPropertyMutatorModal(AddApplianceModalBase);\nexport default prepareNavigationHandlerComponent(AddApplianceModal);","import React from \"react\";\nimport { ScrollView, StyleSheet, StatusBar, Platform, View, Dimensions, Text } from 'react-native';\nimport { ThinButton, ThinButtonProps, Card, InputFormProps, InputForm, ApplianceCategoryPanel } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, Appliance, ApplianceType } from 'homepairs-types';\nimport Colors from 'homepairs-colors';\nimport { isPositiveWholeNumber, isEmptyOrSpaces, isNullOrUndefined } from 'src/utility';\nimport { HelperText } from 'react-native-paper';\nimport { FontTheme } from 'homepairs-base-styles';\nimport { navigationPages, NavigationRouteScreenProps, prepareNavigationHandlerComponent } from 'src/routes';\nimport { postUpdatedAppliance } from 'homepairs-endpoints';\nimport { DetailedPropertyMutatorDispatchProps, DetailedPropertyMutatorModal } from '../CommonDispatchProps';\n\n\n\nconst { SingleProperty } = navigationPages;\n\ntype Props = NavigationRouteScreenProps & DetailedPropertyMutatorDispatchProps;\n\ntype EditState = {\n    applianceId: string,\n    category: ApplianceType,\n    appName: string,\n    manufacturer: string,\n    modelNum: string,\n    serialNum: string,\n    location: string,\n    errorMsg: string,\n    errorCheck: boolean,\n};\n\nconst editApplianceStrings = strings.applianceInfo.applianceModal;\n\nconst DefaultMessage: string = \"The specified appliance for this property could not be found in our system. This may be a server issue.\";\n\nfunction setInputStyles(colorTheme?: BaseStyles.ColorTheme) {\n    const { width } = Dimensions.get('window');\n    const colors = isNullOrUndefined(colorTheme) ? BaseStyles.LightColorTheme : colorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        input: {\n            alignItems: 'center',\n            alignSelf: 'center',\n            margin: BaseStyles.MarginPadding.xsmallConst,\n            minWidth: 40,\n            width: BaseStyles.ContentWidth.max,\n            height: 40,\n            color: colors.lightGray,\n            borderColor: colors.lightGray,\n            borderWidth: 1,\n            borderRadius: BaseStyles.BorderRadius.small,\n            paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n        },\n        modalContainer: {\n            flex: 1,\n            maxWidth: HomePairsDimensions.MAX_PALLET,\n            width: Platform.OS === 'web' ? width : BaseStyles.ContentWidth.max,\n            alignSelf: 'center',\n        },\n        scrollStyle: {\n            flex: 1,\n            marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n            width: '100%',\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.reg,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: Platform.OS === 'web' ? null : 1, // Needed to center the contents of the scroll container for mobile \n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n            flex: 1,\n        },\n        cardTitle: {\n            color: colors.tertiary,\n            fontFamily: 'nunito-regular',\n            fontSize: 20,\n        },\n        cardTitleContainer: {\n            width: BaseStyles.ContentWidth.max,\n            borderBottomColor: '#AFB3B5',\n            paddingVertical: BaseStyles.MarginPadding.largeConst,\n            paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n            borderBottomWidth: 1,\n            alignSelf: 'center',\n            justifyContent: 'flex-start',\n        },\n        cardWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginTop: BaseStyles.MarginPadding.small,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        errorStyle: {\n            fontFamily: FontTheme.secondary,\n            fontSize: 16,\n        },\n    });\n}\n\n\nexport class EditApplianceModalBase extends React.Component<Props, EditState> {\n    inputFormStyle;\n\n    categoryRef;\n\n    appNameRef;\n\n    manufacturerRef;\n\n    modelNumRef;\n\n    serialNumRef;\n\n    locationRef;\n\n    oldAppliance: Appliance;\n\n    submitButton: ThinButtonProps = {\n        name: editApplianceStrings.editSave,\n        onClick: () => { this.clickSubmitButton(); },\n        buttonStyle: {\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: Colors.LightModeColors.blueButton,\n        },\n        buttonTextStyle: {\n            color: Colors.LightModeColors.blueButtonText,\n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n    };\n\n    constructor(props: Readonly<Props>) {\n        super(props);\n        this.inputFormStyle = setInputStyles(null);\n        this.getFormCategory = this.getFormCategory.bind(this);\n        this.getFormName = this.getFormName.bind(this);\n        this.getFormManufacturer = this.getFormManufacturer.bind(this);\n        this.getFormModelNum = this.getFormModelNum.bind(this);\n        this.getFormSerialNum = this.getFormSerialNum.bind(this);\n        this.getFormLocation = this.getFormLocation.bind(this);\n        this.setInitialState = this.setInitialState.bind(this);\n\n        this.resetForms = this.resetForms.bind(this);\n        this.displayError = this.displayError.bind(this);\n        this.oldAppliance = props.navigation.getParam('appliance');\n        const { applianceId, category, manufacturer, appName, modelNum, serialNum, location } = this.oldAppliance;\n        this.state = {\n            applianceId, category, manufacturer, appName,\n            modelNum: isNullOrUndefined(modelNum) ? undefined : modelNum.toString(),\n            serialNum: isNullOrUndefined(serialNum) ? undefined : serialNum.toString(),\n            location, errorMsg: DefaultMessage, errorCheck: false,\n        };\n        this.categoryRef = React.createRef();\n        this.appNameRef = React.createRef();\n        this.manufacturerRef = React.createRef();\n        this.modelNumRef = React.createRef();\n        this.serialNumRef = React.createRef();\n        this.locationRef = React.createRef();\n    }\n\n    getFormCategory(childData: ApplianceType) {\n        this.setState({ category: childData });\n    }\n\n    getFormName(childData: string) {\n        this.setState({ appName: childData });\n    }\n\n    getFormManufacturer(childData: string) {\n        this.setState({ manufacturer: childData });\n    }\n\n    getFormModelNum(childData: string) {\n        this.setState({ modelNum: childData });\n    }\n\n    getFormSerialNum(childData: string) {\n        this.setState({ serialNum: childData });\n    }\n\n    getFormLocation(childData: string) {\n        this.setState({ location: childData });\n    }\n\n    goBackToPreviousPage() {\n        const { navigation } = this.props;\n        const propId = navigation.getParam('propId');\n        navigation.resolveModalReplaceNavigation(SingleProperty, { propId });\n    }\n\n    setInitialState() {\n        const { category, manufacturer, appName, modelNum, serialNum, location } = this.oldAppliance;\n        this.setState({\n            category, manufacturer, appName,\n            modelNum: isNullOrUndefined(modelNum) ? undefined : modelNum.toString(),\n            serialNum: isNullOrUndefined(serialNum) ? undefined : serialNum.toString(),\n            location, errorMsg: DefaultMessage, errorCheck: false,\n        });\n    }\n\n    validateForms() {\n        const { appName, modelNum, serialNum, location } = this.state;\n        let check = true;\n        if (isEmptyOrSpaces(appName)) {\n            this.setState({errorMsg: \"Invalid appliance name.\"});\n            this.appNameRef.current.setError(true);\n            check = false;\n        } // Should model numbers be allowed to be alphanumeric?\n        if (!isPositiveWholeNumber(modelNum)) {\n            this.setState({errorMsg: \"Invalid model number.\"});\n            this.modelNumRef.current.setError(true);\n            check = false;\n        } // Should serial numbers be allowed to be alphanumeric?\n        if (!isPositiveWholeNumber(serialNum)) {\n            this.setState({errorMsg: \"Invalid serial number.\"});\n            this.serialNumRef.current.setError(true);\n            check = false;\n        } \n        if (isEmptyOrSpaces(location)) {\n            this.setState({errorMsg: \"Invalid location.\"});\n            this.locationRef.current.setError(true);\n            check = false;\n        }\n        return check;\n    }\n\n    resetForms() {\n        this.appNameRef.current.setError(false);\n        this.manufacturerRef.current.setError(false);\n        this.modelNumRef.current.setError(false);\n        this.serialNumRef.current.setError(false);\n        this.locationRef.current.setError(false);\n    }\n\n    displayError(msg: string) {\n        this.setState({ errorMsg: msg, errorCheck: true });\n    }\n\n    async updateAppliance() {\n        const { navigation, setAppliancesAndTenants } = this.props;\n        const propId = navigation.getParam('propId');\n        const { applianceId, category, appName, manufacturer, modelNum, serialNum, location } = this.state;\n        const newAppliance: Appliance = {\n            applianceId, category, appName, manufacturer,\n            modelNum: Number(modelNum),\n            serialNum: Number(serialNum),\n            location,\n        };\n        await postUpdatedAppliance(propId, newAppliance, this.displayError, navigation).then(() => {\n            setAppliancesAndTenants(String(propId));\n        }).catch((error: Error) => {\n            if (error.message.includes('500')) {\n                console.log(error.message);\n                this.displayError(DefaultMessage);\n            }\n            else {\n                console.log(error.message);\n                this.displayError(error.message);\n            }\n        });\n    }\n\n    clickSubmitButton() {\n        this.resetForms();\n        this.setState({ errorCheck: false });\n        if (this.validateForms()) {\n            this.updateAppliance();\n        }\n    }\n\n    renderInputForms() {\n        const { appName, manufacturer, modelNum, serialNum, location } = this.state;\n        const inputForms: InputFormProps[] = [\n            {\n                ref: this.appNameRef,\n                key: editApplianceStrings.name,\n                name: editApplianceStrings.name,\n                parentCallBack: this.getFormName,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: appName,\n                errorMessage: 'Name cannot be empty',\n            },\n            {\n                ref: this.manufacturerRef,\n                key: editApplianceStrings.manufacturer,\n                name: editApplianceStrings.manufacturer,\n                parentCallBack: this.getFormManufacturer,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: manufacturer,\n            },\n            {\n                ref: this.modelNumRef,\n                key: editApplianceStrings.modelNum,\n                name: editApplianceStrings.modelNum,\n                parentCallBack: this.getFormModelNum,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: modelNum,\n                errorMessage: 'Model number must be a number',\n            },\n            {\n                ref: this.serialNumRef,\n                key: editApplianceStrings.serialNum,\n                name: editApplianceStrings.serialNum,\n                parentCallBack: this.getFormSerialNum,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: serialNum,\n                errorMessage: 'Serial number must be a number',\n            },\n            {\n                ref: this.locationRef,\n                key: editApplianceStrings.location,\n                name: editApplianceStrings.location,\n                parentCallBack: this.getFormLocation,\n                formTitleStyle: this.inputFormStyle.formTitle,\n                inputStyle: this.inputFormStyle.input,\n                value: location,\n                errorMessage: 'Locations cannot be empty',\n            },\n        ];\n\n        return inputForms.map(inputFormProp => {\n            const { ref, key, name, parentCallBack, formTitleStyle, inputStyle, errorMessage, secureTextEntry, errorStyle, value, placeholder } = inputFormProp;\n            return <InputForm\n                ref={ref}\n                key={key}\n                name={name}\n                parentCallBack={parentCallBack}\n                formTitleStyle={formTitleStyle}\n                inputStyle={inputStyle}\n                errorStyle={errorStyle}\n                secureTextEntry={secureTextEntry}\n                value={value}\n                placeholder={placeholder}\n                errorMessage={errorMessage} />;\n        });\n    }\n\n    renderError() {\n        const { errorMsg, errorCheck } = this.state;\n        return <View style={{ alignSelf: 'center' }}>\n            <HelperText type='error' visible={errorCheck} style={this.inputFormStyle.errorStyle}>{errorMsg}</HelperText>\n        </View>;\n    }\n\n    render() {\n        const { category } = this.state;\n        const showCloseButton = true;\n        return (\n            <View style={this.inputFormStyle.modalContainer}>\n                <ScrollView style={this.inputFormStyle.scrollStyle}\n                    contentContainerStyle={this.inputFormStyle.scrollContentContainerStyle}\n                    showsHorizontalScrollIndicator={false}>\n                    <Card\n                        containerStyle={this.inputFormStyle.cardContainer}\n                        showCloseButton={showCloseButton}\n                        title={editApplianceStrings.editTitle}\n                        closeButtonPressedCallBack={() => {\n                            this.goBackToPreviousPage();\n                            this.setInitialState();\n                            this.resetForms();\n                        }}\n                        titleStyle={this.inputFormStyle.cardTitle}\n                        titleContainerStyle={this.inputFormStyle.cardTitleContainer}\n                        wrapperStyle={this.inputFormStyle.cardWrapperStyle}\n                    >\n                        <Text style={this.inputFormStyle.formTitle}>{editApplianceStrings.category}</Text>\n                        <ApplianceCategoryPanel initialCategory={category} parentCallBack={this.getFormCategory} />\n                        <>{this.renderInputForms()}</>\n                        {this.renderError()}\n                        <ThinButton\n                            name={this.submitButton.name}\n                            onClick={async () => { await this.submitButton.onClick(); }}\n                            buttonStyle={this.submitButton.buttonStyle}\n                            buttonTextStyle={this.submitButton.buttonTextStyle}\n                            containerStyle={this.submitButton.containerStyle}\n                        />\n                    </Card>\n                </ScrollView>\n            </View>);\n    }\n}\n\nconst EditApplianceModal = DetailedPropertyMutatorModal(EditApplianceModalBase);\nexport default prepareNavigationHandlerComponent(EditApplianceModal);","import React from \"react\";\nimport { ScrollView, View} from 'react-native';\nimport { ThinButton, ThinButtonProps, Card, InputForm } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions} from 'homepairs-types';\nimport Colors from 'homepairs-colors';\nimport {isPhoneNumberValid} from 'src/utility';\nimport { navigationPages, NavigationRouteScreenProps, NavigationRouteHandler } from 'src/routes';\nimport setInputStyles from './styles';\n\nexport type AddServiceProviderDispatchProps = {\n    onAddServiceProvider: (\n        pmId: number, \n        phoneNum: string,\n        setInitialState: () => void, \n        displayError: (check: boolean, message?: string) => void, \n        navigation: NavigationRouteHandler,\n    ) => void\n}\n\ntype ServiceProviderInfo = {\n    pmId: number,\n}\n\nconst { ServiceRequestScreen } = navigationPages;\n\ntype Props = NavigationRouteScreenProps & AddServiceProviderDispatchProps & ServiceProviderInfo;\n\nconst primaryErrorMessage = 'No service provider with this phone number was found in our system.';\n\ntype CreateState = {\n    phoneNum: string,\n    errorMessage: string,\n};\n\nconst addServiceProviderStrings = strings.addServiceProvider;\n\nconst initialState : CreateState = {\n    phoneNum: '', errorMessage: primaryErrorMessage,\n};\n\n\nexport class AddServiceProviderModalBase extends React.Component<Props,CreateState> {\n    inputFormStyle;\n\n    phoneNumRef;\n\n    submitButton : ThinButtonProps = {\n        name: addServiceProviderStrings.add, \n        onClick: () => {this.clickSubmitButton();}, \n        buttonStyle: {\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            maxWidth: HomePairsDimensions.MAX_BUTTON_WIDTH,\n            minWidth: HomePairsDimensions.MIN_BUTTON_WIDTH,\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: Colors.LightModeColors.blueButton,\n        },\n        buttonTextStyle: {\n            color: Colors.LightModeColors.blueButtonText, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n    };\n\n    constructor(props: Readonly<Props>) {\n        super(props);\n        this.inputFormStyle = setInputStyles(null);\n        this.state = initialState;\n\n        this.setInitialState = this.setInitialState.bind(this);\n        this.resetForm = this.resetForm.bind(this);\n        this.getFormPhoneNum = this.getFormPhoneNum.bind(this);\n        this.goBackToPreviousPage = this.goBackToPreviousPage.bind(this);\n        this.setError = this.setError.bind(this);\n        this.phoneNumRef = React.createRef();\n    }\n\n    getFormPhoneNum(childData : string) {\n        this.setState({phoneNum: childData});\n    }\n\n    setError(show: boolean, errorMessage: string = primaryErrorMessage){\n        this.setState({errorMessage});\n        this.phoneNumRef.current.setError(show);\n    }\n\n    setInitialState() {\n        this.setState(initialState);\n    }\n\n    goBackToPreviousPage() {\n        const{navigation} = this.props;\n        navigation.resolveModalReplaceNavigation(ServiceRequestScreen);\n    }\n\n    resetForm() {\n        this.phoneNumRef.current.setError(false);\n    }\n\n    validatePhoneNumber() {\n        const {phoneNum} = this.state;\n        let check = true;\n        if (!isPhoneNumberValid(phoneNum.trim())) {\n            this.phoneNumRef.current.setError(true);\n            check = false;\n        }\n        return check;\n\n    }\n\n    clickSubmitButton() {\n        const {phoneNum} = this.state;\n        const {onAddServiceProvider, navigation, pmId} = this.props;\n        this.resetForm();\n        console.log(pmId);\n        if (this.validatePhoneNumber()) \n            onAddServiceProvider(pmId, phoneNum.trim(), this.setInitialState, this.setError, navigation);\n        else\n            this.setError(true,'Please enter a valid phone number.');    \n        \n    }\n\n    renderInputForms() {\n        const {phoneNum, errorMessage} = this.state;\n        return <InputForm\n                    ref={this.phoneNumRef}\n                    key={addServiceProviderStrings.phoneNumber}\n                    name={addServiceProviderStrings.phoneNumber}\n                    parentCallBack={this.getFormPhoneNum}\n                    formTitleStyle={this.inputFormStyle.formTitle}\n                    inputStyle={this.inputFormStyle.input}\n                    containerStyle={this.inputFormStyle.container}\n                    value={phoneNum}\n                    errorMessage={errorMessage}\n                />;\n    }\n\n    render() {\n        const showCloseButton = true;\n        return(\n            <View style={this.inputFormStyle.modalContainer}>\n            <ScrollView style={this.inputFormStyle.scrollStyle}\n            contentContainerStyle={this.inputFormStyle.scrollContentContainerStyle}\n            showsHorizontalScrollIndicator={false}>\n                <Card\n                    containerStyle={this.inputFormStyle.cardContainer}\n                    showCloseButton={showCloseButton}\n                    title={addServiceProviderStrings.title} \n                    closeButtonPressedCallBack={() => { \n                        this.goBackToPreviousPage();\n                        this.setInitialState();\n                        this.resetForm();\n                    }} \n                    titleStyle={this.inputFormStyle.cardTitle}\n                    titleContainerStyle={this.inputFormStyle.cardTitleContainer}\n                    wrapperStyle={this.inputFormStyle.cardWrapperStyle}\n                    >\n                    <>{this.renderInputForms()}</>\n                    <ThinButton\n                        name={this.submitButton.name}\n                        onClick={this.submitButton.onClick}\n                        buttonStyle={this.submitButton.buttonStyle}\n                        buttonTextStyle={this.submitButton.buttonTextStyle}\n                        containerStyle={this.submitButton.containerStyle}\n                    />\n                </Card>\n            </ScrollView>\n        </View>);\n    }\n}","import React from 'react';\nimport {Platform, StyleSheet, Dimensions} from 'react-native';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions } from 'homepairs-types';\n\nexport default function setInputStyles(){\n    const {width} = Dimensions.get('window');\n    const colors = BaseStyles.LightColorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        input: {\n            alignItems: 'center',\n            alignSelf: 'center',\n            margin: 0,\n            minWidth: 40,\n            width: BaseStyles.ContentWidth.max,\n            height: 40,\n            color: colors.lightGray,\n            borderColor: colors.lightGray,\n            borderWidth: 1,\n            borderRadius: BaseStyles.BorderRadius.small,\n            paddingHorizontal: BaseStyles.MarginPadding.mediumConst,\n        },\n        modalContainer: {\n            flex: 1,\n            maxWidth: HomePairsDimensions.MAX_PALLET,\n            width: Platform.OS === 'web' ? width : BaseStyles.ContentWidth.max,\n            alignSelf: 'center',\n        },\n        scrollStyle: {\n            flex:1,\n            width: '100%',\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.reg,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: Platform.OS === 'web' ? null : 1, // Needed to center the contents of the scroll container for mobile \n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n            flex: 1,\n        },\n        cardTitle: {\n            color: colors.tertiary,\n            fontFamily: 'nunito-regular',\n            fontSize: 20,\n        },\n        cardTitleContainer: {\n            width: BaseStyles.ContentWidth.max,\n            borderBottomColor: '#AFB3B5',\n            paddingVertical: BaseStyles.MarginPadding.largeConst,\n            paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n            borderBottomWidth: 1,\n            alignSelf: 'center',\n            justifyContent: 'flex-start',\n        },\n        cardWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginTop: BaseStyles.MarginPadding.small,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        errorStyle: {\n            fontFamily: BaseStyles.FontTheme.secondary, \n            fontSize: 16,\n            margin: 0, \n            padding: 0,\n        },\n        menuStyle: {\n            backgroundColor: colors.secondary,\n            marginHorizontal: BaseStyles.MarginPadding.large,\n            borderRadius: BaseStyles.BorderRadius.large,\n            padding: BaseStyles.MarginPadding.large,\n            paddingTop: 10,\n            paddingBottom: 30,\n            width: BaseStyles.ContentWidth.thin,\n            alignSelf: 'center',\n            borderColor: colors.lightGray,\n            borderWidth: 1,\n            overflow: 'hidden',\n            marginBottom: 20,\n        },\n        titleText: {\n            fontSize: BaseStyles.FontTheme.reg,\n            fontFamily: 'nunito_regular',\n        },\n    });\n}","import { connect } from \"react-redux\";\nimport { AppState, PropertyManagerAccount } from 'homepairs-types';\nimport { prepareNavigationHandlerComponent, NavigationRouteHandler, SERVICE_REQUEST } from 'src/routes';\nimport { postPreferredProvider, fetchPreferredProviders } from 'homepairs-endpoints';\nimport { AddServiceProviderModalBase, AddServiceProviderDispatchProps} from './AddServiceProviderModalBase';\n\n\nconst DefaultMessage: string = \"No service provider with this phone number was found in our system.\";\n\nconst mapDispatchToProps : (dispatch: any) => AddServiceProviderDispatchProps = (dispatch: any) => ({\n    onAddServiceProvider: (\n        pmId: number,\n        phoneNum: string,\n        setInitialState: () => void, \n        displayError: (check: boolean, message?: string) => void, \n        navigation: NavigationRouteHandler) => \n    {\n        // The api request takes care of itself. It will return a response that we can use. \n        postPreferredProvider(pmId, phoneNum).then(() => {\n            dispatch(fetchPreferredProviders(String(pmId)));\n            setInitialState();\n            navigation.resolveModalReplaceNavigation(SERVICE_REQUEST);\n        }).catch((error: Error) => {\n            if(error.message.includes('500')){\n                console.log('if'); \n                console.log(error.message);\n                displayError(true, DefaultMessage);\n            }\n            else{\n                console.log('else'); \n                console.log(error.message);\n                displayError(true, error.message);\n            }\n        });\n    },\n});\n\nfunction mapStateToProps(state: AppState) : any {\n    return {\n        pmId: (state.accountProfile as (PropertyManagerAccount)).pmId,\n    };\n}\n\n\nconst ConnectedComponent = connect(\n  mapStateToProps, \n  mapDispatchToProps,\n  )(AddServiceProviderModalBase);\n\nexport default prepareNavigationHandlerComponent(ConnectedComponent);","import { connect } from \"react-redux\";\nimport {prepareNavigationHandlerComponent, NavigationRouteHandler} from 'src/routes';\nimport {deletePreferredProvider} from 'homepairs-endpoints';\nimport {ServiceProvider, AppState, PreferredServiceProviderState} from 'homepairs-types';\nimport { PreferredProvidertModalBase, PreferredProviderModalDispatchProps, PreferredProviderStateProps } from './PreferredProviderModalBase';\n\nfunction mapStateToProps(state: AppState) : PreferredProviderStateProps {\n    return {\n        preferredProvider: (state.preferredProviders as (PreferredServiceProviderState)).serviceProviders,\n    };\n}\n\nconst mapDispatchToProps : (dispatch: any) => PreferredProviderModalDispatchProps= (dispatch: any) => ({\n    onRemoveServiceProvider: (\n        serviceProvider: ServiceProvider, \n        displayError: (error:string) => void,\n        navigation: NavigationRouteHandler) => \n    {\n        dispatch(deletePreferredProvider(serviceProvider, displayError, navigation));\n    },\n});\n\n\nconst ConnectedComponent = connect(\n  mapStateToProps, \n  mapDispatchToProps,\n)(PreferredProvidertModalBase);\n\n  export default prepareNavigationHandlerComponent(ConnectedComponent);\n","import React from \"react\";\nimport { ScrollView, StyleSheet, StatusBar, Platform, View, Dimensions, Text } from 'react-native';\nimport { ThinButtonProps, Card, AppliancePanel, ThinButton } from 'src/elements';\nimport strings from 'homepairs-strings';\nimport { connect } from 'react-redux';\nimport * as BaseStyles from 'homepairs-base-styles';\nimport { HomePairsDimensions, AccountTypes, AppState, ServiceRequestStatusEnums, PropertyManagerAccount} from 'homepairs-types';\nimport Colors from 'homepairs-colors';\nimport {FontTheme} from 'homepairs-base-styles';\nimport { HomePairFonts } from 'homepairs-fonts';\nimport { categoryToString, isNullOrUndefined} from 'src/utility';\nimport {changeServiceRequestStatus} from 'homepairs-endpoints';\nimport {prepareNavigationHandlerComponent, NavigationRouteScreenProps} from 'src/routes';\nimport Moment from 'moment';\n\n\ntype ServiceRequestModalProps = {\n    isPm: AccountTypes,\n    token: string,\n}\n\ntype Props = NavigationRouteScreenProps & ServiceRequestModalProps;\n\nconst serviceRequestStrings = strings.serviceRequestModal;\n\n\nfunction setInputStyles(colorTheme?: BaseStyles.ColorTheme){\n    const {width} = Dimensions.get('window');\n    const colors = isNullOrUndefined(colorTheme) ? BaseStyles.LightColorTheme : colorTheme;\n    return StyleSheet.create({\n        formTitle: {\n            marginVertical: '3.5%',\n            fontFamily: BaseStyles.FontTheme.primary,\n            color: colors.lightGray,\n        },\n        subContainer: {\n            marginBottom: '3.5%',\n            paddingTop: 1,\n            paddingHorizontal: 3,\n            borderRadius: 4,\n            width: '100%',\n            opacity: 50,\n        },\n        modalContainer: {\n            flex:1,\n            maxWidth: HomePairsDimensions.MAX_PALLET,\n            width: Platform.OS === 'web' ? width : BaseStyles.ContentWidth.max,\n            alignSelf: 'center',\n        },\n        scrollStyle: {\n            flex:1,\n            marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n            width: '100%',\n        },\n        scrollContentContainerStyle: {\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            alignItems: 'center',\n            justifyContent: 'center',\n            alignSelf: 'center',\n            width: BaseStyles.ContentWidth.reg,\n            paddingVertical: BaseStyles.MarginPadding.large,\n            flexGrow: 1, // Needed to center the contents of the scroll container\n        },\n        cardContainer: {\n            backgroundColor: 'white',\n            maxWidth: HomePairsDimensions.MAX_CONTENT_SIZE,\n            width: BaseStyles.ContentWidth.reg,\n            marginHorizontal: '5%',\n            borderRadius: 7,\n            shadowColor: 'black',\n            shadowRadius: 20,\n            shadowOffset: { width: 1, height: 1 },\n            shadowOpacity: 100,\n            elevation: 9,\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n        },\n        cardTitle: {\n            fontFamily: 'nunito-regular',\n            fontSize: 20,\n            alignSelf: 'center',\n            color: 'white',\n        },\n        cardTitleContainer: {\n            borderTopRightRadius: 7,\n            borderTopLeftRadius: 7,\n            width: BaseStyles.ContentWidth.max,\n            paddingVertical: BaseStyles.MarginPadding.largeConst,\n            paddingHorizontal: BaseStyles.MarginPadding.largeConst,\n            alignSelf: 'center',\n            justifyContent: 'flex-start',\n        },\n        cardWrapperStyle: {\n            width: BaseStyles.ContentWidth.thin,\n            marginTop: BaseStyles.MarginPadding.small,\n            marginBottom: BaseStyles.MarginPadding.smallConst,\n            alignSelf: 'center',\n            justifyContent: 'center',\n        },\n        errorStyle: {\n            fontFamily: FontTheme.secondary, \n            fontSize: 16,\n        },\n        closeButton: {\n            flex:1,\n            fontSize: 20,\n            color: colors.secondary, \n            fontFamily: HomePairFonts.nunito_regular,\n        },\n        detailText: {\n            fontSize: BaseStyles.FontTheme.reg + 2, \n            fontFamily: HomePairFonts.nunito_regular, \n        },\n        buttonsContainer: {\n            width: '100%',\n            flexDirection: 'row',\n        },\n    });\n}\n\n/**\n * Helper function to format POC information in component \n * @param {string} poc \n * @param {string} pocName \n */\nfunction formatPointOfContact(pocName:string, poc: string){\n    if(isNullOrUndefined(poc) && isNullOrUndefined(pocName))\n        return 'Not Applicable';\n    if(isNullOrUndefined(poc))\n        return pocName;\n    if(isNullOrUndefined(pocName))\n        return poc;\n    return `${pocName} ${poc}`;\n}\n\nexport class ServiceRequestModalBase extends React.Component<Props> {\n    styles;\n\n    serviceRequest;\n\n    acceptButton : ThinButtonProps = {\n        name: 'Accept',\n        buttonStyle: {\n            alignSelf: 'center',\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            paddingHorizontal: '35%',\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: Colors.LightModeColors.roopairs,\n        },\n        buttonTextStyle: {\n            color: Colors.LightModeColors.roopairs, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n    };\n\n    denyButton : ThinButtonProps = {\n        name: 'Deny',\n        buttonStyle: {\n            alignSelf: 'center',\n            alignItems: 'center',\n            backgroundColor: Colors.LightModeColors.transparent,\n            padding: BaseStyles.MarginPadding.mediumConst,\n            paddingHorizontal: '35%',\n            borderRadius: BaseStyles.BorderRadius.large,\n            borderWidth: 1,\n            borderColor: BaseStyles.LightColorTheme.red,\n        },\n        buttonTextStyle: {\n            color: BaseStyles.LightColorTheme.red, \n            fontSize: BaseStyles.FontTheme.reg,\n            alignSelf: 'center',\n        },\n        containerStyle: {\n            flex: 1,\n            alignSelf: 'center',\n            justifyContent: 'center',\n            marginTop: BaseStyles.MarginPadding.largeConst,\n            marginBottom: BaseStyles.MarginPadding.xlarge,\n            minHeight: 50,\n        },\n    };\n\n    constructor(props: Readonly<Props>) {\n        super(props);\n        this.styles = setInputStyles(null);\n        this.serviceRequest = props.navigation.getParam('serviceRequest');\n        this.state = {};\n    }\n\n    renderBody() {\n        const {isPm, navigation, token} = this.props;\n        const date = Moment(this.serviceRequest.startDate.toString()).format('LLL');\n        console.log(this.serviceRequest);\n        return (\n            <View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{serviceRequestStrings.status}</Text>\n                    <Text style={this.styles.detailText}>{this.serviceRequest.status}</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{serviceRequestStrings.address}</Text>\n                    <Text style={this.styles.detailText}>{this.serviceRequest.address}</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{serviceRequestStrings.serviceType}</Text>\n                    <Text style={this.styles.detailText}>{categoryToString(this.serviceRequest.appliance.category)} Repair</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{serviceRequestStrings.technician}</Text>\n                    <Text style={this.styles.detailText}>{isNullOrUndefined(this.serviceRequest.technician) \n                        ? 'Not Applicable' : this.serviceRequest.technician} </Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{serviceRequestStrings.startDate}</Text>\n                    <Text style={this.styles.detailText}>{date}</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{serviceRequestStrings.poc}</Text>\n                    <Text style={this.styles.detailText}>{formatPointOfContact(this.serviceRequest.pocName, this.serviceRequest.poc)}</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{serviceRequestStrings.details}</Text>\n                    <Text style={this.styles.detailText}>{this.serviceRequest.details}</Text>\n                </View>\n                <View style={this.styles.subContainer}>\n                    <Text style={this.styles.formTitle}>{serviceRequestStrings.appliance}</Text>\n                    {this.serviceRequest.appliance.appName ? <AppliancePanel hasButton={false} appliance={this.serviceRequest.appliance} /> : <Text style={this.styles.detailText}>Not Appliance Selected</Text>}\n                </View>\n                {isPm === AccountTypes.PropertyManager && this.serviceRequest.status === ServiceRequestStatusEnums.WaitingApproval ?\n                    <View style={this.styles.buttonsContainer}>\n                        <ThinButton\n                            name={this.acceptButton.name}\n                            onClick={() => {\n                                changeServiceRequestStatus('Pending', this.serviceRequest.reqId, token, navigation);\n                            }}\n                            buttonStyle={this.acceptButton.buttonStyle}\n                            buttonTextStyle={this.acceptButton.buttonTextStyle}\n                            containerStyle={this.acceptButton.containerStyle}\n                        />\n                        <ThinButton\n                            name={this.denyButton.name}\n                            onClick={() => {\n                                changeServiceRequestStatus('Declined', this.serviceRequest.reqId, token, navigation);\n                            }}\n                            buttonStyle={this.denyButton.buttonStyle}\n                            buttonTextStyle={this.denyButton.buttonTextStyle}\n                            containerStyle={this.denyButton.containerStyle}\n                        />\n                    </View> : <></>\n                }\n            </View>            \n        );\n    }\n\n    render() {\n        const {navigation} = this.props;\n        const showCloseButton = true;\n        const active = this.serviceRequest.status === \"Pending\" || this.serviceRequest.status === \"Scheduled\" || this.serviceRequest.status === \"InProgress\" || this.serviceRequest.status === \"WaitingApproval\";\n        return(\n            <View style={this.styles.modalContainer}>\n            <ScrollView style={this.styles.scrollStyle}\n            contentContainerStyle={this.styles.scrollContentContainerStyle}\n            showsHorizontalScrollIndicator={false}>\n                <Card\n                    containerStyle={this.styles.cardContainer}\n                    showCloseButton={showCloseButton}\n                    closeButtonStyle={this.styles.closeButton}\n                    title={serviceRequestStrings.title} \n                    closeButtonPressedCallBack={() => navigation.goBack()} \n                    titleStyle={this.styles.cardTitle}\n                    titleContainerStyle={[this.styles.cardTitleContainer, {backgroundColor: active ? BaseStyles.LightColorTheme.roopairs : BaseStyles.LightColorTheme.lightGray}]}\n                    wrapperStyle={this.styles.cardWrapperStyle}\n                    >\n                    {this.renderBody()}\n                </Card>\n            </ScrollView>\n        </View>);\n    }\n}\n\nfunction mapStateToProps(state: AppState) : ServiceRequestModalProps {\n    return {\n        token: (state.accountProfile as (PropertyManagerAccount)).roopairsToken,\n        isPm: state.accountProfile.accountType,\n    };\n}\n\nconst ServiceRequestModal = connect(mapStateToProps, null)(ServiceRequestModalBase);\n\nexport default prepareNavigationHandlerComponent(ServiceRequestModal);","/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { BrowserRouter as Router, Route, Redirect, Switch, useLocation, useHistory} from 'react-router-dom';\nimport {\n  LOGIN, SIGNUP, ROOPAIRS_LOGIN, PROPERTY_LIST, TENANT_PROPERTY,\n  PROPERTY, LOGIN_MODAL, CREATE_ACCOUNT_MODAL, ADD_PROPERTY_MODAL, EDIT_PROPERTY_MODAL, \n  ROOPAIRS_LOGIN_MODAL, EDIT_TENANT_MODAL, ADD_TENANT_MODAL, ADD_APPLIANCE_MODAL, EDIT_APPLIANCE_MODAL,\n  SERVICE_REQUEST, NEW_SERVICE_REQUEST, ACCOUNT_SETTINGS, SERVICE_REQUEST_INFO_MODAL,\n  ADD_SERVICE_PROVIDER_MODAL, PREFERRED_PROVIDER_MODAL,\n} from 'src/routes';\nimport {\n  LoginScreen,\n  SignUpScreen,\n  RoopairsLogin,\n} from './auth-pages';\nimport {\n  NewRequest,\n  ServiceRequest,\n  Account,\n  DetailedProperty,\n  Properties,\n  TenantProperty,\n} from './main-pages';\nimport { HomePairsHeader } from './nav-header';\nimport { CreatingAccountModal, LoggingInModal, AddNewPropertyModal, \n  EditPropertyModal, AddApplianceModal, EditApplianceModal, AddTenantModal, \n  EditTenantModal, ServiceRequestModal, AddServiceProviderModal, PreferredProviderModal } from './modals';\n\nconst style = StyleSheet.create({\n  routeContainer: {\n    position: 'absolute', \n    top: 0, \n    left: 0, \n    right: 0, \n    bottom: 0,\n  },\n});\n\n/**\n * ------------------------------------------------------------\n * withNavHeader High-Order-Component\n * ------------------------------------------------------------\n * A high order component that attaches the HomePairsHeader component to a React \n * Component and assigns it into a scroll view. This allows the component to stand \n * underneath the fixed header.\n * @param NavigableComponent \n */\nexport function withNavHeader(NavigableComponent: any){\n  return function PageWithNavHeader(props:any){\n      return (\n      <View style={{flex:1}}>\n          <HomePairsHeader>\n            <NavigableComponent {...props} />\n          </HomePairsHeader>\n        </View>);\n  };\n}\n\n\n/**\n * ------------------------------------------------------------\n * withScrollTop High-Order-Component\n * ------------------------------------------------------------\n * A high order component that forces a component to scroll to the window position (0,0) upon mounting\n * This function is intended to be used for modals on long pages for website modals.\n * @param ScrollComponent - The component that will scroll to the top position upon mounting\n */\nexport function withScrollTop(ScrollComponent: any){\n  return class ScrollToTopOnMount extends React.Component {\n    componentDidMount() {\n      window.scrollTo(0, 0);\n    }\n\n    render() {\n      return <ScrollComponent {...this.props}/>;\n    }\n  };\n}\n\n\n/**\n * ------------------------------------------------------------\n * withModal High-Order-Component\n * ------------------------------------------------------------\n * A high order component that wraps a component and gives it the format for a modal. This is intended \n * to be used with switch component that renders a another component for its background overlay\n * \n * NOTE: Remove all set all flex grow properties to null. This will cause the modal to grow the size of the background \n * which is unwarranted behavior!!!\n */\nexport function withModal(ModalComponent: any) {\n    const ScrollableComponent = withScrollTop(ModalComponent);\n    \n    return function Modal(props:any) {\n        const history = useHistory();\n        const back = e => {\n          e.stopPropagation();\n            history.goBack();\n        };\n        return (\n            <View \n            style={{\n                position: \"absolute\",\n                flex: 1,\n                top: 0,\n                left: 0,\n                bottom: 0,\n                right: 0,\n                backgroundColor: \"rgba(0, 0, 0, 0.15)\",\n                overflow: 'scroll',\n            }}>\n              <View style={{flex:1, overflow: 'hidden'}}>\n                <ScrollableComponent {...props} />\n                </View>\n            </View>\n        );\n    };\n};\n\n/**\n * ------------------------------------------------------------\n * Private Route\n * ------------------------------------------------------------\n * A Route that only is permited for the user to see if they have been successfully authenticated. This should be the result \n * of session management from the homepairs api. If the user has not been authenticated, they WILL be redirected to the \n * login page. \n * @param {{Component, ...any}} param -a list of props that must contain a component. This will be the protected component \n */\nfunction PrivateRoute ({Component, ...rest}) {\n  const {authed} = rest;\n  const location = useLocation();\n  return (\n    <Route {...rest}\n      render={ props => authed\n        ? <Component {...props} />\n        : <Redirect to={{pathname: LOGIN, state: {from: location}}} />}\n    />\n  );\n}\n\n/* Modal Ready Components for Routers */\n\nconst LoginModal = withModal(LoggingInModal);\nconst RegisterModal = withModal(CreatingAccountModal);\nconst AddPropertyModal = withModal(AddNewPropertyModal);\nconst EditPropertyReadyModal = withModal(EditPropertyModal);\nconst AddApplianceReadyModal = withModal(AddApplianceModal);\nconst EditApplianceReadyModal = withModal(EditApplianceModal);\nconst AddTenantReadyModal = withModal(AddTenantModal);\nconst EditTenantReadyModal = withModal(EditTenantModal);\nconst AddServiceProviderReadyModal = withModal(AddServiceProviderModal);\nconst PreferredProviderReadyModal = withModal(PreferredProviderModal);\nconst ServiceRequestInfoReadyModal = withModal(ServiceRequestModal);\n/* Modal Ready Components for Routers */\n\n\n/* Header Ready Pages */\nconst NavPropertyList = withNavHeader(Properties);\nconst NavDetailedProperty = withNavHeader(DetailedProperty);\nconst NavTenantProperty = withNavHeader(TenantProperty);\nconst NavAccountPage = withNavHeader(Account);\nconst NavServiceRequest = withNavHeader(ServiceRequest);\nconst NavNewRequestPage = withNavHeader(NewRequest);\n/* Header Ready Pages */\n\n/* Authentication Modal Switch Routers */\n\nfunction LoginModalSwitch() {\n  const location = useLocation();\n  \n  // Remember to set the location's state when navigating to a modal. Please look into \n  // 2.0/homepairs/homepairsUI/src/utility/NavigationRouterHandler.tsx for more information.\n  const background = location.state && location.state.background;\n  return (\n    <>\n    \n          <Switch path={LOGIN} location={background || location}>\n              <Route exact path={LOGIN}><LoginScreen/></Route>\n              <Route path={LOGIN_MODAL}><LoggingInModal/></Route>\n          </Switch>\n          {/* Show the modal when a background page is set */}\n          {background && <Route path={LOGIN_MODAL}><LoginModal/></Route> }\n      \n      </>\n  );\n}\n\nfunction SignUpModalSwitch() {\n  const location = useLocation();\n  const background = location.state && location.state.background;\n  return (\n    <>\n      <Switch path={SIGNUP} location={background || location}>\n        <Route exact path={SIGNUP}><SignUpScreen/></Route>\n        <Route path={CREATE_ACCOUNT_MODAL}> <CreatingAccountModal/> </Route>\n      </Switch>\n      {/* Show the modal when a background page is set */}\n      {background && <Route path={CREATE_ACCOUNT_MODAL}><RegisterModal/> </Route>}\n    </>\n  );\n}\n\nfunction RoopairsLoginModalSwitch() {\n  const location = useLocation();\n  const background = location.state && location.state.background;\n  return (\n    <>\n      <Switch location={background || location}>\n        <Route exact path={ROOPAIRS_LOGIN}><RoopairsLogin/></Route>\n        <Route path={ROOPAIRS_LOGIN_MODAL}><LoggingInModal/></Route>\n      </Switch>\n\n      {/* Show the modal when a background page is set */}\n      {background && <Route path={ROOPAIRS_LOGIN_MODAL}><LoginModal/></Route>}\n\n    </>   \n  );\n}\n\n/* Authentication Modal Switch Routers */\n\n\n/* Main Application Switch Routers */\n// TODO: Uses the match to resolve urls. This will allow users to navigate with proper params in order\n\nfunction TenantAccountPropertySwitch() {\n  const location = useLocation();\n  const background = location.state && location.state.background;\n  return (\n    <View style={style.routeContainer}>\n    <Route path='/tenant/home' render={(matches) => (\n        <>\n            <Switch path={`${TENANT_PROPERTY}`} location={background || location}>\n                <Route exact path={`${TENANT_PROPERTY}`}><NavTenantProperty/></Route>\n            </Switch>\n        </>\n      )}/>\n      </View>\n  );\n}\n\nfunction AccountSettingsSwitch() {\n  const location = useLocation();\n  const background = location.state && location.state.background;\n  return (\n    <View style={style.routeContainer}>\n      <Route path='/admin/account-settings' render={(matches) => (\n            <>                \n                <Switch path='/admin/account-settings' location={background || location}>\n                    <Route exact path={`${ACCOUNT_SETTINGS}`}><NavAccountPage/></Route>\n                </Switch>\n            </>\n        )}/>\n    </View>\n  );\n}\n\nfunction ServiceRequestSwitch() {\n  const location = useLocation();\n  const background = location.state && location.state.background;\n  return (\n    <View style={style.routeContainer}>\n    <Route path={SERVICE_REQUEST} render={(matches) => (\n          <>                \n              <Switch path={SERVICE_REQUEST} location={background || location}>\n                  <Route exact path={`${SERVICE_REQUEST}`}><NavServiceRequest/></Route>\n                  <Route exact path={`${NEW_SERVICE_REQUEST}`}><NavNewRequestPage /></Route>\n                  <Route exact path={`${SERVICE_REQUEST_INFO_MODAL}/:serviceRequest`}> <ServiceRequestModal/></Route>\n                  <Route exact path={`${ADD_SERVICE_PROVIDER_MODAL}`}><AddServiceProviderReadyModal/></Route>\n                  <Route exact path={`${PREFERRED_PROVIDER_MODAL}/:serviceProvider`}><PreferredProviderReadyModal/></Route>\n              </Switch>\n\n              {background && <Route path={`${SERVICE_REQUEST_INFO_MODAL}/:serviceRequest`}><ServiceRequestInfoReadyModal/></Route>}\n              {background && <Route path={`${ADD_SERVICE_PROVIDER_MODAL}`}><AddServiceProviderReadyModal/></Route>}\n              {background && <Route path={`${PREFERRED_PROVIDER_MODAL}/:serviceProvider`}><PreferredProviderReadyModal/></Route>}\n          </>\n      )}/>\n      </View>\n  );\n}\n\nfunction SinglePropertySwitch() {\n  const location = useLocation();\n  const background = location.state && location.state.background;\n  return (\n    <View style={style.routeContainer}>\n    <Route path={`${PROPERTY}/:propId`} render={(matches) => (\n          <>                \n              <Switch path={`${PROPERTY}/:propId`} location={background || location}>\n                  <Route exact path={`${PROPERTY}/:propId`}><NavDetailedProperty/></Route>\n                  <Route exact path={`${EDIT_PROPERTY_MODAL}/:propId`}><EditPropertyModal /></Route>\n                  <Route path={`${ADD_TENANT_MODAL}/:propId`}><AddTenantModal/></Route>\n                  <Route path={`${EDIT_TENANT_MODAL}/:propId`}><EditTenantModal/></Route>\n                  <Route path={`${ADD_APPLIANCE_MODAL}/:propId/:property`}><AddApplianceModal/></Route>\n                  <Route path={`${EDIT_APPLIANCE_MODAL}/:propId/:appliance`}><EditApplianceModal/></Route>\n              </Switch>\n      \n              {/* Show the modal when a background page is set */}\n              {background && <Route path={`${EDIT_PROPERTY_MODAL}/:propId`}> <EditPropertyReadyModal /> </Route>}\n              {background && <Route path={`${ADD_TENANT_MODAL}/:propId`}><AddTenantReadyModal/></Route>}\n              {background && <Route path={`${EDIT_TENANT_MODAL}/:tenant/:propId`}><EditTenantReadyModal/></Route>}\n              {background && <Route path={`${ADD_APPLIANCE_MODAL}/:token/:property`}><AddApplianceReadyModal/></Route>}\n              {background && <Route path={`${EDIT_APPLIANCE_MODAL}/:propId/:appliance`}><EditApplianceReadyModal/></Route>}\n\n          </>\n      \n      )}/>\n    </View>\n  );\n}\n\nfunction PropertiesSwitch() {\n    const location = useLocation();\n    const background = location.state && location.state.background;\n    return (\n      <View style={style.routeContainer}>\n      <Route path={PROPERTY_LIST} render={(matches) => (\n            <>\n                <Switch path={PROPERTY_LIST} location={background || location}>\n                    <Route exact path={PROPERTY_LIST}><NavPropertyList/></Route>\n                    <Route exact path={ADD_PROPERTY_MODAL}><AddNewPropertyModal/></Route>\n                </Switch>\n        \n                {/* Show the modal when a background page is set */}\n                {background && <Route path={ADD_PROPERTY_MODAL}><AddPropertyModal/></Route>}\n            </>\n        )}/>\n      </View>\n    );\n}\n\n/* Main Application Switch Routers */\n\n/**\n * ------------------------------------------------------------\n * AppNavigator (Web)\n * ------------------------------------------------------------\n * The means of user navigation on web platforms. This is different from mobile in which url navigation \n * is supported via the react-router-dom library. This is the expected application based that will be \n * used for web platforms on all devices and tests should be written using a mock RouterProps object. \n * @param props \n */\nexport default function AppNavigator(props:any){  \n    // TODO: Set PrivateRoute to auth status from session token\n    // <Router basename={`${process.env.PUBLIC_URL}`}> is needed for web routing resolution for remote servers \n    return (<>\n        <Router basename={`${process.env.PUBLIC_URL}`}>  \n            <Switch>\n                <Route path='/authentication'>\n                  <RoopairsLoginModalSwitch/>\n                  <LoginModalSwitch />\n                  <SignUpModalSwitch />\n                </Route>\n                <Route exact path='/'> <Redirect to={{pathname: LOGIN}} /></Route>\n                <PrivateRoute path={PROPERTY_LIST} Component={PropertiesSwitch} {...props}/>\n                <PrivateRoute path='/admin/property/' Component={SinglePropertySwitch} {...props}/>\n                <PrivateRoute path='/admin/service-requests' Component={ServiceRequestSwitch} {...props}/>\n                <PrivateRoute path={ACCOUNT_SETTINGS} Component={AccountSettingsSwitch} {...props}/>\n\n                {/** Tenant Property Screen */}\n                <PrivateRoute path={TENANT_PROPERTY} Component={TenantAccountPropertySwitch} {...props}/>\n\n                <Route path='/*'>404 Does not Exist</Route>\n            </Switch>\n        </Router> \n      </>\n    );\n};\nexport {AppNavigator};","import {\n    PropertyListState,\n    PropertyListAction,\n    AddPropertyAction,\n    RemovePropertyAction,\n    UpdatePropertyAction,\n    FetchPropertyAndPropertyManagerAction,\n    SetSelectedPropertyAction,\n    FetchPropertiesAction,\n    StorePropertyApplianceAndTenantAction,\n    Property,\n} from '../types';\nimport { PROPERTY_LIST_ACTION_TYPES } from './actions';\n\n/**\n * A reducer is a pure function that takes the previous state and\n * an action as arguments and returns a new state. The reducer is\n * instrumental in keeping the current state of friends updated\n * throughout our app as it changes.\n * */\n\n\nexport const initialState: PropertyListState = {\n    selectedPropertyId: null,\n    properties: {},\n    appliances: [],\n    tenants: [],\n    propertyManager: null,\n};\n\n// TODO: Make sure any updates to the local storage occur here!!! This way it will always have an updated property list\nexport const properties = (\n    state: PropertyListState = initialState,\n    action: PropertyListAction,\n) => {\n    /* * NOTE: USE IMMUTABLE UPDATE FUNCTIONS FOR REDUCERS OR ELSE REDUX WILL NOT UPDATE!!! * */\n    const newState = { ...state };\n    let property: Property = null;\n    let updatePropId: string = null;\n    let updatedPropertyDict = {};\n\n    switch (action.type) {\n        case PROPERTY_LIST_ACTION_TYPES.ADD_PROPERTY:\n            // pay attention to type-casting on action\n            property = (action as AddPropertyAction).userData;\n            updatedPropertyDict = {...state.properties};\n            updatedPropertyDict[property.propId] = property;\n            return {\n                ...newState,\n                selectedPropertyId: null,\n                properties: updatedPropertyDict,\n            };\n        case PROPERTY_LIST_ACTION_TYPES.REMOVE_PROPERTY:\n            updatePropId = (action as RemovePropertyAction).propId;\n            updatedPropertyDict = {...newState.properties};\n            delete updatedPropertyDict[updatePropId];\n            return {\n                ...newState,\n                selectedPropertyId: null,\n                properties: updatedPropertyDict,\n            };\n        case PROPERTY_LIST_ACTION_TYPES.UPDATE_PROPERTY:\n            property = (action as UpdatePropertyAction).userData;\n            updatePropId = (action as UpdatePropertyAction).propId;\n            updatedPropertyDict = {...newState.properties};\n            updatedPropertyDict[updatePropId] = property;\n            return {\n                ...newState,\n                selectedPropertyId: updatePropId,\n                properties: updatedPropertyDict,\n            };\n        case PROPERTY_LIST_ACTION_TYPES.FETCH_PROPERTY_AND_PROPERTY_MANAGER:\n            return {\n                ...newState,\n                selectedPropertyId: (action as FetchPropertyAndPropertyManagerAction).property.propId,\n                properties: (action as FetchPropertyAndPropertyManagerAction).property,\n                propertyManager: (action as FetchPropertyAndPropertyManagerAction).propertyManager,\n            };\n        case PROPERTY_LIST_ACTION_TYPES.FETCH_PROPERTIES:\n            return {\n                ...newState,\n                selectedPropertyId: null,\n                properties: (action as FetchPropertiesAction).properties,\n            };\n        case PROPERTY_LIST_ACTION_TYPES.SET_SELECTED_PROPERTY:\n            return {\n                ...newState,\n                selectedPropertyId: (action as SetSelectedPropertyAction).propId,\n            };\n        case PROPERTY_LIST_ACTION_TYPES.STORE_APPLIANCES_AND_TENANTS:\n            return {\n                ...newState,\n                tenants: (action as StorePropertyApplianceAndTenantAction).tenants,\n                appliances: (action as StorePropertyApplianceAndTenantAction).appliances,\n            };\n        default:\n            return state;\n    }\n};\n","/**\n* A reducer is a pure function that takes the previous state and \n* an action as arguments and returns a new state. The reducer is \n* instrumental in keeping the current state updated \n* throughout our app as it changes. \n* */\nimport { \n    AccountState, \n    FetchUserAccountProfileAction, \n    AccountStateAction,\n    AccountTypes, \n} from '../types';\nimport { FETCH_PROFILE_ACTION_TYPES } from './actions';\n\n\nexport const initialState: AccountState = {\n    accountType: AccountTypes.Tenant,\n    firstName: null,\n    lastName: null,\n    email: null,\n    address: null,\n    roopairsToken: null,\n    propId: null,\n    pmId: null,\n};\n\n/**\n * ----------------------------------------------------\n * accountProfile\n * ----------------------------------------------------\n * The reducer for the redux-store that deals with the state of anything homepairs\n * account related. This reducer will be initialized upon authorization and will \n * be called during a change of user settings. Only dispatch methods and the \n * root store should ever need to use this function.\n * @param {AccountState} state - current state of the redux-store\n * @param {AccountStateAction} action - the value that determines what type of mutation will occur with the store \n */\nexport const accountProfile = (\n    state: AccountState = initialState,\n    action: AccountStateAction,\n) => {\n    switch (action.type){\n        case FETCH_PROFILE_ACTION_TYPES.FETCH_PROFILE:\n            return (action as FetchUserAccountProfileAction).profile;\n        default:\n            // Always return previous state. This is for the persister \n            return state;\n    }\n};\n","import { Dimensions } from 'react-native';\nimport strings from 'homepairs-strings';\nimport {MainAppStack} from 'src/routes';\nimport { \n    HeaderState, \n    ToggleMenuAction,\n    SwitchDropDownNavBarAction,\n    ShowGoBackOnButtonClick,\n    UpdateSelectedPageAction,\n    HeaderAction,\n    HomePairsDimensions,\n} from '../types';\nimport { HEADER_ACTION_TYPES } from './actions';\n\n/**\n * This function is intended be called when the application first loads. It \n * will insure the that header is rendered correctly based on the dimensions \n * of the window. This is specifically intended for the web since these can \n * vary but this can help reduce rendering for mobile platforms.\n */\nfunction determineInitialIsDropDown() {\n    const {width} = Dimensions.get('window');\n    if(width < HomePairsDimensions.DROP_MENU_WIDTH)\n        return true;\n    return false;  \n}\n\nexport const initialState: HeaderState = {\n    showMenu: false,\n    isDropDown: determineInitialIsDropDown(),\n    currentPage: {title: undefined, navigate: undefined},\n    previousPagesStack: [],\n    showBackButton: false,\n    menu: [\n        strings.propertiesPage.title,\n        strings.serviceRequestPage.title,\n        strings.connectAccountPage.title,\n        strings.logOut,\n    ],\n};\n\nexport const header = (\n    state: HeaderState = initialState,\n    action: HeaderAction, \n) => {\n    /* * NOTE: USE IMMUTABLE UPDATE FUNCTIONS FOR REDUCERS OR ELSE REDUX WILL NOT UPDATE!!! * */\n    const newState = {...state};\n    switch (action.type){\n        case HEADER_ACTION_TYPES.TOGGLE_MENU:\n            newState.showMenu = (action as ToggleMenuAction).showMenu;\n            return newState;\n        case HEADER_ACTION_TYPES.SHOW_GOBACK_BUTTON:\n            newState.showBackButton = (action as ShowGoBackOnButtonClick).showBackButton;\n            return newState;\n        case HEADER_ACTION_TYPES.SWITCH_DROPDOWN_NAVBAR:\n            newState.isDropDown = (action as SwitchDropDownNavBarAction).isDropDown;\n            return newState;\n        case HEADER_ACTION_TYPES.UPDATE_SELECTED_PAGE:\n            newState.previousPagesStack.push(newState.currentPage);\n            newState.currentPage = (action as UpdateSelectedPageAction).selected;\n            return newState;\n        case HEADER_ACTION_TYPES.ON_GO_BACK:\n            newState.currentPage = newState.previousPagesStack.pop();\n            return newState;\n        default:\n            return newState;\n    }\n};","import { \n    ServiceState,\n    ServiceAction,\n} from '../types';\nimport { SERVICES_ACTION_TYPES } from './actions';\n\nexport const initialState : ServiceState = {\n    serviceRequests : [],\n};\n\nexport const serviceRequests = (\n    state: ServiceState = initialState,\n    action: ServiceAction,\n) => {\n    const newState = {...state, modalOpen: true };\n    switch (action.type){\n      case SERVICES_ACTION_TYPES.ACCEPT_SERVICE:\n            // TODO: Complete AcceptServiceAction reducer \n            return newState;\n      case SERVICES_ACTION_TYPES.DENY_SERVICE: \n            // TODO: Complete DenyServiceAction reducer\n            return newState;\n      case SERVICES_ACTION_TYPES.CANCEL_SERVICE: \n            // TODO: Complete CancelServiceAction reducer\n            return newState;\n      case SERVICES_ACTION_TYPES.COMPLETE_SERVICE:\n            // TODO: Complete CompleteServiceAction reducer\n            return newState;\n      case SERVICES_ACTION_TYPES.REQUEST_SERVICE:\n            // TODO: Complete RequestServiceACtion reducer \n            return newState;\n      default:\n          return state;\n  }\n};","import { \n    SettingsActions,\n    SettingsState,\n    ToggleDarkModeActivationAction,\n    ToggleNotificationActivationAction,\n    AddGoogleApiKeyAction,\n} from '../types';\nimport { SETTINGS_ACTION_TYPES } from './actions';\n\nexport const initialState : SettingsState = {\n    isDarkModeActive: false,\n    areNotificationsActive: true,\n    apiKey: null,\n};\n\nexport const settings = (\n    state: SettingsState = initialState,\n    action: SettingsActions,\n) => {\n    const newState = {...state, modalOpen: true };\n    switch (action.type){\n      case SETTINGS_ACTION_TYPES.TOGGLE_DARKMODE_ACTIVATION:\n            newState.isDarkModeActive = (action as ToggleDarkModeActivationAction).isDarkModeActive;\n            return newState;\n      case SETTINGS_ACTION_TYPES.TOGGLE_NOTIFICATION_ACTIVATION: \n            newState.isDarkModeActive = (action as ToggleNotificationActivationAction).areNotificationsActive;\n            return newState;\n      case SETTINGS_ACTION_TYPES.ADD_GOOGLE_API_KEY: \n            newState.apiKey = (action as AddGoogleApiKeyAction).apiKey;\n            return newState;\n      default:\n          return state;\n  }\n};","import { AuthenticationState, SessionAction, SetAccountAuthenticationStateAction } from '../types';\nimport { SESSION_ACTION_TYPES } from './actions';\n\nexport const initialState = {\n    authed: false,\n};\n\nexport const authenticated = (\n    state: AuthenticationState = initialState,\n    action: SessionAction,\n) => {\n    /* * NOTE: USE IMMUTABLE UPDATE FUNCTIONS FOR REDUCERS OR ELSE REDUX WILL NOT UPDATE!!! * */\n    let authed;\n    switch (action.type) {\n        case SESSION_ACTION_TYPES.SET_AUTH_STATE:\n            // pay attention to type-casting on action\n            authed = (action as SetAccountAuthenticationStateAction).authed;\n            return {\n                authed,\n            };\n        default:\n            return state;\n    }\n};\n","/* eslint-disable no-case-declarations */\nimport { \n    PreferredServiceProviderState, \n    PreferredServiceProviderAction, \n    RemoveServiceProviderAction, \n    RefreshServiceProvidersAction,\n    ServiceProvider,\n    ProviderDictionary,\n} from '../types';\nimport { PREFERRED_SERVICE_PROVIDER_ACTION_TYPES} from './actions';\n\n\nconst {REFRESH_SERVICE_PROVIDERS, REMOVE_SERVICE_PROVIDER} = PREFERRED_SERVICE_PROVIDER_ACTION_TYPES;\n\n/**\n * Helper function that converts an array to ServiceProviders to something a preferredServiceProivderState\n * @param {ServiceProvider[]} serviceProviders \n */\nexport function arrayToDictionary(serviceProviders: ServiceProvider[]) : ProviderDictionary {\n    let newDict: ProviderDictionary = {};\n    serviceProviders.forEach((serviceProvider: ServiceProvider) => {\n        const {phoneNum} = serviceProvider;\n        newDict[phoneNum] = serviceProvider;\n    });\n    return newDict;\n}\n\n/**\n * Helper function that removes a service provider from a dictionary without mutating the original\n * @param {ProviderDictionary} serviceProviders -dictionary of serviceProviders\n * @param {string} phoneNum -service provider key to be removed\n */\nexport function removeKey(serviceProviders: ProviderDictionary, phoneNum: string): ProviderDictionary {\n    let updatedServiceProviders : ProviderDictionary = {};\n    Object.entries(serviceProviders).forEach((serviceProvider) => {\n        if(phoneNum !== serviceProvider[0]){\n            const [key, val] = serviceProvider;\n            updatedServiceProviders[key] = val;\n        }\n    });\n    return updatedServiceProviders;\n}\n\nexport const initialState : PreferredServiceProviderState = {\n    serviceProviders: {},\n};\n\nexport const preferredProviders = (\n    state: PreferredServiceProviderState = initialState,\n    action: PreferredServiceProviderAction,\n) : PreferredServiceProviderState => {\n    const {serviceProviders} = state;\n\n    switch(action.type){\n        case REFRESH_SERVICE_PROVIDERS:\n            const newServiceProviders = arrayToDictionary(\n                (action as RefreshServiceProvidersAction).preferredServiceProviders);\n            return {\n                serviceProviders : newServiceProviders,\n            };\n        case REMOVE_SERVICE_PROVIDER:\n            const {phoneNum}  = (action as RemoveServiceProviderAction).serviceProvider;\n            const updatedProviders: ProviderDictionary = removeKey(serviceProviders, phoneNum);\n            return {\n                serviceProviders: updatedProviders,\n            };\n        default:\n            return state;\n    }\n};","import { createStore, combineReducers, AnyAction, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { AsyncStorage } from 'react-native';\nimport { AppState } from './types';\nimport { properties } from './property-list/reducer';\nimport { accountProfile } from './account/reducer';\nimport { header } from './header/reducer';\nimport { serviceRequests } from './service/reducer';\nimport { settings } from './settings/reducer';\nimport { authenticated } from './session/reducer';\nimport { preferredProviders } from './preferred-service-provider/reducer';\n\n\n\nconst rootReducer = combineReducers<AppState, AnyAction>(\n    {   \n        header,\n        properties,\n        accountProfile,\n        serviceRequests,\n        settings,\n        authenticated,\n        preferredProviders,\n        /** REMEMBER TO GO INTO ./types AND UPDATE THE AppState TYPE */\n    },\n);\n\nconst persistConfig = {\n  key: 'root',\n  storage : AsyncStorage,\n  blacklist: [\"settings\"],\n};\n \nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n \nexport default () => {\n  const store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(thunk)));\n  const persistor = persistStore(store);\n  return {store, persistor};\n};","import React, {useState} from 'react';\nimport { registerRootComponent, AppLoading} from 'expo';\nimport { Provider, connect } from 'react-redux';\nimport { LoadFonts } from 'homepairs-fonts';\nimport { AppState } from 'homepairs-types';\nimport { ActivityIndicator, StatusBar, AsyncStorage } from 'react-native';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { fetchGoogleApiKey } from 'homepairs-endpoints';\nimport { AppNavigator } from './src/components/AppNavigation';\nimport initializeStore from './src/state/store';\n\n/* TODO: We can optimize this. Instead of holding the entire response, \n    we can hold only the information we need and create actions that deal with this use case.\n    Also, we should be fetching our properties and preferredProviders after we have confirmed a \n    session is still valid. \n    */\n\nconst checkSession = async () => {\n    await LoadFonts();\n    await AsyncStorage.getItem('persist:root').then(response => {\n        \n    });\n};\n\nfunction mapStateToProps(state: AppState): any {\n    return {\n        authed: state.authenticated,\n    };\n}\nconst ConnectedApp = connect(mapStateToProps)(AppNavigator);\n\nconst App = () => {\n    const [dataLoaded, setDataLoaded] = useState(false);\n\n    const {store, persistor} = initializeStore();\n    store.dispatch(fetchGoogleApiKey());\n\n    // Check to see if we have a valid session token. If we do, fetch the profile information again. \n    return !dataLoaded ?  \n    <AppLoading startAsync={checkSession} onFinish={() => {setDataLoaded(true);}} onError={(error) => console.log(error)}>\n        <ActivityIndicator />\n          <StatusBar barStyle=\"default\" />\n        </AppLoading>\n    : (\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <ConnectedApp />\n            </PersistGate>\n        </Provider>\n    );\n};\n\nexport default App;\n\nregisterRootComponent(App);\n"],"sourceRoot":""}